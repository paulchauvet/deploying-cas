{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Deploying Apereo CAS Deploying Apereo CAS provides step-by-step instructions for setting up Apereo CAS 6 with a goal of deploying and maintaining both CAS and the application server (Tomcat) via Ansible. The goal of this is to make deploying and maintaining CAS and Tomcat easy. The idea for creating this (and some of the content) is based on the amazing Deploying Apereo CAS documentation created for CAS 5, created by David Curry of The New School. It is meant to supplement, not replace, the documentation created by Apereo for CAS. This is my first foray into using Github pages, or making documentation for deploying an application like this (my documentation has either been end user facing or for internal staff up until now) - so apologies for any rough edges on it. It's incomplete as of now but my goal is to document as I deploy into test and later into production. It should be mostly complete by the end of March 2021. It was created in my work at the State University of New York at New Paltz but I wanted to give back to the CAS community for the great information I've found from so many. Copyright and Licensing Documentation Content All documentation content is Copyright \u00a9 2021, SUNY New Paltz. It is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License . Site Template This site was created with MkDocs using the Material Theme . Author Information Paul Chauvet Information Security Officer State University of New York at New Paltz chauvetp@newpaltz.edu DISCLAIMER The instructions and settings provided in this document may not be the only way to do things. They are the way that has worked for us at New Paltz, and I've tried to document them as well as possible - but there may be better/cleaner ways of doing things. They may not work at all for your environment. Heck - I may have made some big mistakes here. As always - test test test. You should not go running into this on a production environment without ample testing AND understanding of the setup (both Tomcat, and CAS). No warranty express or implied. No support guaranteed. If you use this - and find it useful - let me know! If you use it and find errors or would suggest changes - sure - let me know those too! If you have suggestions as to how to do this (insert some completely different way) - you may want to fork this or create your own site from scratch for it.","title":"Main"},{"location":"#deploying-apereo-cas","text":"Deploying Apereo CAS provides step-by-step instructions for setting up Apereo CAS 6 with a goal of deploying and maintaining both CAS and the application server (Tomcat) via Ansible. The goal of this is to make deploying and maintaining CAS and Tomcat easy. The idea for creating this (and some of the content) is based on the amazing Deploying Apereo CAS documentation created for CAS 5, created by David Curry of The New School. It is meant to supplement, not replace, the documentation created by Apereo for CAS. This is my first foray into using Github pages, or making documentation for deploying an application like this (my documentation has either been end user facing or for internal staff up until now) - so apologies for any rough edges on it. It's incomplete as of now but my goal is to document as I deploy into test and later into production. It should be mostly complete by the end of March 2021. It was created in my work at the State University of New York at New Paltz but I wanted to give back to the CAS community for the great information I've found from so many.","title":"Deploying Apereo CAS"},{"location":"#copyright-and-licensing","text":"","title":"Copyright and Licensing"},{"location":"#documentation-content","text":"All documentation content is Copyright \u00a9 2021, SUNY New Paltz. It is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Documentation Content"},{"location":"#site-template","text":"This site was created with MkDocs using the Material Theme .","title":"Site Template"},{"location":"#author-information","text":"Paul Chauvet Information Security Officer State University of New York at New Paltz chauvetp@newpaltz.edu DISCLAIMER The instructions and settings provided in this document may not be the only way to do things. They are the way that has worked for us at New Paltz, and I've tried to document them as well as possible - but there may be better/cleaner ways of doing things. They may not work at all for your environment. Heck - I may have made some big mistakes here. As always - test test test. You should not go running into this on a production environment without ample testing AND understanding of the setup (both Tomcat, and CAS). No warranty express or implied. No support guaranteed. If you use this - and find it useful - let me know! If you use it and find errors or would suggest changes - sure - let me know those too! If you have suggestions as to how to do this (insert some completely different way) - you may want to fork this or create your own site from scratch for it.","title":"Author Information"},{"location":"about/about-new-paltz/","text":"About the State University of New York at New Paltz What is now the State University of New York at New Paltz has existed in some form in New Paltz, NY since 1828. It was originally the New Paltz Classic school, later a state normal school that trained teahcers for New York State public schools, and an official four-year college in 1938 as the State Teachers College at New Paltz. It was one of the founding schools of the SUNY system in 1948. Today, the State University of New York at New Paltz covers 216 acres and includes the College of Liberal Arts & Sciences, the School of Business, the School of Science & Engineering, the School of Fine & Performing Arts, the School of Education, and The Graduate School. Over time, the curricular mission of the school has broadened from the nearly single-track of the Normal School to 143 programs in six schools. Why New Paltz? The State University of New York at New Paltz is a creative, diverse, challenging and supportive environment where you get a degree from a highly selective university and an education rich in experiences that will last a lifetime. At New Paltz, you are encouraged to explore and take intellectual risks, to find your passion, to begin your path and to find your voice.. Nationally recognized and very affordable The Princeton Review ranked SUNY New Paltz as one of the nation\u2019s \u201cBest Value\u201d colleges and universities and included it among the Top 75 public, four-year institutions of higher education in the US. Kiplinger\u2019s Personal Finance ranked the college in the Top 100 best values in the nation and U.S.News & World Report ranked New Paltz fourth among best public regional universities in the North with both bachelor\u2019s and master\u2019s degree programs. Excellent faculty New Paltz faculty have been cited for excellence in teaching \u2013 SUNY Chancellor\u2019s Award for Teaching and SUNY Distinguished Faculty \u2013 and numerous research honors such as Fulbright, Guggenheim, National Science Foundation and National Endowment for the Arts fellowships. Creative environment of discovery At New Paltz, the learning atmosphere has an air of imaginative inquiry that bridges all academic endeavors. The faculty encourages students to question, experiment, and discover in ways that lead to innovative thinking. Great location New Paltz is a vibrant, historic village (pop. 14,003) in New York State\u2019s Hudson Valley region, midway between Albany and New York City. Our campus offers beautiful views of the Shawangunk Mountains and easy access to outdoor recreation such as hiking, kayaking, climbing and biking as well as a wide variety of restaurants, specialty shops, historic sites, and local entertainment venues. We\u2019re green. The Princeton Review selected New Paltz for its 2012 Guide to 322 Green Colleges, recognizing our academic programs, environmentally friendly buildings, and increased recycling efforts. Student initiatives include: RecycleMania, the EPA WasteWise Program, Students for Sustainable Agriculture, the Green Thinking student blog, and the Solar Car team. You\u2019re welcome. We welcome people of diverse backgrounds, cultures, political views, and ambitions. This accepting environment makes New Paltz an ideal place for students to learn and flourish. For more information, visit www.newpaltz.edu .","title":"About SUNY New Paltz"},{"location":"about/about-new-paltz/#about-the-state-university-of-new-york-at-new-paltz","text":"What is now the State University of New York at New Paltz has existed in some form in New Paltz, NY since 1828. It was originally the New Paltz Classic school, later a state normal school that trained teahcers for New York State public schools, and an official four-year college in 1938 as the State Teachers College at New Paltz. It was one of the founding schools of the SUNY system in 1948. Today, the State University of New York at New Paltz covers 216 acres and includes the College of Liberal Arts & Sciences, the School of Business, the School of Science & Engineering, the School of Fine & Performing Arts, the School of Education, and The Graduate School. Over time, the curricular mission of the school has broadened from the nearly single-track of the Normal School to 143 programs in six schools.","title":"About the State University of New York at New Paltz"},{"location":"about/about-new-paltz/#why-new-paltz","text":"The State University of New York at New Paltz is a creative, diverse, challenging and supportive environment where you get a degree from a highly selective university and an education rich in experiences that will last a lifetime. At New Paltz, you are encouraged to explore and take intellectual risks, to find your passion, to begin your path and to find your voice..","title":"Why New Paltz?"},{"location":"about/about-new-paltz/#nationally-recognized-and-very-affordable","text":"The Princeton Review ranked SUNY New Paltz as one of the nation\u2019s \u201cBest Value\u201d colleges and universities and included it among the Top 75 public, four-year institutions of higher education in the US. Kiplinger\u2019s Personal Finance ranked the college in the Top 100 best values in the nation and U.S.News & World Report ranked New Paltz fourth among best public regional universities in the North with both bachelor\u2019s and master\u2019s degree programs.","title":"Nationally recognized and very affordable"},{"location":"about/about-new-paltz/#excellent-faculty","text":"New Paltz faculty have been cited for excellence in teaching \u2013 SUNY Chancellor\u2019s Award for Teaching and SUNY Distinguished Faculty \u2013 and numerous research honors such as Fulbright, Guggenheim, National Science Foundation and National Endowment for the Arts fellowships.","title":"Excellent faculty"},{"location":"about/about-new-paltz/#creative-environment-of-discovery","text":"At New Paltz, the learning atmosphere has an air of imaginative inquiry that bridges all academic endeavors. The faculty encourages students to question, experiment, and discover in ways that lead to innovative thinking.","title":"Creative environment of discovery"},{"location":"about/about-new-paltz/#great-location","text":"New Paltz is a vibrant, historic village (pop. 14,003) in New York State\u2019s Hudson Valley region, midway between Albany and New York City. Our campus offers beautiful views of the Shawangunk Mountains and easy access to outdoor recreation such as hiking, kayaking, climbing and biking as well as a wide variety of restaurants, specialty shops, historic sites, and local entertainment venues.","title":"Great location"},{"location":"about/about-new-paltz/#were-green","text":"The Princeton Review selected New Paltz for its 2012 Guide to 322 Green Colleges, recognizing our academic programs, environmentally friendly buildings, and increased recycling efforts. Student initiatives include: RecycleMania, the EPA WasteWise Program, Students for Sustainable Agriculture, the Green Thinking student blog, and the Solar Car team.","title":"We\u2019re green."},{"location":"about/about-new-paltz/#youre-welcome","text":"We welcome people of diverse backgrounds, cultures, political views, and ambitions. This accepting environment makes New Paltz an ideal place for students to learn and flourish. For more information, visit www.newpaltz.edu .","title":"You\u2019re welcome."},{"location":"about/acknowledgements/","text":"Acknowledgements I'd like to thank all those who contributed to this - whether via their public documentation, forum posts on the Apereo CAS forums, or directly via email. This includes: David Curry of The New School for his amazing Deploying Apereo CAS page which I used to both get CAS 5 going several years ago, and used as a model for this documentation. Part of the reason I am creating this document is so that others can (hopefully!) get as much benefit from this document for CAS 6 as I did with his for, CAS 5, including the automation portions using Ansible. David Warden and Shawn Plummer of SUNY Geneseo William Jojo Hudson Valley Community College - who also has a CAS primer Ken Runyon of SUNY System Administration Matt Adkins of Liberty University Richard Schneider of Harding University David Campman of Forsyte IT Misagh Moayyed Fawnoos My CIO (John Reina) and Vice-President (Michele Halstead) here at New Paltz for not only giving me the time to work on this documentation - but also encouraging me to release it publicly for the higher ed community. And all the developers who have contributed to the Apereo CAS project and who contribute in the CAS Community . My sincere apologies if I forgot anyone! Please let me know if that's the case.","title":"Acknowledgements"},{"location":"about/acknowledgements/#acknowledgements","text":"I'd like to thank all those who contributed to this - whether via their public documentation, forum posts on the Apereo CAS forums, or directly via email. This includes: David Curry of The New School for his amazing Deploying Apereo CAS page which I used to both get CAS 5 going several years ago, and used as a model for this documentation. Part of the reason I am creating this document is so that others can (hopefully!) get as much benefit from this document for CAS 6 as I did with his for, CAS 5, including the automation portions using Ansible. David Warden and Shawn Plummer of SUNY Geneseo William Jojo Hudson Valley Community College - who also has a CAS primer Ken Runyon of SUNY System Administration Matt Adkins of Liberty University Richard Schneider of Harding University David Campman of Forsyte IT Misagh Moayyed Fawnoos My CIO (John Reina) and Vice-President (Michele Halstead) here at New Paltz for not only giving me the time to work on this documentation - but also encouraging me to release it publicly for the higher ed community. And all the developers who have contributed to the Apereo CAS project and who contribute in the CAS Community . My sincere apologies if I forgot anyone! Please let me know if that's the case.","title":"Acknowledgements"},{"location":"about/architecture/","text":"System/Architecture Overview Components This document was created to reflect the environment in use at New Paltz for CAS. Apereo CAS 6.3.x Red Hat Enterprise Linux 8 Apache Tomcat 9.0.x Apache httpd Ansible Azure Active Directory Microsoft Active Directory Duo for Multifactor authentication Hazelcast Ticket Registry for ticket storage between systems. If you want to use another version of CAS 6.x - it may or may not have significant changes. I started with CAS 6.2 for these documents and our own install, but ran into issues with the Duo MFA module, so moved to 6.3. If you are going to use another operating system, web server, or java servlet container, I'd imagine the CAS portion of the instructions will be relatively similar - though the Ansible deployments for Tomcat may be less similar or useful. Design We have three levels of CAS here at New Paltz, Production, Test, and Development. Test is used for non-production applications that still need SSO (for example Banner test). Development is exclusively used for building, and testing, new versions or configuration changes for CAS. Authentication will be against either: On-prem Active Directory (for alumni) Azure Active Directory (for active faculty/staff/students, and retirees) Note: we may eventually have all alumni in Azure - still working on that. In each case - the hosts sit behind a load balancer (in our case, F5 Big IP, though HA Proxy or basically any other load balancer should work. We're not doing anything crazy at the LB level). The load balancer is split in multiple locations, as are the application servers. This gives us resilience if a single site on-campus is down but does NOT give resilience against a full outage on-campus. This is one reason why we are looking to have as many services as possible authenticate directly against Azure instead of CAS. Using CAS to delegate authentication to Azure, we can: make this transition as streamlined as possible (and avoiding the need for people to have to login twice through two separate SSO systems) will let us make the transition of existing CAS apps to SAML on Azure (if they support SAML) gradual, so we don't have to change 30 services (involving both internal and external service providers) over a weekend. and will let us keep applications that only support CAS on CAS. centralize logins for almost all college systems in a single place making incident response, and troubleshooting, easier. Limitations: Any application still authenticating against CAS will still have CAS as a point of failure. You can reduce this by having CAS load balanced and in multiple sites (on-prem, off-site, in the cloud, etc.). Since Azure will see CAS as a single application, you are left to either: exclude CAS from Azure conditional access policies and use CAS to implement MFA include CAS from Azure conditional access policies but there are no 'exceptions' (i.e. that one service that really doesn't do anything sensitive or important and you don't want to turn MFA on for will still have it) Rationale Azure itself hasn't been the most reliable service at times. The total 'downtime' for Azure authentication has been far higher than our on-prem environment - but even so I have confidence in it. If it breaks - Microsoft folks will fix it - usually pretty quickly. On the other hand - I've learned over the year that CAS is complex. I can train people here on it - but if I'm unavailable or we have issues which others cannot solve - we have issues. If you're in a similar boat, you may want to do what we're doing. You may also want to look at other companies like Unicon who can provide technical support and assistance as a service for CAS and other open source products. We will have outages on-prem (or even in the cloud if we just run CAS and AD in the cloud). Over time - reliability will strongly favor a large service like Azure over what I personally can setup.","title":"Architecture/design"},{"location":"about/architecture/#systemarchitecture-overview","text":"","title":"System/Architecture Overview"},{"location":"about/architecture/#components","text":"This document was created to reflect the environment in use at New Paltz for CAS. Apereo CAS 6.3.x Red Hat Enterprise Linux 8 Apache Tomcat 9.0.x Apache httpd Ansible Azure Active Directory Microsoft Active Directory Duo for Multifactor authentication Hazelcast Ticket Registry for ticket storage between systems. If you want to use another version of CAS 6.x - it may or may not have significant changes. I started with CAS 6.2 for these documents and our own install, but ran into issues with the Duo MFA module, so moved to 6.3. If you are going to use another operating system, web server, or java servlet container, I'd imagine the CAS portion of the instructions will be relatively similar - though the Ansible deployments for Tomcat may be less similar or useful.","title":"Components"},{"location":"about/architecture/#design","text":"We have three levels of CAS here at New Paltz, Production, Test, and Development. Test is used for non-production applications that still need SSO (for example Banner test). Development is exclusively used for building, and testing, new versions or configuration changes for CAS. Authentication will be against either: On-prem Active Directory (for alumni) Azure Active Directory (for active faculty/staff/students, and retirees) Note: we may eventually have all alumni in Azure - still working on that. In each case - the hosts sit behind a load balancer (in our case, F5 Big IP, though HA Proxy or basically any other load balancer should work. We're not doing anything crazy at the LB level). The load balancer is split in multiple locations, as are the application servers. This gives us resilience if a single site on-campus is down but does NOT give resilience against a full outage on-campus. This is one reason why we are looking to have as many services as possible authenticate directly against Azure instead of CAS. Using CAS to delegate authentication to Azure, we can: make this transition as streamlined as possible (and avoiding the need for people to have to login twice through two separate SSO systems) will let us make the transition of existing CAS apps to SAML on Azure (if they support SAML) gradual, so we don't have to change 30 services (involving both internal and external service providers) over a weekend. and will let us keep applications that only support CAS on CAS. centralize logins for almost all college systems in a single place making incident response, and troubleshooting, easier.","title":"Design"},{"location":"about/architecture/#limitations","text":"Any application still authenticating against CAS will still have CAS as a point of failure. You can reduce this by having CAS load balanced and in multiple sites (on-prem, off-site, in the cloud, etc.). Since Azure will see CAS as a single application, you are left to either: exclude CAS from Azure conditional access policies and use CAS to implement MFA include CAS from Azure conditional access policies but there are no 'exceptions' (i.e. that one service that really doesn't do anything sensitive or important and you don't want to turn MFA on for will still have it)","title":"Limitations:"},{"location":"about/architecture/#rationale","text":"Azure itself hasn't been the most reliable service at times. The total 'downtime' for Azure authentication has been far higher than our on-prem environment - but even so I have confidence in it. If it breaks - Microsoft folks will fix it - usually pretty quickly. On the other hand - I've learned over the year that CAS is complex. I can train people here on it - but if I'm unavailable or we have issues which others cannot solve - we have issues. If you're in a similar boat, you may want to do what we're doing. You may also want to look at other companies like Unicon who can provide technical support and assistance as a service for CAS and other open source products. We will have outages on-prem (or even in the cloud if we just run CAS and AD in the cloud). Over time - reliability will strongly favor a large service like Azure over what I personally can setup.","title":"Rationale"},{"location":"about/author-information/","text":"This documentation was created by: Paul Chauvet, CISSP Information Security Officer State University of New York at New Paltz chauvetp@newpaltz.edu Who am I? Well, I'm currently the Information Security Officer in Information Technology Services at SUNY New Paltz, where I've worked since 2003. Since 2019, I've also been teaching Cybersecurity as an adjunct in the Computer Science department here. I've been at New Paltz a long time... I graduated in 2001 with a B.S. in Computer Engineering, and went to work in NYC for a couple years before returning back to New Paltz as an employee in late 2003. While working at the college, I received my MBA in 2011. I've been working full time in Information Security at the college since 2014. Why am I still here? Well I love this school. It's been a fantastic place to work, I met the love of my life (my wife Diana) here, and I've made many friends over the years here. Just as importantly - I've had the opportunity to grow in my career here. When not at work - you may see me at one of the beautiful hiking areas in or around the Hudson Valley.","title":"About the author"},{"location":"about/future-tasks/","text":"Future tasks These are items which are not complete in this documentation. Some of this will be complete before I advertise this documentation (and are only here for my own notes). Others will be finished later. Items to be finished before announcing this documentation CAS UI customization/theming Azure Conditional Access Review documentation - especially code blocks - to ensure proper lexers are being used. Change ansible templates over to use ansible.builtin (e.g. ansible.builtin.template instead of template) Manually unpack war file - or fix it so it is automatically unpacked correctly Handling cas service cleanup (i.e. removing old services). Settle on where AJP documentation will go (leaning towards two places - tomcat setup for the server.xml portion, and CAS setup for httpd.conf setup) Incorporate better generation of keys within initial cas config page Items to be finished after announcing this docuemntation Make sure this works on a vanilla RHEL 8 system my VMs are typically built via Ansible triggering vCenter and a RedHat Kickstart. I will need to deploy a vanilla, unaltered VM that is just built from the ISO and with the public key of the Ansible server added to it, to see if I've missed any dependencies. Add better git documentation here Add full ansible playbooks for the roles used here (Apache Tomcat, Apache HTTPD, CAS, and CAS client) into a separate github project. Need to take some time to go through and ensure they are sanitized beforehand (we use an internal git repo here for our development and anything sensitive 'should' be in vault files, but just want to be certain). Link to them from the various areas.","title":"Future tasks"},{"location":"about/future-tasks/#future-tasks","text":"These are items which are not complete in this documentation. Some of this will be complete before I advertise this documentation (and are only here for my own notes). Others will be finished later.","title":"Future tasks"},{"location":"about/future-tasks/#items-to-be-finished-before-announcing-this-documentation","text":"CAS UI customization/theming Azure Conditional Access Review documentation - especially code blocks - to ensure proper lexers are being used. Change ansible templates over to use ansible.builtin (e.g. ansible.builtin.template instead of template) Manually unpack war file - or fix it so it is automatically unpacked correctly Handling cas service cleanup (i.e. removing old services). Settle on where AJP documentation will go (leaning towards two places - tomcat setup for the server.xml portion, and CAS setup for httpd.conf setup) Incorporate better generation of keys within initial cas config page","title":"Items to be finished before announcing this documentation"},{"location":"about/future-tasks/#items-to-be-finished-after-announcing-this-docuemntation","text":"Make sure this works on a vanilla RHEL 8 system my VMs are typically built via Ansible triggering vCenter and a RedHat Kickstart. I will need to deploy a vanilla, unaltered VM that is just built from the ISO and with the public key of the Ansible server added to it, to see if I've missed any dependencies. Add better git documentation here Add full ansible playbooks for the roles used here (Apache Tomcat, Apache HTTPD, CAS, and CAS client) into a separate github project. Need to take some time to go through and ensure they are sanitized beforehand (we use an internal git repo here for our development and anything sensitive 'should' be in vault files, but just want to be certain). Link to them from the various areas.","title":"Items to be finished after announcing this docuemntation"},{"location":"about/license/","text":"License This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License See (https://creativecommons.org/licenses/by-sa/4.0/) for more details.","title":"License"},{"location":"about/license/#license","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License See (https://creativecommons.org/licenses/by-sa/4.0/) for more details.","title":"License"},{"location":"active-directory/ad-attribute-release/","text":"Configuring AD attribute resolution and release To enable client applications to obtain information about authenticated users, the CAS server must be configured to resolve attributes and release them to the clients. Version 3 of the CAS protocol, which was first supported by CAS 4.0, contains native support for returning authentication/user attributes to clients. Version 2 of the CAS protocol, the version implemented by CAS 3.x, did not support attribute release; the SAML 1.1 protocol was used for that purpose. Most CAS clients have not yet been updated to support Version 3 of the protocol, so it\u2019s still necessary to configure SAML 1.1-based attribute release. Add the SAML 1.1 dependency To add SAML 1.1 support to the CAS server, edit the build.gradle file within the cas-overlay-template directory on your build host. We're going to add a single depency to the one we already added for the json service registry. See the highlighted line below for the addition. cas-overlay-template/build.gradle depe n de n cies { // O t her CAS depe n de n cies/modules may be lis te d here s tat ically... impleme ntat io n \"org.apereo.cas:cas-server-webapp-init:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-ldap:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-saml:${casServerVersion}\" } Configure attribute resolution Add the following settings to roles/cas6/templates/dev-cas.properties.j2 in the cas-overlay-template directory on your Ansible server, after the ones we added for active directory authentication earlier. As with there, we've set some of these as variables which will be updated with those we will store in our encrypted vault. You'll see both common attributes which are most likely in every AD (givenName, sn for surname, memberOf for groups), as well as schema extensions which you may or may not have like eduPerson, or even some that are specific to your school (for example, we have campusCode). You'll want to define both a bind user that can look at these attributes, as well as the attributes you will need to release. Note: just bacause you are giving CAS access to an attribute does not mean that a service will have access to it if you don't specify it. You can also 'rename' an attribute. For example, our AD has 'eduPersonTargetedID' but CAS is set to present this as 'UDC_IDENTIFIER' for Banner. # These are for attribute release cas.authn.attributeRepository.ldap[0].order=0 cas.authn.attributeRepository.ldap[0].ldapUrl=ldaps://{{ AD_SERVER_0 }} cas.authn.attributeRepository.ldap[0].validatePeriod=270 cas.authn.attributeRepository.ldap[0].searchFilter=cn={user} cas.authn.attributeRepository.ldap[0].baseDn={{ AD_BASE_DN_0 }} cas.authn.attributeRepository.ldap[0].bindDn={{ AD_BIND_USER_0 }} cas.authn.attributeRepository.ldap[0].bindCredential={{ AD_BIND_PASSWORD_0 }} cas.authn.attributeRepository.ldap[0].attributes.cn=cn cas.authn.attributeRepository.ldap[0].attributes.displayName=displayName cas.authn.attributeRepository.ldap[0].attributes.givenName=givenName cas.authn.attributeRepository.ldap[0].attributes.mail=mail cas.authn.attributeRepository.ldap[0].attributes.sn=sn cas.authn.attributeRepository.ldap[0].attributes.memberOf=memberOf cas.authn.attributeRepository.ldap[0].attributes.campusCode=campusCode cas.authn.attributeRepository.ldap[0].attributes.eduPersonPrimaryAffiliation=eduPersonPrimaryAffiliation cas.authn.attributeRepository.ldap[0].attributes.eduPersonPrincipalName=eduPersonPrincipalName cas.authn.attributeRepository.ldap[0].attributes.eduPersonTargetedID=UDC_IDENTIFIER cas.authn.attributeRepository.ldap[1].order=1 cas.authn.attributeRepository.ldap[1].ldapUrl=ldaps://{{ AD_SERVER_1 }} cas.authn.attributeRepository.ldap[1].validatePeriod=270 cas.authn.attributeRepository.ldap[1].searchFilter=cn={user} cas.authn.attributeRepository.ldap[1].baseDn={{ AD_BASE_DN_1 }} cas.authn.attributeRepository.ldap[1].bindDn={{ AD_BIND_USER_1 }} cas.authn.attributeRepository.ldap[1].bindCredential={{ AD_BIND_PASSWORD_1 }} cas.authn.attributeRepository.ldap[1].attributes.cn=cn cas.authn.attributeRepository.ldap[1].attributes.displayName=displayName cas.authn.attributeRepository.ldap[1].attributes.givenName=givenName cas.authn.attributeRepository.ldap[1].attributes.mail=mail cas.authn.attributeRepository.ldap[1].attributes.sn=sn cas.authn.attributeRepository.ldap[1].attributes.memberOf=memberOf cas.authn.attributeRepository.ldap[1].attributes.campusCode=campusCode cas.authn.attributeRepository.ldap[1].attributes.eduPersonPrimaryAffiliation=eduPersonPrimaryAffiliation cas.authn.attributeRepository.ldap[1].attributes.eduPersonPrincipalName=eduPersonPrincipalName cas.authn.attributeRepository.ldap[1].attributes.eduPersonTargetedID=UDC_IDENTIFIER Variable setup Edit your cas-vault.yml file within roles/cas6/vars/ Fill in values for {{ AD_BIND_USER_0 }} and {{ AD_BIND_PASSWORD_0 }} (and the same for _1, _2, etc. if you have them). It should now look like the following (after opening with ansible-vault edit) roles/cas6/vars/cas-vault.yml # As previously mentioned - these are not my real keys DEV_TGC_SIGNING_KEY : WEebZqgDjfKJei0XM-owdfueb3lZ3lyKKXAL8wLUoLfc2qTFWyBmYxVQBSLslau70uJH_gGM5teTqgbDD3Xcag DEV_TGC_ENCRYPTION_KEY : zyTzo8eMzToxP9_Kmk33iFVKVFMJD8873ZGA9Z_2Fco DEV_WEBFLOW_SIGNING_KEY : _mUEdBjyFlfbvKaGPnAtIbQ7sEkMO2A57lCu3OKz835NeNZqcOCsVo6WmCc95TMgdmahP-aP1lXBpqjd4rU2-g DEV_WEBFLOW_ENCRYPTION_KEY : JnGirTeE8yp3Jp/Mg9Z5Pg== # You will have to change these for your own environment AD_SERVER_0 : server.domain.edu AD_BASE_DN_0 : dc=subdomain,dc=domain,dc=edu AD_DN_FORMAT_0 : CN=%s,OU=active,DC=subdomain,DC=domain,DC=edu AD_BIND_USER_0 : CN=bindusername,CN=users,DC=subdomain,DC=domain,DC=edu AD_BIND_PASSWORD_0 : SomeStrongPasswordIAssume # If you have other servers or organizational units, you can list them here AD_SERVER_1 : other-server.domain.edu AD_BASE_DN_1 : dc=subdomain,dc=domain,dc=edu AD_DN_FORMAT_1 : CN=%s,OU=alumni,DC=subdomain,DC=domain,DC=edu AD_BIND_USER_1 : CN=bindusername,CN=users,DC=subdomain,DC=domain,DC=edu AD_BIND_PASSWORD_1 : SomeStrongPasswordIAssume Note Later - this guide will show you how to delegate authentication to Azure. If you do this - you can still do attribute resolution against your regular (non-Azure) AD. As of yet I haven't done any attribute resolution against Azure AD so I cannot speak to that. Attribute Merging The CAS 5 guide that this documentation is modeled after references Attribute Merging - where you would find attributes from a single user in multiple directories. I don't have any experience in doing this - as our users are in either location, not both. You may want to see David Curry's discussion on this in the References below if you need to use attribute merging. References Deploying Apereo CAS 5: Configure an attribute merging strategy eduPerson Object Class Specification CAS 6: Authentication Attributes CAS 6: Attribute Merging Strategies","title":"AD attribute release"},{"location":"active-directory/ad-attribute-release/#configuring-ad-attribute-resolution-and-release","text":"To enable client applications to obtain information about authenticated users, the CAS server must be configured to resolve attributes and release them to the clients. Version 3 of the CAS protocol, which was first supported by CAS 4.0, contains native support for returning authentication/user attributes to clients. Version 2 of the CAS protocol, the version implemented by CAS 3.x, did not support attribute release; the SAML 1.1 protocol was used for that purpose. Most CAS clients have not yet been updated to support Version 3 of the protocol, so it\u2019s still necessary to configure SAML 1.1-based attribute release.","title":"Configuring AD attribute resolution and release"},{"location":"active-directory/ad-attribute-release/#add-the-saml-11-dependency","text":"To add SAML 1.1 support to the CAS server, edit the build.gradle file within the cas-overlay-template directory on your build host. We're going to add a single depency to the one we already added for the json service registry. See the highlighted line below for the addition. cas-overlay-template/build.gradle depe n de n cies { // O t her CAS depe n de n cies/modules may be lis te d here s tat ically... impleme ntat io n \"org.apereo.cas:cas-server-webapp-init:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-ldap:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-saml:${casServerVersion}\" }","title":"Add the SAML 1.1 dependency"},{"location":"active-directory/ad-attribute-release/#configure-attribute-resolution","text":"Add the following settings to roles/cas6/templates/dev-cas.properties.j2 in the cas-overlay-template directory on your Ansible server, after the ones we added for active directory authentication earlier. As with there, we've set some of these as variables which will be updated with those we will store in our encrypted vault. You'll see both common attributes which are most likely in every AD (givenName, sn for surname, memberOf for groups), as well as schema extensions which you may or may not have like eduPerson, or even some that are specific to your school (for example, we have campusCode). You'll want to define both a bind user that can look at these attributes, as well as the attributes you will need to release. Note: just bacause you are giving CAS access to an attribute does not mean that a service will have access to it if you don't specify it. You can also 'rename' an attribute. For example, our AD has 'eduPersonTargetedID' but CAS is set to present this as 'UDC_IDENTIFIER' for Banner. # These are for attribute release cas.authn.attributeRepository.ldap[0].order=0 cas.authn.attributeRepository.ldap[0].ldapUrl=ldaps://{{ AD_SERVER_0 }} cas.authn.attributeRepository.ldap[0].validatePeriod=270 cas.authn.attributeRepository.ldap[0].searchFilter=cn={user} cas.authn.attributeRepository.ldap[0].baseDn={{ AD_BASE_DN_0 }} cas.authn.attributeRepository.ldap[0].bindDn={{ AD_BIND_USER_0 }} cas.authn.attributeRepository.ldap[0].bindCredential={{ AD_BIND_PASSWORD_0 }} cas.authn.attributeRepository.ldap[0].attributes.cn=cn cas.authn.attributeRepository.ldap[0].attributes.displayName=displayName cas.authn.attributeRepository.ldap[0].attributes.givenName=givenName cas.authn.attributeRepository.ldap[0].attributes.mail=mail cas.authn.attributeRepository.ldap[0].attributes.sn=sn cas.authn.attributeRepository.ldap[0].attributes.memberOf=memberOf cas.authn.attributeRepository.ldap[0].attributes.campusCode=campusCode cas.authn.attributeRepository.ldap[0].attributes.eduPersonPrimaryAffiliation=eduPersonPrimaryAffiliation cas.authn.attributeRepository.ldap[0].attributes.eduPersonPrincipalName=eduPersonPrincipalName cas.authn.attributeRepository.ldap[0].attributes.eduPersonTargetedID=UDC_IDENTIFIER cas.authn.attributeRepository.ldap[1].order=1 cas.authn.attributeRepository.ldap[1].ldapUrl=ldaps://{{ AD_SERVER_1 }} cas.authn.attributeRepository.ldap[1].validatePeriod=270 cas.authn.attributeRepository.ldap[1].searchFilter=cn={user} cas.authn.attributeRepository.ldap[1].baseDn={{ AD_BASE_DN_1 }} cas.authn.attributeRepository.ldap[1].bindDn={{ AD_BIND_USER_1 }} cas.authn.attributeRepository.ldap[1].bindCredential={{ AD_BIND_PASSWORD_1 }} cas.authn.attributeRepository.ldap[1].attributes.cn=cn cas.authn.attributeRepository.ldap[1].attributes.displayName=displayName cas.authn.attributeRepository.ldap[1].attributes.givenName=givenName cas.authn.attributeRepository.ldap[1].attributes.mail=mail cas.authn.attributeRepository.ldap[1].attributes.sn=sn cas.authn.attributeRepository.ldap[1].attributes.memberOf=memberOf cas.authn.attributeRepository.ldap[1].attributes.campusCode=campusCode cas.authn.attributeRepository.ldap[1].attributes.eduPersonPrimaryAffiliation=eduPersonPrimaryAffiliation cas.authn.attributeRepository.ldap[1].attributes.eduPersonPrincipalName=eduPersonPrincipalName cas.authn.attributeRepository.ldap[1].attributes.eduPersonTargetedID=UDC_IDENTIFIER","title":"Configure attribute resolution"},{"location":"active-directory/ad-attribute-release/#variable-setup","text":"Edit your cas-vault.yml file within roles/cas6/vars/ Fill in values for {{ AD_BIND_USER_0 }} and {{ AD_BIND_PASSWORD_0 }} (and the same for _1, _2, etc. if you have them). It should now look like the following (after opening with ansible-vault edit) roles/cas6/vars/cas-vault.yml # As previously mentioned - these are not my real keys DEV_TGC_SIGNING_KEY : WEebZqgDjfKJei0XM-owdfueb3lZ3lyKKXAL8wLUoLfc2qTFWyBmYxVQBSLslau70uJH_gGM5teTqgbDD3Xcag DEV_TGC_ENCRYPTION_KEY : zyTzo8eMzToxP9_Kmk33iFVKVFMJD8873ZGA9Z_2Fco DEV_WEBFLOW_SIGNING_KEY : _mUEdBjyFlfbvKaGPnAtIbQ7sEkMO2A57lCu3OKz835NeNZqcOCsVo6WmCc95TMgdmahP-aP1lXBpqjd4rU2-g DEV_WEBFLOW_ENCRYPTION_KEY : JnGirTeE8yp3Jp/Mg9Z5Pg== # You will have to change these for your own environment AD_SERVER_0 : server.domain.edu AD_BASE_DN_0 : dc=subdomain,dc=domain,dc=edu AD_DN_FORMAT_0 : CN=%s,OU=active,DC=subdomain,DC=domain,DC=edu AD_BIND_USER_0 : CN=bindusername,CN=users,DC=subdomain,DC=domain,DC=edu AD_BIND_PASSWORD_0 : SomeStrongPasswordIAssume # If you have other servers or organizational units, you can list them here AD_SERVER_1 : other-server.domain.edu AD_BASE_DN_1 : dc=subdomain,dc=domain,dc=edu AD_DN_FORMAT_1 : CN=%s,OU=alumni,DC=subdomain,DC=domain,DC=edu AD_BIND_USER_1 : CN=bindusername,CN=users,DC=subdomain,DC=domain,DC=edu AD_BIND_PASSWORD_1 : SomeStrongPasswordIAssume Note Later - this guide will show you how to delegate authentication to Azure. If you do this - you can still do attribute resolution against your regular (non-Azure) AD. As of yet I haven't done any attribute resolution against Azure AD so I cannot speak to that.","title":"Variable setup"},{"location":"active-directory/ad-attribute-release/#attribute-merging","text":"The CAS 5 guide that this documentation is modeled after references Attribute Merging - where you would find attributes from a single user in multiple directories. I don't have any experience in doing this - as our users are in either location, not both. You may want to see David Curry's discussion on this in the References below if you need to use attribute merging.","title":"Attribute Merging"},{"location":"active-directory/ad-attribute-release/#references","text":"Deploying Apereo CAS 5: Configure an attribute merging strategy eduPerson Object Class Specification CAS 6: Authentication Attributes CAS 6: Attribute Merging Strategies","title":"References"},{"location":"active-directory/configure-ldap-auth/","text":"Configuring LDAP Authentication Add the LDAP dependency To add LDAP support to the CAS server, edit the build.gradle file within the cas-overlay-template directory on your build host. We're going to add a single depency to the one we already added for the json service registry. See the highlighted line below for the addition. depe n de n cies { // O t her CAS depe n de n cies/modules may be lis te d here... // impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-webapp-init:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-ldap:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" } Disable static credentials You'll want to also remove the static test user you have specified in cas.properties. In Ansible, this is in roles/cas6/templates/dev-cas-properties.j2 # Default handler - enable only for testing # leave blank (not commented out) to disable cas.authn.accept.users= Rebuild CAS To rebuild CAS with the newest dependency built in we'll do the same thing we did when adding the json service registry. You'll want to go to the cas-overlay-template directory and run the following and wait a moment for it to be complete: ./gradlew clean build Your cas.war file will have been updated. Copy it from cas-overlay-template/build/libs/cas.war to your roles/cas6/files Configure Active Directory/LDAP properties Although CAS offers several dozen properties for controlling how LDAP authentication is performed, most of them come with reasonable defaults and do not have to be configured in normal circumstances. The complete list of properties can be found in the CAS documentation. Add the following settings to roles/cas6/templates/dev-cas.properties.j2 in the cas-overlay-template directory on your Ansible server. The [0] in the property names indicates that this is the first LDAP source to be configured. Additional sources will be [1], [2], etc. # These are the LDAP server setups # If you have more than one organizational unit - you can list a second one here with cas.authn.ldap[1].attributes after the first, just cas.authn.ldap[1].order to 1 instead of 0 but it may not be necessary in your environment. I've included them for example's sake. cas.authn.ldap[0].order: 0 cas.authn.ldap[0].name: Active Directory cas.authn.ldap[0].type: AD cas.authn.ldap[0].ldapUrl: ldaps://{{ AD_SERVER_0 }} cas.authn.ldap[0].validatePeriod: 270 cas.authn.ldap[0].poolPassivator: NONE cas.authn.ldap[0].searchFilter: sAMAccountName={user} cas.authn.ldap[0].baseDn: {{ AD_BASE_DN_0 }} cas.authn.ldap[0].dnFormat: {{ AD_DN_FORMAT_0 }} cas.authn.ldap[1].order: 1 cas.authn.ldap[1].name: Active Directory cas.authn.ldap[1].type: AD cas.authn.ldap[1].ldapUrl: ldaps://{{ AD_SERVER_1 }} cas.authn.ldap[1].validatePeriod: 270 cas.authn.ldap[1].poolPassivator: NONE cas.authn.ldap[1].searchFilter: sAMAccountName={user} cas.authn.ldap[1].baseDn: {{ AD_BASE_DN_1 }} cas.authn.ldap[1].dnFormat: {{ AD_DN_FORMAT_1 }} Overview of properties Property Description order When multiple authentication sources are configured, the CAS server looks for the user in one source after another until the user is found, and then the authentication is performed against that source (where it either succeeds or fails). This property influences the order in which the source is evaluated (if not specified, sources are evaluated in the order they are defined). name The name of the source. This is used when writing log file messages. type The type of authenticator to use. This should be AD for Active Directory. ldapUrl The URL of the Active Directory server. In our case, we use the URL of a virtual host on the F5 load balancer, which has multiple Active Directory domain controllers behind it. validatePeriod The LDAP module periodically validates the connections in its connection pool. But the default setting for how often to do this (600 seconds) is longer than the idle timeout on the F5 load balancer that fronts the LDAP servers (300 seconds), which results in lots of warning messages being written to the CAS log file (one per connection every ten minutes). Reducing the validation period to something shorter than the load balancer idle timeout eliminates these messages. poolPassivator Passivators help manage LDAP connection pools. However, the default value for this property, BIND, does not work with the AD authenticator type, because there is no bind credential to use (the authenticator binds as the user being authenticated). Therefore, tihs setting is needed to disable the passivator. searchFilter The LDAP filter to select the user from the directory. Active Directory typically searches on the sAMAccountName attribute. The {user} pattern will be replaced with the username string entered by the user. baseDn The base DN to search against when retrieving attributes. The \u201cusual\u201d value for this is more like ou=Users,dc=example,dc=org, but for historical reasons we keep our users in a different OU. dnFormat A format string to generate the user DN to be authenticated. In the string, %s will be replaced with the username entered on the login form. The \u201cusual\u201d value of this string is something more like uid=%s,ou=Users,dc=example,dc=org, but we do not use the uid attribute in our Active Directory schema, we use cn instead. Fill in variables You'll want to edit your cas-vault.yml file ( ansible-vault edit cas-vault.yml ) - since we're going to want to save some sensitive variables. When done - it will look something like: # As previously mentioned - these are not my real keys DEV_TGC_SIGNING_KEY : WEebZqgDjfKJei0XM-owdfueb3lZ3lyKKXAL8wLUoLfc2qTFWyBmYxVQBSLslau70uJH_gGM5teTqgbDD3Xcag DEV_TGC_ENCRYPTION_KEY : zyTzo8eMzToxP9_Kmk33iFVKVFMJD8873ZGA9Z_2Fco DEV_WEBFLOW_SIGNING_KEY : _mUEdBjyFlfbvKaGPnAtIbQ7sEkMO2A57lCu3OKz835NeNZqcOCsVo6WmCc95TMgdmahP-aP1lXBpqjd4rU2-g DEV_WEBFLOW_ENCRYPTION_KEY : JnGirTeE8yp3Jp/Mg9Z5Pg== # You will have to change these for your own environment AD_SERVER_0 : server.domain.edu AD_BASE_DN_0 : dc=subdomain,dc=domain,dc=edu AD_DN_FORMAT_0 : CN=%s,OU=active,DC=subdomain,DC=domain,DC=edu # If you have other servers or organizational units, you can list them here AD_SERVER_1 : other-server.domain.edu AD_BASE_DN_1 : dc=subdomain,dc=domain,dc=edu AD_DN_FORMAT_1 : CN=%s,OU=alumni,DC=subdomain,DC=domain,DC=edu ~ Rerun the playbook [ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit <your_CAS_server> Vault password : As with before - once we rerun this playbook - it will only alter that which we changed, namely the cas.war file, the cas.properties file, and it will restart Tomcat. Test logins You'll want to go to your CAS client page and test logging in with an Active Directory user. References CAS 6: LDAP Authentication CAS 6: Configuration Properties","title":"AD authentication"},{"location":"active-directory/configure-ldap-auth/#configuring-ldap-authentication","text":"","title":"Configuring LDAP Authentication"},{"location":"active-directory/configure-ldap-auth/#add-the-ldap-dependency","text":"To add LDAP support to the CAS server, edit the build.gradle file within the cas-overlay-template directory on your build host. We're going to add a single depency to the one we already added for the json service registry. See the highlighted line below for the addition. depe n de n cies { // O t her CAS depe n de n cies/modules may be lis te d here... // impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-webapp-init:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-ldap:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" }","title":"Add the LDAP dependency"},{"location":"active-directory/configure-ldap-auth/#disable-static-credentials","text":"You'll want to also remove the static test user you have specified in cas.properties. In Ansible, this is in roles/cas6/templates/dev-cas-properties.j2 # Default handler - enable only for testing # leave blank (not commented out) to disable cas.authn.accept.users=","title":"Disable static credentials"},{"location":"active-directory/configure-ldap-auth/#rebuild-cas","text":"To rebuild CAS with the newest dependency built in we'll do the same thing we did when adding the json service registry. You'll want to go to the cas-overlay-template directory and run the following and wait a moment for it to be complete: ./gradlew clean build Your cas.war file will have been updated. Copy it from cas-overlay-template/build/libs/cas.war to your roles/cas6/files","title":"Rebuild CAS"},{"location":"active-directory/configure-ldap-auth/#configure-active-directoryldap-properties","text":"Although CAS offers several dozen properties for controlling how LDAP authentication is performed, most of them come with reasonable defaults and do not have to be configured in normal circumstances. The complete list of properties can be found in the CAS documentation. Add the following settings to roles/cas6/templates/dev-cas.properties.j2 in the cas-overlay-template directory on your Ansible server. The [0] in the property names indicates that this is the first LDAP source to be configured. Additional sources will be [1], [2], etc. # These are the LDAP server setups # If you have more than one organizational unit - you can list a second one here with cas.authn.ldap[1].attributes after the first, just cas.authn.ldap[1].order to 1 instead of 0 but it may not be necessary in your environment. I've included them for example's sake. cas.authn.ldap[0].order: 0 cas.authn.ldap[0].name: Active Directory cas.authn.ldap[0].type: AD cas.authn.ldap[0].ldapUrl: ldaps://{{ AD_SERVER_0 }} cas.authn.ldap[0].validatePeriod: 270 cas.authn.ldap[0].poolPassivator: NONE cas.authn.ldap[0].searchFilter: sAMAccountName={user} cas.authn.ldap[0].baseDn: {{ AD_BASE_DN_0 }} cas.authn.ldap[0].dnFormat: {{ AD_DN_FORMAT_0 }} cas.authn.ldap[1].order: 1 cas.authn.ldap[1].name: Active Directory cas.authn.ldap[1].type: AD cas.authn.ldap[1].ldapUrl: ldaps://{{ AD_SERVER_1 }} cas.authn.ldap[1].validatePeriod: 270 cas.authn.ldap[1].poolPassivator: NONE cas.authn.ldap[1].searchFilter: sAMAccountName={user} cas.authn.ldap[1].baseDn: {{ AD_BASE_DN_1 }} cas.authn.ldap[1].dnFormat: {{ AD_DN_FORMAT_1 }}","title":"Configure Active Directory/LDAP properties"},{"location":"active-directory/configure-ldap-auth/#overview-of-properties","text":"Property Description order When multiple authentication sources are configured, the CAS server looks for the user in one source after another until the user is found, and then the authentication is performed against that source (where it either succeeds or fails). This property influences the order in which the source is evaluated (if not specified, sources are evaluated in the order they are defined). name The name of the source. This is used when writing log file messages. type The type of authenticator to use. This should be AD for Active Directory. ldapUrl The URL of the Active Directory server. In our case, we use the URL of a virtual host on the F5 load balancer, which has multiple Active Directory domain controllers behind it. validatePeriod The LDAP module periodically validates the connections in its connection pool. But the default setting for how often to do this (600 seconds) is longer than the idle timeout on the F5 load balancer that fronts the LDAP servers (300 seconds), which results in lots of warning messages being written to the CAS log file (one per connection every ten minutes). Reducing the validation period to something shorter than the load balancer idle timeout eliminates these messages. poolPassivator Passivators help manage LDAP connection pools. However, the default value for this property, BIND, does not work with the AD authenticator type, because there is no bind credential to use (the authenticator binds as the user being authenticated). Therefore, tihs setting is needed to disable the passivator. searchFilter The LDAP filter to select the user from the directory. Active Directory typically searches on the sAMAccountName attribute. The {user} pattern will be replaced with the username string entered by the user. baseDn The base DN to search against when retrieving attributes. The \u201cusual\u201d value for this is more like ou=Users,dc=example,dc=org, but for historical reasons we keep our users in a different OU. dnFormat A format string to generate the user DN to be authenticated. In the string, %s will be replaced with the username entered on the login form. The \u201cusual\u201d value of this string is something more like uid=%s,ou=Users,dc=example,dc=org, but we do not use the uid attribute in our Active Directory schema, we use cn instead.","title":"Overview of properties"},{"location":"active-directory/configure-ldap-auth/#fill-in-variables","text":"You'll want to edit your cas-vault.yml file ( ansible-vault edit cas-vault.yml ) - since we're going to want to save some sensitive variables. When done - it will look something like: # As previously mentioned - these are not my real keys DEV_TGC_SIGNING_KEY : WEebZqgDjfKJei0XM-owdfueb3lZ3lyKKXAL8wLUoLfc2qTFWyBmYxVQBSLslau70uJH_gGM5teTqgbDD3Xcag DEV_TGC_ENCRYPTION_KEY : zyTzo8eMzToxP9_Kmk33iFVKVFMJD8873ZGA9Z_2Fco DEV_WEBFLOW_SIGNING_KEY : _mUEdBjyFlfbvKaGPnAtIbQ7sEkMO2A57lCu3OKz835NeNZqcOCsVo6WmCc95TMgdmahP-aP1lXBpqjd4rU2-g DEV_WEBFLOW_ENCRYPTION_KEY : JnGirTeE8yp3Jp/Mg9Z5Pg== # You will have to change these for your own environment AD_SERVER_0 : server.domain.edu AD_BASE_DN_0 : dc=subdomain,dc=domain,dc=edu AD_DN_FORMAT_0 : CN=%s,OU=active,DC=subdomain,DC=domain,DC=edu # If you have other servers or organizational units, you can list them here AD_SERVER_1 : other-server.domain.edu AD_BASE_DN_1 : dc=subdomain,dc=domain,dc=edu AD_DN_FORMAT_1 : CN=%s,OU=alumni,DC=subdomain,DC=domain,DC=edu ~","title":"Fill in variables"},{"location":"active-directory/configure-ldap-auth/#rerun-the-playbook","text":"[ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit <your_CAS_server> Vault password : As with before - once we rerun this playbook - it will only alter that which we changed, namely the cas.war file, the cas.properties file, and it will restart Tomcat.","title":"Rerun the playbook"},{"location":"active-directory/configure-ldap-auth/#test-logins","text":"You'll want to go to your CAS client page and test logging in with an Active Directory user.","title":"Test logins"},{"location":"active-directory/configure-ldap-auth/#references","text":"CAS 6: LDAP Authentication CAS 6: Configuration Properties","title":"References"},{"location":"active-directory/overview/","text":"Adding Active Directory support If you've gotten this far - you were probably able to login to your CAS server using the static credentials ( cas.authn.accept.users ). That's really only useful for testing. If you're like most - you're going to want to authenticate against a local and/or cloud identity repository. To start with - we're going to do LDAP (we'll do delegated auth to Azure later). These instructions provided here work with Microsoft Active Directory in our environment, but I cannot guarantee how different or similar they will be for other LDAP deployments. In this section, we will add LDAP support to the CAS server to enable it to do three things: Authentication. Prompt the user for their username and password, and validate that the provided password is indeed correct. At this stage, the user account is also checked to ensure that it is not disabled or expired. At the conclusion of the authentication process, the CAS server will have identified a security principal. A CAS principal contains a unique identifier by which the authenticated user will be known to all requesting services. A principal also contains optional attributes that may be released to services to support authorization and personalization. Attribute resolution. Specific attributes about the principal are collected from one or more sources and combined into a single set of attributes using any of several different combining strategies (merging, replacing, adding, etc.). Attribute release. The process of defining how attributes are selected and provided to a given application in the final CAS response. References CAS 6: Configuring Authentication Components CAS 6: Configuring Principal Resolution CAS 6: Attribute Resolution CAS 6: Attribute Release","title":"Overview"},{"location":"active-directory/overview/#adding-active-directory-support","text":"If you've gotten this far - you were probably able to login to your CAS server using the static credentials ( cas.authn.accept.users ). That's really only useful for testing. If you're like most - you're going to want to authenticate against a local and/or cloud identity repository. To start with - we're going to do LDAP (we'll do delegated auth to Azure later). These instructions provided here work with Microsoft Active Directory in our environment, but I cannot guarantee how different or similar they will be for other LDAP deployments. In this section, we will add LDAP support to the CAS server to enable it to do three things: Authentication. Prompt the user for their username and password, and validate that the provided password is indeed correct. At this stage, the user account is also checked to ensure that it is not disabled or expired. At the conclusion of the authentication process, the CAS server will have identified a security principal. A CAS principal contains a unique identifier by which the authenticated user will be known to all requesting services. A principal also contains optional attributes that may be released to services to support authorization and personalization. Attribute resolution. Specific attributes about the principal are collected from one or more sources and combined into a single set of attributes using any of several different combining strategies (merging, replacing, adding, etc.). Attribute release. The process of defining how attributes are selected and provided to a given application in the final CAS response.","title":"Adding Active Directory support"},{"location":"active-directory/overview/#references","text":"CAS 6: Configuring Authentication Components CAS 6: Configuring Principal Resolution CAS 6: Attribute Resolution CAS 6: Attribute Release","title":"References"},{"location":"active-directory/test-cas-client/","text":"Test CAS client and attribute release You'll want to go to your CAS test client page - and check the result of the return all attributes and return mapped attributes pages. The two images below show the output of these two pages in my dev environment with a test user. Return mapped attributes","title":"Test CAS client"},{"location":"active-directory/test-cas-client/#test-cas-client-and-attribute-release","text":"You'll want to go to your CAS test client page - and check the result of the return all attributes and return mapped attributes pages. The two images below show the output of these two pages in my dev environment with a test user.","title":"Test CAS client and attribute release"},{"location":"active-directory/test-cas-client/#return-mapped-attributes","text":"","title":"Return mapped attributes"},{"location":"active-directory/update-cas-client/","text":"Update the CAS client We've made the CAS server side changes (though not deployed them yet) but we need to change the CAS client side, both the Apache config, and the php pages. Update mod_auth_cas settings Edit the def-cas-client.conf.j2 file in roles/cas-client/templates/ . Create a second directory configuration for our return-all service, and a third for our return-mapped service. Within each of them - you'll want to set CASAuthNHeader to On . Change the CASValidateUrl to have samlValidate at the end instead of serviceValidate Set CASValidateSAML to On as well. This tells mod_auth_cas to use SAML 1.1 to retrieve user attributes and store them as HTTP headers. When done it will look like this: roles/cas-client/templates/dev-cas-client.conf.j2 LoadModule auth_cas_module modules/mod_auth_cas.so # this is our basic config from earlier <Directory \"/var/www/html/secured-by-cas\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> # Return all attribute directory <Directory \"/var/www/html/return-all\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> # Return mapped attributes directory <Directory \"/var/www/html/return-mapped\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> <IfModule mod_auth_cas.c > CASLoginUrl https://{{ CAS_DEV_URL }}/cas/login CASValidateUrl https://{{ CAS_DEV_URL }}/cas/samlValidate CASCookiePath /var/cache/httpd/mod_auth_cas/ CASSSOEnabled On CASValidateSAML On CASAttributePreffix CAS- CASDebug Off CASCertificatePath /etc/pki/tls/certs/np-ca.crt </IfModule> Update the PHP page templates Edit the existing main-index file: roles/cas-client/templates/main-index.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS client test page </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > CAS client test page </ h1 > < p >< big > Click < a href = \"secured-by-cas/index.php\" > here </ a > for our basic test. </ big ></ p > < p >< big > Click < a href = \"return-all/index.php\" > here </ a > for our 'return all attributes' test. </ big ></ p > < p >< big > Click < a href = \"return-mapped/index.php\" > here </ a > for our 'return mapped attributes' test. </ big ></ p > </ div > </ body > </ html > Create a new 'return-all.php' index file This can be identical to the previously created basic-cas-check-index.php file - you can just update the title page and/or text. roles/cas-client/templates/return-all.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS Return All Attributes test page </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > Return All Attributes </ h1 > < p >< big > Return All Attributes. </ big ></ p > < h2 > Attributes Returned by CAS </ h2 > <?php echo \"<pre>\"; if (array_key_exists('REMOTE_USER', $_SERVER)) { echo \"REMOTE_USER = \" . $_SERVER['REMOTE_USER'] . \"<br>\"; } $headers = getallheaders(); foreach ($headers as $key => $value) { if (strpos($key, 'Cas-') === 0) { echo substr($key, 4) . \" = \" . $value . \"<br>\"; } } echo \"</pre>\"; ?> </ div > </ body > </ html > Create a new 'return-mapped.php' index file Just like the last - this is the same except the title/text roles/cas-client/templates/return-all.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS Return Mapped Attributes test page </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > Return Mapped Attributes </ h1 > < p >< big > Return Mapped Attributes. </ big ></ p > < h2 > Attributes Returned by CAS </ h2 > <?php echo \"<pre>\"; if (array_key_exists('REMOTE_USER', $_SERVER)) { echo \"REMOTE_USER = \" . $_SERVER['REMOTE_USER'] . \"<br>\"; } $headers = getallheaders(); foreach ($headers as $key => $value) { if (strpos($key, 'Cas-') === 0) { echo substr($key, 4) . \" = \" . $value . \"<br>\"; } } echo \"</pre>\"; ?> </ div > </ body > </ html > Update the CAS client Ansible role Edit the setup-test-pages.yml file in roles/cas-client/tasks to ensure the directories are created and the new files are copied over. The newly added content is highlighted. roles/cas-client/tasks/setup-test-pages.yml: --- - name : Setup CAS test index page ansible.builtin.template : src : main-index.php dest : /var/www/html/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure secured-by-cas directory exists ansible.builtin.file : path : /var/www/html/secured-by-cas state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup basic 'secured-by-cas' test index page ansible.builtin.template : src : basic-cas-check-index.php dest : /var/www/html/secured-by-cas/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure return-all directory exists ansible.builtin.file : path : /var/www/html/return-all state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup return-all index page ansible.builtin.template : src : return-all-index.php dest : /var/www/html/return-all/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure return-mapped directory exists ansible.builtin.file : path : /var/www/html/return-mapped state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup return-mapped index page ansible.builtin.template : src : return-mapped-index.php dest : /var/www/html/return-mapped/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) Rerun the playbook [ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit <your_CAS_server> Vault password : Test Caution Make sure when you go to the individual test page - you see the correct service name in the CAS login page. If you still see \"HTTPS Wildcard\" you may have an error in your service files which is causing the wildcard one to be the first one seen.","title":"Update CAS client"},{"location":"active-directory/update-cas-client/#update-the-cas-client","text":"We've made the CAS server side changes (though not deployed them yet) but we need to change the CAS client side, both the Apache config, and the php pages.","title":"Update the CAS client"},{"location":"active-directory/update-cas-client/#update-mod_auth_cas-settings","text":"Edit the def-cas-client.conf.j2 file in roles/cas-client/templates/ . Create a second directory configuration for our return-all service, and a third for our return-mapped service. Within each of them - you'll want to set CASAuthNHeader to On . Change the CASValidateUrl to have samlValidate at the end instead of serviceValidate Set CASValidateSAML to On as well. This tells mod_auth_cas to use SAML 1.1 to retrieve user attributes and store them as HTTP headers. When done it will look like this: roles/cas-client/templates/dev-cas-client.conf.j2 LoadModule auth_cas_module modules/mod_auth_cas.so # this is our basic config from earlier <Directory \"/var/www/html/secured-by-cas\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> # Return all attribute directory <Directory \"/var/www/html/return-all\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> # Return mapped attributes directory <Directory \"/var/www/html/return-mapped\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> <IfModule mod_auth_cas.c > CASLoginUrl https://{{ CAS_DEV_URL }}/cas/login CASValidateUrl https://{{ CAS_DEV_URL }}/cas/samlValidate CASCookiePath /var/cache/httpd/mod_auth_cas/ CASSSOEnabled On CASValidateSAML On CASAttributePreffix CAS- CASDebug Off CASCertificatePath /etc/pki/tls/certs/np-ca.crt </IfModule>","title":"Update mod_auth_cas settings"},{"location":"active-directory/update-cas-client/#update-the-php-page-templates","text":"","title":"Update the PHP page templates"},{"location":"active-directory/update-cas-client/#edit-the-existing-main-index-file","text":"roles/cas-client/templates/main-index.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS client test page </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > CAS client test page </ h1 > < p >< big > Click < a href = \"secured-by-cas/index.php\" > here </ a > for our basic test. </ big ></ p > < p >< big > Click < a href = \"return-all/index.php\" > here </ a > for our 'return all attributes' test. </ big ></ p > < p >< big > Click < a href = \"return-mapped/index.php\" > here </ a > for our 'return mapped attributes' test. </ big ></ p > </ div > </ body > </ html >","title":"Edit the existing main-index file:"},{"location":"active-directory/update-cas-client/#create-a-new-return-allphp-index-file","text":"This can be identical to the previously created basic-cas-check-index.php file - you can just update the title page and/or text. roles/cas-client/templates/return-all.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS Return All Attributes test page </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > Return All Attributes </ h1 > < p >< big > Return All Attributes. </ big ></ p > < h2 > Attributes Returned by CAS </ h2 > <?php echo \"<pre>\"; if (array_key_exists('REMOTE_USER', $_SERVER)) { echo \"REMOTE_USER = \" . $_SERVER['REMOTE_USER'] . \"<br>\"; } $headers = getallheaders(); foreach ($headers as $key => $value) { if (strpos($key, 'Cas-') === 0) { echo substr($key, 4) . \" = \" . $value . \"<br>\"; } } echo \"</pre>\"; ?> </ div > </ body > </ html >","title":"Create a new 'return-all.php' index file"},{"location":"active-directory/update-cas-client/#create-a-new-return-mappedphp-index-file","text":"Just like the last - this is the same except the title/text roles/cas-client/templates/return-all.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS Return Mapped Attributes test page </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > Return Mapped Attributes </ h1 > < p >< big > Return Mapped Attributes. </ big ></ p > < h2 > Attributes Returned by CAS </ h2 > <?php echo \"<pre>\"; if (array_key_exists('REMOTE_USER', $_SERVER)) { echo \"REMOTE_USER = \" . $_SERVER['REMOTE_USER'] . \"<br>\"; } $headers = getallheaders(); foreach ($headers as $key => $value) { if (strpos($key, 'Cas-') === 0) { echo substr($key, 4) . \" = \" . $value . \"<br>\"; } } echo \"</pre>\"; ?> </ div > </ body > </ html >","title":"Create a new 'return-mapped.php' index file"},{"location":"active-directory/update-cas-client/#update-the-cas-client-ansible-role","text":"Edit the setup-test-pages.yml file in roles/cas-client/tasks to ensure the directories are created and the new files are copied over. The newly added content is highlighted. roles/cas-client/tasks/setup-test-pages.yml: --- - name : Setup CAS test index page ansible.builtin.template : src : main-index.php dest : /var/www/html/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure secured-by-cas directory exists ansible.builtin.file : path : /var/www/html/secured-by-cas state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup basic 'secured-by-cas' test index page ansible.builtin.template : src : basic-cas-check-index.php dest : /var/www/html/secured-by-cas/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure return-all directory exists ansible.builtin.file : path : /var/www/html/return-all state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup return-all index page ansible.builtin.template : src : return-all-index.php dest : /var/www/html/return-all/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure return-mapped directory exists ansible.builtin.file : path : /var/www/html/return-mapped state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup return-mapped index page ansible.builtin.template : src : return-mapped-index.php dest : /var/www/html/return-mapped/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname)","title":"Update the CAS client Ansible role"},{"location":"active-directory/update-cas-client/#rerun-the-playbook","text":"[ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit <your_CAS_server> Vault password :","title":"Rerun the playbook"},{"location":"active-directory/update-cas-client/#test","text":"Caution Make sure when you go to the individual test page - you see the correct service name in the CAS login page. If you still see \"HTTPS Wildcard\" you may have an error in your service files which is causing the wildcard one to be the first one seen.","title":"Test"},{"location":"active-directory/update-service-registry/","text":"Update the service registry for attribute release Attribute release policies are defined on a per-service basis in the service registry. There are four basic attribute release policies: Policy Description Return All Return all resolved attributes to the service. Deny All Do not return any attributes to the service. This will also prevent the release of the default attribute pool. Return Allowed Only return the attributes specifically allowed by the policy. This policy includes a list of the attributes to release. Return Mapped Only return the attributes specifically allowed by the policy, but also allow them to be renamed at the individual service level. Useful when a particular service insists on having specific attribute names not used by other services. The syntax for defining the above policies is defined in the CAS 6 Attribute Release Policies documentation. That document also describes a number of script-based policies that will call a Groovy, JavaScript, or Python script to decide how to release attributes (these policies are beyond the scope of this document). I've only used \"Return All\" for testing purposes like we're doing here. I typically use ReturnAllowedAttributeReleasePolicy but have used ReturnMappedAttributePolicy as well a few times. I've never had a reason (yet) to use Deny All. Since I don't use a 'default' attribute release policy (mentioned below) I haven't had a need to. I prefer everything that is released to be explicit. Note Note: The cas.authn.attributeRepository.defaultAttributesToRelease property can be set in cas.properties to a comma-separated list of attributes that should be released to all services, without having to list them in every service definition. We are not using this feature in our installation, because it makes it harder to determine which attributes are released to a particular service (by requiring the administrator to look in more than one location). Create a Return All service definition When we initially created our service registry, we used a wildcard. We explicitly put that wildcard service with a really high evaluationOrder (99999), so we could ensure all other policies we put in would be triggered if they are hit first. We're going to add a new service - with another high evaluation order (95000). To follow the naming scheme we used earlier , you'll first need a unique ID. As with last time, its recommended that you use the date +%s command to get the datetime in unix epoch format. For my example, I have 1614354496 as that ID. I'm thus calling my service file ApacheTestReleaseAll-1614354496.json and placing it in the roles/cas6/templates/dev-services directory. You'll need to make sure the serviceID matches the host with your CAS client and the id is updated to match what you have in your file name. We're using the ReturnAllAttributeReleasePolicy here (which again - you may not want or need to use in production). roles/cas6/templates/dev-services/ApacheTestReleaseAll-1614354496.json: { \"@class\" : \"org.apereo.cas.services.RegexRegisteredService\" , \"serviceId\" : \"^https://logindev.domain.edu/return-all(\\\\z|/.*)\" , \"name\" : \"Apache Test - full attribute release\" , \"id\" : 1614354496 , \"description\" : \"CAS development Apache mod_auth_cas server with username/password protection\" , \"attributeReleasePolicy\" : { \"@class\" : \"org.apereo.cas.services.ReturnAllAttributeReleasePolicy\" }, \"evaluationOrder\" : 95000 } This service definition uses a serviceId regular expression that matches only the URL for the return-all directory on the cas client server. The (\\z|/.*) syntax at the end matches either the empty string (\\z) or a slash (\u2018/\u2019) followed by anything (/.*), meaning that the following will match: https://logindev.domain.edu/return-all https://logindev.domain.edu/return-all/ https://logindev.domain.edu/return-all/index.php https://logindev.domain.edu/return-all/subdir/file.html but the following will not: https://logindev.domain.edu/return-all-and-something-else https://logindev.domain.edu/some/completely/unrelated/path https://logintest.domain.edu/return-all Create a Return Mapped Attributes service definition You may want to only return certain attributes. This is the most common way to use it in production. Let's say you have an external service that only needs the person's givenName and sn (surname) - why release other attributes that they don't need to them? As with the last service, get output of date +%s for the filename and id. For this example, I've created ApacheTestReturnMapped-1614355136.json and placed it in the roles/cas6/templates/dev-services directory. roles/cas6/templates/dev-services/ApacheTestReturnMapped-1614355136.json: { \"@class\" : \"org.apereo.cas.services.RegexRegisteredService\" , \"serviceId\" : \"^https://logindev.domain.edu/return-mapped(\\\\z|/.*)\" , \"name\" : \"Return Mapped Test\" , \"id\" : 1614355136 , \"description\" : \"Display results of a Return Mapped attribute release policy\" , \"attributeReleasePolicy\" : { \"@class\" : \"org.apereo.cas.services.ReturnMappedAttributeReleasePolicy\" , \"allowedAttributes\" : { \"@class\" : \"java.util.TreeMap\" , \"cn\" : \"cn\" , \"displayName\" : \"fullName\" , \"mail\" : \"EmailAddress\" , \"memberOf\" : \"memberOf\" , \"sn\" : \"sn\" , \"uid\" : \"uid\" , \"UDC_IDENTIFIER\" : \"UDC_IDENTIFIER\" } }, \"evaluationOrder\" : 90000 } The 'allowedAttributes' section is needed when you use the ReturnMappedAttributeReleasePolicy as shown above, to define which attributes are released. Feel free to put your own attributes here - just make sure they've been listed in cas.properties. Trying to release an attribute in a service definition that hasn't been exposed in cas.properties won't work. You can alter them though on a per service basis. Let's say service provider 'x' wants the displayName attribute as fullName - you can do so as I've done above. References CAS 6: Attribute Release Policies","title":"Update service registry"},{"location":"active-directory/update-service-registry/#update-the-service-registry-for-attribute-release","text":"Attribute release policies are defined on a per-service basis in the service registry. There are four basic attribute release policies: Policy Description Return All Return all resolved attributes to the service. Deny All Do not return any attributes to the service. This will also prevent the release of the default attribute pool. Return Allowed Only return the attributes specifically allowed by the policy. This policy includes a list of the attributes to release. Return Mapped Only return the attributes specifically allowed by the policy, but also allow them to be renamed at the individual service level. Useful when a particular service insists on having specific attribute names not used by other services. The syntax for defining the above policies is defined in the CAS 6 Attribute Release Policies documentation. That document also describes a number of script-based policies that will call a Groovy, JavaScript, or Python script to decide how to release attributes (these policies are beyond the scope of this document). I've only used \"Return All\" for testing purposes like we're doing here. I typically use ReturnAllowedAttributeReleasePolicy but have used ReturnMappedAttributePolicy as well a few times. I've never had a reason (yet) to use Deny All. Since I don't use a 'default' attribute release policy (mentioned below) I haven't had a need to. I prefer everything that is released to be explicit. Note Note: The cas.authn.attributeRepository.defaultAttributesToRelease property can be set in cas.properties to a comma-separated list of attributes that should be released to all services, without having to list them in every service definition. We are not using this feature in our installation, because it makes it harder to determine which attributes are released to a particular service (by requiring the administrator to look in more than one location).","title":"Update the service registry for attribute release"},{"location":"active-directory/update-service-registry/#create-a-return-all-service-definition","text":"When we initially created our service registry, we used a wildcard. We explicitly put that wildcard service with a really high evaluationOrder (99999), so we could ensure all other policies we put in would be triggered if they are hit first. We're going to add a new service - with another high evaluation order (95000). To follow the naming scheme we used earlier , you'll first need a unique ID. As with last time, its recommended that you use the date +%s command to get the datetime in unix epoch format. For my example, I have 1614354496 as that ID. I'm thus calling my service file ApacheTestReleaseAll-1614354496.json and placing it in the roles/cas6/templates/dev-services directory. You'll need to make sure the serviceID matches the host with your CAS client and the id is updated to match what you have in your file name. We're using the ReturnAllAttributeReleasePolicy here (which again - you may not want or need to use in production). roles/cas6/templates/dev-services/ApacheTestReleaseAll-1614354496.json: { \"@class\" : \"org.apereo.cas.services.RegexRegisteredService\" , \"serviceId\" : \"^https://logindev.domain.edu/return-all(\\\\z|/.*)\" , \"name\" : \"Apache Test - full attribute release\" , \"id\" : 1614354496 , \"description\" : \"CAS development Apache mod_auth_cas server with username/password protection\" , \"attributeReleasePolicy\" : { \"@class\" : \"org.apereo.cas.services.ReturnAllAttributeReleasePolicy\" }, \"evaluationOrder\" : 95000 } This service definition uses a serviceId regular expression that matches only the URL for the return-all directory on the cas client server. The (\\z|/.*) syntax at the end matches either the empty string (\\z) or a slash (\u2018/\u2019) followed by anything (/.*), meaning that the following will match: https://logindev.domain.edu/return-all https://logindev.domain.edu/return-all/ https://logindev.domain.edu/return-all/index.php https://logindev.domain.edu/return-all/subdir/file.html but the following will not: https://logindev.domain.edu/return-all-and-something-else https://logindev.domain.edu/some/completely/unrelated/path https://logintest.domain.edu/return-all","title":"Create a Return All service definition"},{"location":"active-directory/update-service-registry/#create-a-return-mapped-attributes-service-definition","text":"You may want to only return certain attributes. This is the most common way to use it in production. Let's say you have an external service that only needs the person's givenName and sn (surname) - why release other attributes that they don't need to them? As with the last service, get output of date +%s for the filename and id. For this example, I've created ApacheTestReturnMapped-1614355136.json and placed it in the roles/cas6/templates/dev-services directory. roles/cas6/templates/dev-services/ApacheTestReturnMapped-1614355136.json: { \"@class\" : \"org.apereo.cas.services.RegexRegisteredService\" , \"serviceId\" : \"^https://logindev.domain.edu/return-mapped(\\\\z|/.*)\" , \"name\" : \"Return Mapped Test\" , \"id\" : 1614355136 , \"description\" : \"Display results of a Return Mapped attribute release policy\" , \"attributeReleasePolicy\" : { \"@class\" : \"org.apereo.cas.services.ReturnMappedAttributeReleasePolicy\" , \"allowedAttributes\" : { \"@class\" : \"java.util.TreeMap\" , \"cn\" : \"cn\" , \"displayName\" : \"fullName\" , \"mail\" : \"EmailAddress\" , \"memberOf\" : \"memberOf\" , \"sn\" : \"sn\" , \"uid\" : \"uid\" , \"UDC_IDENTIFIER\" : \"UDC_IDENTIFIER\" } }, \"evaluationOrder\" : 90000 } The 'allowedAttributes' section is needed when you use the ReturnMappedAttributeReleasePolicy as shown above, to define which attributes are released. Feel free to put your own attributes here - just make sure they've been listed in cas.properties. Trying to release an attribute in a service definition that hasn't been exposed in cas.properties won't work. You can alter them though on a per service basis. Let's say service provider 'x' wants the displayName attribute as fullName - you can do so as I've done above.","title":"Create a Return Mapped Attributes service definition"},{"location":"active-directory/update-service-registry/#references","text":"CAS 6: Attribute Release Policies","title":"References"},{"location":"azure-conditional/overview/","text":"Azure Conditional Access Azure Conditional Access is these best place (that I know of) to enforce MFA on users for services that use Azure AD for authentication. You can enforce MFA on all users specific user groups, etc. You can enforce or exclude by IP, and can use Duo, or Microsoft's MFA (and certainly others). Doing this in Azure requires an Azure Active Directory P1 or P2 subscription (P1 at least is included as of this article being written in A3 and A5 but can be purchased separately for A1 users as well). For our environment currently - we are using Duo for all users with the exception of a set of admins who are set to use the Microsoft MFA. Blocking legacy authentication If you're setting up these fancy conditional access policies - you may also want to block older legacy applications that don't support Microsoft's Modern Authentication. If you don't - you'll be leaving holes (not CAS specific of course) that don't require MFA. Microsoft is supposed to block this for all services/protocols later in 2021 anyway so it may be a moot point. Just be cautious about enabling MFA both via CAS and a conditional access policy as you'll get users having to MFA twice in a single login. Enabling Conditional Access The Duo documentation was all I needed here - so I'm not going to reinvent the wheel by replicating them here. It was pretty simple to implement. Don't lock yourself out! When you are enabling conditional access - initially only include test users. As things are tested - you can eventually move to excluding certain users. You may or may not want to have a 'break glass' account that is not ever used in normal circumstances but is used when something breaks (due to bad configuration, problems in Azure, etc.) More complicated policies There are times you may want more complicated policies. One example of this would be our ticketing application. I don't need MFA on regular users there (since doing so would prevent them from opening a ticket if the issue they were having was related to MFA), but I do need MFA on any IT user in the ticketing system. So for this example, I would have two conditional access policies: The main one which includes all users except IT staff. This policy includes all applications but excludes this ticketing app. A second policy which only includes IT staff. This policy includes all applications without an exclusion for the ticketing app. This is only one example - but you may think of others. You may not want to get too fancy though as it may leave gaps in your policies. References Duo: Azure Conditional Access How to: Block legacy authentication to Azure AD with Conditional Access","title":"Azure Conditional Access"},{"location":"azure-conditional/overview/#azure-conditional-access","text":"Azure Conditional Access is these best place (that I know of) to enforce MFA on users for services that use Azure AD for authentication. You can enforce MFA on all users specific user groups, etc. You can enforce or exclude by IP, and can use Duo, or Microsoft's MFA (and certainly others). Doing this in Azure requires an Azure Active Directory P1 or P2 subscription (P1 at least is included as of this article being written in A3 and A5 but can be purchased separately for A1 users as well). For our environment currently - we are using Duo for all users with the exception of a set of admins who are set to use the Microsoft MFA. Blocking legacy authentication If you're setting up these fancy conditional access policies - you may also want to block older legacy applications that don't support Microsoft's Modern Authentication. If you don't - you'll be leaving holes (not CAS specific of course) that don't require MFA. Microsoft is supposed to block this for all services/protocols later in 2021 anyway so it may be a moot point. Just be cautious about enabling MFA both via CAS and a conditional access policy as you'll get users having to MFA twice in a single login.","title":"Azure Conditional Access"},{"location":"azure-conditional/overview/#enabling-conditional-access","text":"The Duo documentation was all I needed here - so I'm not going to reinvent the wheel by replicating them here. It was pretty simple to implement. Don't lock yourself out! When you are enabling conditional access - initially only include test users. As things are tested - you can eventually move to excluding certain users. You may or may not want to have a 'break glass' account that is not ever used in normal circumstances but is used when something breaks (due to bad configuration, problems in Azure, etc.)","title":"Enabling Conditional Access"},{"location":"azure-conditional/overview/#more-complicated-policies","text":"There are times you may want more complicated policies. One example of this would be our ticketing application. I don't need MFA on regular users there (since doing so would prevent them from opening a ticket if the issue they were having was related to MFA), but I do need MFA on any IT user in the ticketing system. So for this example, I would have two conditional access policies: The main one which includes all users except IT staff. This policy includes all applications but excludes this ticketing app. A second policy which only includes IT staff. This policy includes all applications without an exclusion for the ticketing app. This is only one example - but you may think of others. You may not want to get too fancy though as it may leave gaps in your policies.","title":"More complicated policies"},{"location":"azure-conditional/overview/#references","text":"Duo: Azure Conditional Access How to: Block legacy authentication to Azure AD with Conditional Access","title":"References"},{"location":"building-cas/ansible-cas/","text":"Setup variables If you setup the four variables we needed in the encrypted vault file, you're ready. Those variables are setup like the following. Warning Make sure not to ever let your real values for these end up in a public git repo. The ones shown here I generated just for this article and are not what are in use in my environment. roles/cas6/vars/cas-vault.yml: DEV_TGC_SIGNING_KEY : dYffipMGbhIoyUsSHwzEDcBk5nbETZtH-lR3R776wNavS4koAHyQkDdK_rJIWrYYgZZ2TsLW5NXfcDI_Ivn4Uw DEV_TGC_ENCRYPTION_KEY : Gpy6fxMnh5RhmFUJWVcJL9WIAuFODzTlPIaQOTq9-jM DEV_WEBFLOW_SIGNING_KEY : xoWJ9S2vmTgvB_CdZeddb1qmqPihBGIw5Op27MsNxfR8KWgPgrx4VXpssTTM3IcXkLJVoxTylg_hSxvH65M88g DEV_WEBFLOW_ENCRYPTION_KEY : qnHUX0kyFHc718oh/f+ebw== Setup templates To start - the only template files we need are: dev-cas.properties.j2 (which will be /etc/cas/config/cas.properties on the Dev CAS systems) log4j2.xml (which will be /etc/cas/config/log4j2.xml on the CAS systems, as so far I haven't had a reason to have a different log4j2 config on DEV/TEST/PROD like I have for cas.properties). Setup handlers You can copy over the handlers/main.yml file from the Apache Tomcat role since you'll need it here, but we'll also need one to reload httpd (once the AJP proxy config is added to httpd): roles/cas6/handlers/main.yml: # handlers file for cas6 - name : stop tomcat ansible.builtin.systemd : name : tomcat state : stopped - name : start tomcat ansible.builtin.systemd : name : tomcat state : started - name : restart tomcat ansible.builtin.systemd : name : tomcat state : restarted - name : reload httpd ansible.builtin.systemd : name : httpd state : reloaded Create tasks We're going to have multiple plays within the CAS6 role, so we'll break them up like we did for Tomcat, but to start with, it's just two includes for 'base-cas-config.yml'. roles/cas6/tasks/main.yml: - include_tasks : base-cas-config.yml - include_tasks : service-config.yml - include_tasks : cas-ajp-proxy.yml Base CAS Config tasks For the first include, the only tasks are: Make sure the cas config and services directories exist Make sure that the cas.properties file we have in our templates directory matches the one in /etc/cas/config (and if not - update it and use notify to restart Tomcat when the play is done). Make sure that the log4j2.xml file we have in our files directory matches the one in /etc/cas/config (and if not - update it and use notify to restart Tomcat when the play is done). Make sure that the cas.war file we have in our files directory matches the one in /opt/tomcat/latest/webapps (and if not - update it and use notify to restart Tomcat when the play is done). roles/cas6/tasks/base-cas-config.yml: --- - include_vars : cas-vault.yml - name : Ensure base CAS config directory exists ansible.builtin.file : path : /etc/cas/config state : directory mode : 770 owner : root group : tomcat - name : Ensure base CAS services directory exists ansible.builtin.file : path : /etc/cas/services state : directory mode : 750 owner : root group : tomcat - name : Ensure base CAS log directory exists ansible.builtin.file : path : /var/log/cas state : directory mode : 0750 owner : tomcat group : tomcat # Note: This is for dev specifically. If we have multiple environments, there's # a different config file for each. The 'when' on inventory_hostname is used to # differentiate here. - name : Configure cas.properties file (dev) ansible.builtin.template : src : dev-cas.properties.j2 dest : /etc/cas/config/cas.properties mode : 0640 owner : root group : tomcat when : (\"login6dev\" in inventory_hostname) notify : restart tomcat # For us at least, log4j2 is the same on production, dev, or test, # so it's not tier dependent and doesn't need the 'when' statement. # This uses the 'copy' module instead of the 'template' module since # Ansible does not like the {} all over that file. If you need to change that per-server # You'll need to create an version of log4j2.xml with {} escaped. - name : Copy log4j2.xml ansible.builtin.copy : src : log4j2.xml dest : /etc/cas/config/log4j2.xml mode : 0640 owner : root group : tomcat notify : restart tomcat # Note: cas6.war file should be placed in the 'files' subdirectory of your cas role. # You can explicitly replace 'src' with the path to it, i.e. /home/your-user/cas-overlay-template/build/libs/cas.war if you # want, or you can manually copy the cas.war file into the files directory. - name : Copy CAS war file ansible.builtin.copy : src : cas.war dest : /opt/tomcat/latest/webapps/cas.war mode : 0750 owner : tomcat group : tomcat when : (\"login6dev\" in inventory_hostname) notify : restart tomcat Setup AJP proxy between Tomcat and httpd This is what handles the connections on Apache httpd's side from Apache Tomcat. We setup the AJP proxy on the Tomcat side earlier. roles/cas6/tasks/cas-ajp-proxy.yml: --- - name : \"Copy CAS Apache AJP proxy config\" ansible.builtin.template : src : cas-ajp.conf.j2 dest : /etc/httpd/conf.d/cas-ajp.conf owner : root group : root mode : 0644 notify : reload httpd Run the play In this example below, I'm running the play but limiting it to only one host. [ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit login6devb Vault password : This will cause the dev-cas.properties.j2 template to be copied over to /etc/cas/config/cas.properties. It will also copy the log4j2.xml file from the files directory on the ansible host to /etc/cas/config/log4j2.xml on the system or systems specified in the limit command. It will also substitute the variables in the cas properties file using the contents of cas-vault.yml, which were decrypted via the --ask-vault-pass option. If the cas.properties file on the target system is different than the template (after variable substitution), then it will also restart Tomcat. Test the install Once your play goes through - you will want to go to your server (i.e. https://YourCASServer.domain.edu/cas/login) and check that it loads. If you left in a test user defined by cas.authn.accept.users in cas.properties, you can test those credentials here. If it succeeds, you'll receive a \"Log In Successful\" message.","title":"Ansible playbook setup"},{"location":"building-cas/ansible-cas/#setup-variables","text":"If you setup the four variables we needed in the encrypted vault file, you're ready. Those variables are setup like the following. Warning Make sure not to ever let your real values for these end up in a public git repo. The ones shown here I generated just for this article and are not what are in use in my environment. roles/cas6/vars/cas-vault.yml: DEV_TGC_SIGNING_KEY : dYffipMGbhIoyUsSHwzEDcBk5nbETZtH-lR3R776wNavS4koAHyQkDdK_rJIWrYYgZZ2TsLW5NXfcDI_Ivn4Uw DEV_TGC_ENCRYPTION_KEY : Gpy6fxMnh5RhmFUJWVcJL9WIAuFODzTlPIaQOTq9-jM DEV_WEBFLOW_SIGNING_KEY : xoWJ9S2vmTgvB_CdZeddb1qmqPihBGIw5Op27MsNxfR8KWgPgrx4VXpssTTM3IcXkLJVoxTylg_hSxvH65M88g DEV_WEBFLOW_ENCRYPTION_KEY : qnHUX0kyFHc718oh/f+ebw==","title":"Setup variables"},{"location":"building-cas/ansible-cas/#setup-templates","text":"To start - the only template files we need are: dev-cas.properties.j2 (which will be /etc/cas/config/cas.properties on the Dev CAS systems) log4j2.xml (which will be /etc/cas/config/log4j2.xml on the CAS systems, as so far I haven't had a reason to have a different log4j2 config on DEV/TEST/PROD like I have for cas.properties).","title":"Setup templates"},{"location":"building-cas/ansible-cas/#setup-handlers","text":"You can copy over the handlers/main.yml file from the Apache Tomcat role since you'll need it here, but we'll also need one to reload httpd (once the AJP proxy config is added to httpd): roles/cas6/handlers/main.yml: # handlers file for cas6 - name : stop tomcat ansible.builtin.systemd : name : tomcat state : stopped - name : start tomcat ansible.builtin.systemd : name : tomcat state : started - name : restart tomcat ansible.builtin.systemd : name : tomcat state : restarted - name : reload httpd ansible.builtin.systemd : name : httpd state : reloaded","title":"Setup handlers"},{"location":"building-cas/ansible-cas/#create-tasks","text":"We're going to have multiple plays within the CAS6 role, so we'll break them up like we did for Tomcat, but to start with, it's just two includes for 'base-cas-config.yml'. roles/cas6/tasks/main.yml: - include_tasks : base-cas-config.yml - include_tasks : service-config.yml - include_tasks : cas-ajp-proxy.yml","title":"Create tasks"},{"location":"building-cas/ansible-cas/#base-cas-config-tasks","text":"For the first include, the only tasks are: Make sure the cas config and services directories exist Make sure that the cas.properties file we have in our templates directory matches the one in /etc/cas/config (and if not - update it and use notify to restart Tomcat when the play is done). Make sure that the log4j2.xml file we have in our files directory matches the one in /etc/cas/config (and if not - update it and use notify to restart Tomcat when the play is done). Make sure that the cas.war file we have in our files directory matches the one in /opt/tomcat/latest/webapps (and if not - update it and use notify to restart Tomcat when the play is done). roles/cas6/tasks/base-cas-config.yml: --- - include_vars : cas-vault.yml - name : Ensure base CAS config directory exists ansible.builtin.file : path : /etc/cas/config state : directory mode : 770 owner : root group : tomcat - name : Ensure base CAS services directory exists ansible.builtin.file : path : /etc/cas/services state : directory mode : 750 owner : root group : tomcat - name : Ensure base CAS log directory exists ansible.builtin.file : path : /var/log/cas state : directory mode : 0750 owner : tomcat group : tomcat # Note: This is for dev specifically. If we have multiple environments, there's # a different config file for each. The 'when' on inventory_hostname is used to # differentiate here. - name : Configure cas.properties file (dev) ansible.builtin.template : src : dev-cas.properties.j2 dest : /etc/cas/config/cas.properties mode : 0640 owner : root group : tomcat when : (\"login6dev\" in inventory_hostname) notify : restart tomcat # For us at least, log4j2 is the same on production, dev, or test, # so it's not tier dependent and doesn't need the 'when' statement. # This uses the 'copy' module instead of the 'template' module since # Ansible does not like the {} all over that file. If you need to change that per-server # You'll need to create an version of log4j2.xml with {} escaped. - name : Copy log4j2.xml ansible.builtin.copy : src : log4j2.xml dest : /etc/cas/config/log4j2.xml mode : 0640 owner : root group : tomcat notify : restart tomcat # Note: cas6.war file should be placed in the 'files' subdirectory of your cas role. # You can explicitly replace 'src' with the path to it, i.e. /home/your-user/cas-overlay-template/build/libs/cas.war if you # want, or you can manually copy the cas.war file into the files directory. - name : Copy CAS war file ansible.builtin.copy : src : cas.war dest : /opt/tomcat/latest/webapps/cas.war mode : 0750 owner : tomcat group : tomcat when : (\"login6dev\" in inventory_hostname) notify : restart tomcat","title":"Base CAS Config tasks"},{"location":"building-cas/ansible-cas/#setup-ajp-proxy-between-tomcat-and-httpd","text":"This is what handles the connections on Apache httpd's side from Apache Tomcat. We setup the AJP proxy on the Tomcat side earlier. roles/cas6/tasks/cas-ajp-proxy.yml: --- - name : \"Copy CAS Apache AJP proxy config\" ansible.builtin.template : src : cas-ajp.conf.j2 dest : /etc/httpd/conf.d/cas-ajp.conf owner : root group : root mode : 0644 notify : reload httpd","title":"Setup AJP proxy between Tomcat and httpd"},{"location":"building-cas/ansible-cas/#run-the-play","text":"In this example below, I'm running the play but limiting it to only one host. [ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit login6devb Vault password : This will cause the dev-cas.properties.j2 template to be copied over to /etc/cas/config/cas.properties. It will also copy the log4j2.xml file from the files directory on the ansible host to /etc/cas/config/log4j2.xml on the system or systems specified in the limit command. It will also substitute the variables in the cas properties file using the contents of cas-vault.yml, which were decrypted via the --ask-vault-pass option. If the cas.properties file on the target system is different than the template (after variable substitution), then it will also restart Tomcat.","title":"Run the play"},{"location":"building-cas/ansible-cas/#test-the-install","text":"Once your play goes through - you will want to go to your server (i.e. https://YourCASServer.domain.edu/cas/login) and check that it loads. If you left in a test user defined by cas.authn.accept.users in cas.properties, you can test those credentials here. If it succeeds, you'll receive a \"Log In Successful\" message.","title":"Test the install"},{"location":"building-cas/cas-log-config/","text":"Configure CAS logging The Log4J configuration file included with the Gradle WAR overlay template will attempt to write the CAS server log files to /var/log. This is an improvement from CAS 5 where it wanted to default to using the Tomcat directory, but I still prefer to have CAS logs in a separate directory of /var/log/cas. I'd also recommend altering the log rotations so that you have a single file each day instead of it being split by size. These steps are recommended but not required. Change CAS log directory (optional) Make a copy of the file etc/cas/config/log4j2.xml in the cas-overlay-template directory from your build server, and copy it into the files subdirectory of your CAS Ansible role. Find the line that defines the cas.log.dir property (around line 5) and change its value from /var/log to /var/log/cas. Initial config: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <!-- Specify the refresh internal in seconds. --> <Configuration monitorInterval= \"5\" packages= \"org.apereo.cas.logging\" > <Properties> <Property name= \"baseDir\" > /var/log </Property> <Property name= \"cas.log.level\" > info </Property> Altered config with /var/log/cas as the directory: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <!-- Specify the refresh internal in seconds. --> <Configuration monitorInterval= \"5\" packages= \"org.apereo.cas.logging\" > <Properties> <Property name= \"baseDir\" > /var/log/cas </Property> <Property name= \"cas.log.level\" > info </Property> You'll also need to ensure that /var/log/cas exists, and is owned by tomcat (though you can skip this as our Ansible playbook will handle this): mkdir /var/log/cas chown tomcat:tomcat /var/log/cas chmod 750 /var/log/cas Alter the log file rotation strategy (optional) Look for the RollingFile configuration for cas.log (around line 23), and change the variable part of the filePattern attribute to remove the -%i portion. This is the hour and sequence number, which is unneeded if we're only at one file per day. filePattern=\"${baseDir}/cas-%d{yyyy-MM-dd-HH} -%i .log\"> filePattern=\"${baseDir}/cas-%d{yyyy-MM-dd-HH}.log\">. Remove (or comment out) the OnStartupTriggeringPolicy element (around line 27). Remove (or comment out) the SizeBasedTriggeringPolicy element (around line 28). Add the attributes interval=\"1\" modulate=\"true\" to the TimeBasedTriggeringPolicy element (around line 29). Repeat steps 1-4, but for the cas_audit.log config - right after the cas.log config. When done - the cas.log and cas_audit.log sections of log4j2.xml will look like the following: <RollingFile name= \"file\" fileName= \"${baseDir}/cas.log\" append= \"true\" filePattern= \"${baseDir}/cas-%d{yyyy-MM-dd-HH}-%i.log\" > <PatternLayout pattern= \"%d %p [%c] - &lt;%m&gt;%n\" /> <Policies> <!-- Not using OnStartupTriggering or SizeBasedTriggering Policies <OnStartupTriggeringPolicy /> <SizeBasedTriggeringPolicy size=\"10 MB\"/> --> <TimeBasedTriggeringPolicy interval= \"1\" modulate= \"true\" /> </Policies> </RollingFile> <RollingFile name= \"auditlogfile\" fileName= \"${baseDir}/cas_audit.log\" append= \"true\" filePattern= \"${baseDir}/cas_audit-%d{yyyy-MM-dd-HH}.log\" > <PatternLayout pattern= \"%d %p [%c] - %m%n\" /> <Policies> <!-- Not using OnStartupTriggering or SizeBasedTriggering Policies <OnStartupTriggeringPolicy /> <SizeBasedTriggeringPolicy size=\"10 MB\"/> --> <TimeBasedTriggeringPolicy interval= \"1\" modulate= \"true\" /> </Policies> </RollingFile> These changes have been incorporated into our ansible playbook - as you'll see in the next section.","title":"Configure CAS logs"},{"location":"building-cas/cas-log-config/#configure-cas-logging","text":"The Log4J configuration file included with the Gradle WAR overlay template will attempt to write the CAS server log files to /var/log. This is an improvement from CAS 5 where it wanted to default to using the Tomcat directory, but I still prefer to have CAS logs in a separate directory of /var/log/cas. I'd also recommend altering the log rotations so that you have a single file each day instead of it being split by size. These steps are recommended but not required.","title":"Configure CAS logging"},{"location":"building-cas/cas-log-config/#change-cas-log-directory-optional","text":"Make a copy of the file etc/cas/config/log4j2.xml in the cas-overlay-template directory from your build server, and copy it into the files subdirectory of your CAS Ansible role. Find the line that defines the cas.log.dir property (around line 5) and change its value from /var/log to /var/log/cas. Initial config: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <!-- Specify the refresh internal in seconds. --> <Configuration monitorInterval= \"5\" packages= \"org.apereo.cas.logging\" > <Properties> <Property name= \"baseDir\" > /var/log </Property> <Property name= \"cas.log.level\" > info </Property> Altered config with /var/log/cas as the directory: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <!-- Specify the refresh internal in seconds. --> <Configuration monitorInterval= \"5\" packages= \"org.apereo.cas.logging\" > <Properties> <Property name= \"baseDir\" > /var/log/cas </Property> <Property name= \"cas.log.level\" > info </Property> You'll also need to ensure that /var/log/cas exists, and is owned by tomcat (though you can skip this as our Ansible playbook will handle this): mkdir /var/log/cas chown tomcat:tomcat /var/log/cas chmod 750 /var/log/cas","title":"Change CAS log directory (optional)"},{"location":"building-cas/cas-log-config/#alter-the-log-file-rotation-strategy-optional","text":"Look for the RollingFile configuration for cas.log (around line 23), and change the variable part of the filePattern attribute to remove the -%i portion. This is the hour and sequence number, which is unneeded if we're only at one file per day. filePattern=\"${baseDir}/cas-%d{yyyy-MM-dd-HH} -%i .log\"> filePattern=\"${baseDir}/cas-%d{yyyy-MM-dd-HH}.log\">. Remove (or comment out) the OnStartupTriggeringPolicy element (around line 27). Remove (or comment out) the SizeBasedTriggeringPolicy element (around line 28). Add the attributes interval=\"1\" modulate=\"true\" to the TimeBasedTriggeringPolicy element (around line 29). Repeat steps 1-4, but for the cas_audit.log config - right after the cas.log config. When done - the cas.log and cas_audit.log sections of log4j2.xml will look like the following: <RollingFile name= \"file\" fileName= \"${baseDir}/cas.log\" append= \"true\" filePattern= \"${baseDir}/cas-%d{yyyy-MM-dd-HH}-%i.log\" > <PatternLayout pattern= \"%d %p [%c] - &lt;%m&gt;%n\" /> <Policies> <!-- Not using OnStartupTriggering or SizeBasedTriggering Policies <OnStartupTriggeringPolicy /> <SizeBasedTriggeringPolicy size=\"10 MB\"/> --> <TimeBasedTriggeringPolicy interval= \"1\" modulate= \"true\" /> </Policies> </RollingFile> <RollingFile name= \"auditlogfile\" fileName= \"${baseDir}/cas_audit.log\" append= \"true\" filePattern= \"${baseDir}/cas_audit-%d{yyyy-MM-dd-HH}.log\" > <PatternLayout pattern= \"%d %p [%c] - %m%n\" /> <Policies> <!-- Not using OnStartupTriggering or SizeBasedTriggering Policies <OnStartupTriggeringPolicy /> <SizeBasedTriggeringPolicy size=\"10 MB\"/> --> <TimeBasedTriggeringPolicy interval= \"1\" modulate= \"true\" /> </Policies> </RollingFile> These changes have been incorporated into our ansible playbook - as you'll see in the next section.","title":"Alter the log file rotation strategy (optional)"},{"location":"building-cas/create-gradle-overlay/","text":"Create a Gradle WAR overlay project Clone the CAS overlay template from Apereo's GitHub We're going to use git to clone the Apereo GitHub repository. In the command below - I'm specifically choosing the 6.3.x branch. The master branch of deployment is 6.3.x now - but could move forward at any time. I recommend being explicit with the branch you choose so you aren't surprised. git clone --branch 6.3 https://github.com/apereo/cas-overlay-template.git This will create a 'cas-overlay-template' in your home or build directory. Create a local branch After you\u2019re on the right branch (for our project, you should be on the master branch), create a new branch local to your project, which will be used to track all of your changes and keep them separate from any changes made to the template by the CAS developers. This will make it easier in the future to merge upstream changes from the CAS project team into your local template without having to redo all your changes. Choose a meaningful name for your branch, but not somthing likely to be duplicated by the CAS developers\u2014for example, newschool-casdev. Run the command git checkout -b yourschool-casdev and you should see notice that you've switched to that branch. Test build process Change to the newly created cas-overlay-template directory and run an initial build. This helps test things before we make any of our own modifications. [chauvetp@login6deva casbuild]$ cd cas-overlay-template/ [chauvetp@login6deva cas-overlay-template]$ ./gradlew clean build Starting a Gradle Daemon (subsequent builds will be faster) Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0. Use '--warning-mode all' to show the individual deprecation warnings. See https://docs.gradle.org/6.4/userguide/command_line_interface.html#sec:command_line_warnings BUILD SUCCESSFUL in 20s 5 actionable tasks: 5 executed When that's complete - you will have a cas.war file created within the build/libs subdirectory. As a quick test, you can copy that over to one of your CAS/Tomcat development hosts: scp build/libs/cas.war root@<One-of-Your-CAS-Hosts>:/opt/tomcat/latest/webapps/ Once you do that, if Tomcat is running and you wait a minute or two, you'll have CAS up and running - though not in a really useful way (no authentication backends, no external services, no ticket registry, no theme, etc.). It won't work to login - there's not even a configuration deployed - but it's just an initial test. I recommend testing at each stage as functionality is added to CAS - so making sure the base install starts is good! References CAS 6.3.x deployment - WAR Overlays","title":"Create Gradle Overlay"},{"location":"building-cas/create-gradle-overlay/#create-a-gradle-war-overlay-project","text":"","title":"Create a Gradle WAR overlay project"},{"location":"building-cas/create-gradle-overlay/#clone-the-cas-overlay-template-from-apereos-github","text":"We're going to use git to clone the Apereo GitHub repository. In the command below - I'm specifically choosing the 6.3.x branch. The master branch of deployment is 6.3.x now - but could move forward at any time. I recommend being explicit with the branch you choose so you aren't surprised. git clone --branch 6.3 https://github.com/apereo/cas-overlay-template.git This will create a 'cas-overlay-template' in your home or build directory.","title":"Clone the CAS overlay template from Apereo's GitHub"},{"location":"building-cas/create-gradle-overlay/#create-a-local-branch","text":"After you\u2019re on the right branch (for our project, you should be on the master branch), create a new branch local to your project, which will be used to track all of your changes and keep them separate from any changes made to the template by the CAS developers. This will make it easier in the future to merge upstream changes from the CAS project team into your local template without having to redo all your changes. Choose a meaningful name for your branch, but not somthing likely to be duplicated by the CAS developers\u2014for example, newschool-casdev. Run the command git checkout -b yourschool-casdev and you should see notice that you've switched to that branch.","title":"Create a local branch"},{"location":"building-cas/create-gradle-overlay/#test-build-process","text":"Change to the newly created cas-overlay-template directory and run an initial build. This helps test things before we make any of our own modifications. [chauvetp@login6deva casbuild]$ cd cas-overlay-template/ [chauvetp@login6deva cas-overlay-template]$ ./gradlew clean build Starting a Gradle Daemon (subsequent builds will be faster) Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0. Use '--warning-mode all' to show the individual deprecation warnings. See https://docs.gradle.org/6.4/userguide/command_line_interface.html#sec:command_line_warnings BUILD SUCCESSFUL in 20s 5 actionable tasks: 5 executed When that's complete - you will have a cas.war file created within the build/libs subdirectory. As a quick test, you can copy that over to one of your CAS/Tomcat development hosts: scp build/libs/cas.war root@<One-of-Your-CAS-Hosts>:/opt/tomcat/latest/webapps/ Once you do that, if Tomcat is running and you wait a minute or two, you'll have CAS up and running - though not in a really useful way (no authentication backends, no external services, no ticket registry, no theme, etc.). It won't work to login - there's not even a configuration deployed - but it's just an initial test. I recommend testing at each stage as functionality is added to CAS - so making sure the base install starts is good!","title":"Test build process"},{"location":"building-cas/create-gradle-overlay/#references","text":"CAS 6.3.x deployment - WAR Overlays","title":"References"},{"location":"building-cas/initial-cas-config/","text":"Initial CAS Configuration By default, CAS expects to find its configuration files in the operating system directory /etc/cas (with subdirectories of config and services). Almost every aspect of CAS server configuration is controlled via settings stored in the cas.properties file located in the /etc/cas/config directory. We're going to start with a simple config - and enhance it as features are added. Tomcat will also expect the .war file to be placed within /opt/tomcat/latest/webapps (aka /var/lib/tomcat which is where that symlink points to). We'll be handling both the config and the cas.war file in this page. Tip The config files are for the CAS servers. If you're not using Ansible - you'll have to get them into /etc/cas/config/ on the indivudal CAS servers on your own. I'll be assuming Ansible going forward. If you're not using Ansible - you can still use this guide to create configuration files - you'll just have to fill in the variables manually instead of letting Ansible substitute them from vars files. Create Ansible CAS role Before we start - let's create a new role for cas6 - just like we did for apache-tomcat. Go to the roles directory and initialize a new role for cas6: [chauvetp@ansible ~]$ cd ansible/roles/ [chauvetp@ansible roles]$ ansible-galaxy init cas6 - Role cas6 was created successfully [chauvetp@ansible roles]$ ls cas6/ defaults files handlers meta README.md tasks templates tests vars Start creating configuration files Create a new file called 'dev-cas.properties.j2' (j2 indicates a Jinja2 template file). We're going to have variables in these files that we are NOT going to want to keep in the properties file - at least not unencrypted in a git repository. I recommend one file for each of your environments (dev-cas.properties.j2, test-cas.properties.j2, prod-cas.properties.j2). All will eventually just be /etc/cas/config/cas.properties on their respective servers though. It's going to have some variables which we're going to fill in later. dev-cas.properties.j2 creation # Replace this with your public facing cas server name. If you're using a load balancer # This will be the virtual host within that load balancer, not the servers being the load balancer. cas.server.name=https://your-dev-server.domain.edu cas.server.prefix=${cas.server.name}/cas logging.config : file:/etc/cas/config/log4j2.xml # JSON Service Registry cas.serviceRegistry.json.location=file:/etc/cas/services cas.tgc.secure : true cas.tgc.crypto.signing.key : {{ DEV_TGC_SIGNING_KEY }} cas.tgc.crypto.encryption.key : {{ DEV_TGC_ENCRYPTION_KEY }} cas.webflow.crypto.signing.key : {{ DEV_WEBFLOW_SIGNING_KEY }} cas.webflow.crypto.encryption.key : {{ DEV_WEBFLOW_ENCRYPTION_KEY }} # Default handler - enable only for testing - leave blank (not commented out) to disable cas.authn.accept.users=YourTestUser::YourTestPassword Caution Within this file - the 'cas.authn.accept.users' value has been set. This is for testing only! It should be removed long before you are ready to go into production! Within the file - you'll notice a few areas with {{ variables_in_curly_brackets }}. These are variables. Many of them are sensitive values that you don't want unencrypted in a git repository (or not in a git repository at all). There's two ways to handle this: Using Ansible Vault (encrypted files - you're prompted for the encryption password when you run a playbook with the --ask-vault-pass option) Using .gitignore files to exclude one or more variable files from your git repo. You can combine these (i.e. using ansible vault and still using gitignore to not put those files into git.) Setting up an Ansible Vault file for sensitive variables Ansible gives the option of encrypting individual variables in a file, or encrypting the entire file. I tend to encrypt the entire file. At my organization there's only two people who need access to these encrypted files, so I don't mind sharing that password between two of us. For larger groups, there are options on encrypting files with multiple per-user keys (see the References section at the bottom for more tails). We're going to go with encrypted files with a single key here. From your CAS role directory: ansible-vault create vars/cas-vault.yml You'll be prompted to enter, and re-enter, a password/passphrase. Choose something good - and store that password somewhere like your password manager. It will then bring you into your system's default editor (if you're on Linux, vi by default). You can put placeholders for the variables we need there: DEV_TGC_SIGNING_KEY : DEV_TGC_ENCRYPTION_KEY : DEV_WEBFLOW_SIGNING_KEY : DEV_WEBFLOW_ENCRYPTION_KEY : Save the file for now. You can edit again via the following (you'll be prompted for your password): ansible-vault edit vars/cas-vault.yml Configure ticket granting cookie encryption The CAS server uses a ticket granting cookie (tgc) in the browser to maintain login state during single sign-on sessions. A client can present this cookie to CAS in lieu of primary credentials and, provided it is valid, will be authenticated. The contents of the cookie should be encrypted to protect them, and when running in a multi-node environment, all of the nodes must use the same keys. These are defined in our cas.properties sample above as cas.tgc.crypto.signing.key and cas.tgc.crypto.encryption.key To start with - we'll need a key generation tool. The Apereo project has one that we can use. This doesn't have to be done on the CAS hosts - just somewhere with Java. wget https://raw.githubusercontent.com/apereo/cas/master/etc/jwk-gen.jar Skip ahead for a script to generate all these keys There's a script to generate all these keys ahead - feel free to skip to it in the \"Generating all necessary keys\" section near the end of this page. Generate the first key (cas.tgc.crypto.signing.key) Run: java -jar jwk-gen.jar -t oct -s 256 | grep k.: | cut -f4 -d\\\" Enter the output as your DEV_TGC_SIGNING_KEY in your Ansible vault (or if not using Ansible vault - just put it directly as the value for cas.tgc.crypto.signing.key within your cas.properties file.) Generate the second key (cas.tgc.crypto.encryption.key) Run: java -jar jwk-gen.jar -t oct -s 512 | grep k.: | cut -f4 -d\\\" Enter the output as your DEV_TGC_ENCRYPTION_KEY in your Ansible vault (or if not using Ansible vault - just put it directly as the value for cas.tgc.crypto.encryption.key in cas.properties file.) Configure Spring Webflow encryption CAS uses Spring Webflow to manage the authentication sequence, and this also needs to be encrypted. We'll use the same jwk-gen.jar tool to generate the webflow.crypto.signing.key as we used to generate the two tgc keys but will use openssl and a random function for the webflow encryption key. Generate the first key (cas.webflow.crypto.signing.key) Run: java -jar jwk-gen.jar -t oct -s 512 | grep k.: | cut -f4 -d\\\" Enter the output as your DEV_WEBFLOW_SIGNING_KEY in your Ansible vault (or if not using Ansible vault - just put it directly as the value for cas.webflow.crypto.signing.key in your cas.properties file.) Generate the second key (cas.webflow.crypto.encryption.key) This one is different. Unlike the ticket granting cookie encryption key above, the encryption key for Spring WebFlow is not a JSON Web Key. Rather, it\u2019s a randomly-generated string of 16 (by default) octets, Base64-encoded. An easy way to generate this key is to use openssl: Run: openssl rand -base64 16 Enter the output of that as your DEV_WEBFLOW_ENCRYPTION_KEY in your Ansible vault (or if not using Ansible vault - just put it directly as the value for cas.webflow.crypto.encryption.key in your cas.properties file.) You can also use the JSON Web Key Generator, which point to to generate keys, is provided by the Mitre Corporation and the MIT Kerberos and Internet Trust Consortium, and is simply a web-based interface to the json-web-key-generator project, also provided by Mitre/MIT. The project can be cloned from GitHub and built locally if you don\u2019t trust the online generator. I was using that method - but I've found the above method from my colleague Bill Jojo in his CAS Primer : Generating all necessary keys I have a script to generate the necessary keys instead of doing them one by one. Note: there are ticket encryption keys which are not needed yet - but I put them all in this script. You'll need them in the ticket registry section of this guide for the Hazelcast ticket registry. #!/usr/bin/bash echo \"Specify the environment that you are generating keys for (DEV/TEST/PROD): \" read CAS_ENV if [[ $CAS_ENV -eq \"DEV\" ]] || [[ $CAS_ENV -eq \"TEST\" ]] || [[ $CAS_ENV -eq \"PROD\" ]] then echo \"# cas.tgc.crypto.signing.key:\" tgcSigning = $( java -jar jwk-gen.jar -t oct -s 512 | grep k.: | cut -f4 -d \\\" ) tgcSigningOutput = $CAS_ENV \"_TGC_SIGNING_KEY: \" $tgcSigning echo $tgcSigningOutput echo \"\" echo \"# cas.tgc.crypto.encryption.key:\" tgcEncryption = $( java -jar jwk-gen.jar -t oct -s 256 | grep k.: | cut -f4 -d \\\" ) tgcEncryptionOutput = $CAS_ENV \"_TGC_ENCRYPTION_KEY: \" $tgcEncryption echo $tgcEncryptionOutput echo \"\" echo \"# cas.webflow.crypto.signing.key:\" webflowSigning = $( java -jar jwk-gen.jar -t oct -s 512 | grep k.: | cut -f4 -d \\\" ) webflowSigningOutput = $CAS_ENV \"_WEBFLOW_SIGNING_KEY: \" $webflowSigning echo $webflowSigningOutput echo \"\" echo \"# cas.webflow.crypto.encryption.key:\" webflowEncryption = $( openssl rand -base64 16 ) webflowEncryptionOutput = $CAS_ENV \"_WEBFLOW_ENCRYPTION_KEY: \" $webflowEncryption echo $webflowEncryptionOutput echo \"\" echo \"# cas.ticket.registry.hazelcast.crypto.signing.key:\" ticketSigning = $( java -jar jwk-gen.jar -t oct -s 512 | grep k.: | cut -f4 -d \\\" ) ticketSigningOutput = $CAS_ENV \"_CAS_HAZELCAST_SIGNING_KEY: \" $ticketSigning echo $ticketSigningOutput echo \"\" echo \"# cas.ticket.registry.hazelcast.crypto.encryption.key\" ticketEncryption = $( openssl rand -base64 16 ) ticketEncryptionOutput = $CAS_ENV \"_CAS_HAZELCAST_ENCRYPTION_KEY: \" $ticketEncryption echo $ticketEncryptionOutput echo \"\" else echo \"Enter DEV, TEST, or PROD for environment\" fi Example of output As previously noted - these are of course not my real keys. [chauvetp@login6deva ~]$ ./generate-keys.sh Specify the environment that you are generating keys for (DEV/TEST/PROD): DEV # cas.tgc.crypto.signing.key: DEV_TGC_SIGNING_KEY: 9v5s2DnNgGMK5dAsa3morDuUB7haZJ2yTX9XBZbu9fLJYoTfg1_OOyLMe-oTAx8UMmonVkYoT8mcgMBuUAoTag # cas.tgc.crypto.encryption.key: DEV_TGC_ENCRYPTION_KEY: dJTxu7LkM6TQcm2_Y4qF7NfLzmgNXyFrWk1jgFg4e6s # cas.webflow.crypto.signing.key: DEV_WEBFLOW_SIGNING_KEY: NJ52ZvKqWa_gRhcwYUONOD4YIlldz_gapiGmufv0hebWxEkAv_ZOGcQfkYiXW7-BbOzh9At_gzTTF-5cyfOAdg # cas.webflow.crypto.encryption.key: DEV_WEBFLOW_ENCRYPTION_KEY: QRMYFG1NwIAQW5J7OxddwA== # cas.ticket.registry.hazelcast.crypto.signing.key: DEV_CAS_HAZELCAST_SIGNING_KEY: i3stPkvGFo86nuXHX2Y4AIaU__Cop1O0maBQe2bVRk1sVC_QYAq0nGlksnv6EcJAcDY3sf5Yzk-Ye9Oe3Hw_lQ # cas.ticket.registry.hazelcast.crypto.encryption.key DEV_CAS_HAZELCAST_ENCRYPTION_KEY: Au9CEFNrOPItYbGNFSDQUw== Save your vault file That's it for the vault file for now - save it. References Encrypting content with Ansible Vault William Jojo's CAS Primer","title":"Initial CAS config"},{"location":"building-cas/initial-cas-config/#initial-cas-configuration","text":"By default, CAS expects to find its configuration files in the operating system directory /etc/cas (with subdirectories of config and services). Almost every aspect of CAS server configuration is controlled via settings stored in the cas.properties file located in the /etc/cas/config directory. We're going to start with a simple config - and enhance it as features are added. Tomcat will also expect the .war file to be placed within /opt/tomcat/latest/webapps (aka /var/lib/tomcat which is where that symlink points to). We'll be handling both the config and the cas.war file in this page. Tip The config files are for the CAS servers. If you're not using Ansible - you'll have to get them into /etc/cas/config/ on the indivudal CAS servers on your own. I'll be assuming Ansible going forward. If you're not using Ansible - you can still use this guide to create configuration files - you'll just have to fill in the variables manually instead of letting Ansible substitute them from vars files.","title":"Initial CAS Configuration"},{"location":"building-cas/initial-cas-config/#create-ansible-cas-role","text":"Before we start - let's create a new role for cas6 - just like we did for apache-tomcat. Go to the roles directory and initialize a new role for cas6: [chauvetp@ansible ~]$ cd ansible/roles/ [chauvetp@ansible roles]$ ansible-galaxy init cas6 - Role cas6 was created successfully [chauvetp@ansible roles]$ ls cas6/ defaults files handlers meta README.md tasks templates tests vars","title":"Create Ansible CAS role"},{"location":"building-cas/initial-cas-config/#start-creating-configuration-files","text":"Create a new file called 'dev-cas.properties.j2' (j2 indicates a Jinja2 template file). We're going to have variables in these files that we are NOT going to want to keep in the properties file - at least not unencrypted in a git repository. I recommend one file for each of your environments (dev-cas.properties.j2, test-cas.properties.j2, prod-cas.properties.j2). All will eventually just be /etc/cas/config/cas.properties on their respective servers though. It's going to have some variables which we're going to fill in later.","title":"Start creating configuration files"},{"location":"building-cas/initial-cas-config/#dev-caspropertiesj2-creation","text":"# Replace this with your public facing cas server name. If you're using a load balancer # This will be the virtual host within that load balancer, not the servers being the load balancer. cas.server.name=https://your-dev-server.domain.edu cas.server.prefix=${cas.server.name}/cas logging.config : file:/etc/cas/config/log4j2.xml # JSON Service Registry cas.serviceRegistry.json.location=file:/etc/cas/services cas.tgc.secure : true cas.tgc.crypto.signing.key : {{ DEV_TGC_SIGNING_KEY }} cas.tgc.crypto.encryption.key : {{ DEV_TGC_ENCRYPTION_KEY }} cas.webflow.crypto.signing.key : {{ DEV_WEBFLOW_SIGNING_KEY }} cas.webflow.crypto.encryption.key : {{ DEV_WEBFLOW_ENCRYPTION_KEY }} # Default handler - enable only for testing - leave blank (not commented out) to disable cas.authn.accept.users=YourTestUser::YourTestPassword Caution Within this file - the 'cas.authn.accept.users' value has been set. This is for testing only! It should be removed long before you are ready to go into production! Within the file - you'll notice a few areas with {{ variables_in_curly_brackets }}. These are variables. Many of them are sensitive values that you don't want unencrypted in a git repository (or not in a git repository at all). There's two ways to handle this: Using Ansible Vault (encrypted files - you're prompted for the encryption password when you run a playbook with the --ask-vault-pass option) Using .gitignore files to exclude one or more variable files from your git repo. You can combine these (i.e. using ansible vault and still using gitignore to not put those files into git.)","title":"dev-cas.properties.j2 creation"},{"location":"building-cas/initial-cas-config/#setting-up-an-ansible-vault-file-for-sensitive-variables","text":"Ansible gives the option of encrypting individual variables in a file, or encrypting the entire file. I tend to encrypt the entire file. At my organization there's only two people who need access to these encrypted files, so I don't mind sharing that password between two of us. For larger groups, there are options on encrypting files with multiple per-user keys (see the References section at the bottom for more tails). We're going to go with encrypted files with a single key here. From your CAS role directory: ansible-vault create vars/cas-vault.yml You'll be prompted to enter, and re-enter, a password/passphrase. Choose something good - and store that password somewhere like your password manager. It will then bring you into your system's default editor (if you're on Linux, vi by default). You can put placeholders for the variables we need there: DEV_TGC_SIGNING_KEY : DEV_TGC_ENCRYPTION_KEY : DEV_WEBFLOW_SIGNING_KEY : DEV_WEBFLOW_ENCRYPTION_KEY : Save the file for now. You can edit again via the following (you'll be prompted for your password): ansible-vault edit vars/cas-vault.yml","title":"Setting up an Ansible Vault file for sensitive variables"},{"location":"building-cas/initial-cas-config/#configure-ticket-granting-cookie-encryption","text":"The CAS server uses a ticket granting cookie (tgc) in the browser to maintain login state during single sign-on sessions. A client can present this cookie to CAS in lieu of primary credentials and, provided it is valid, will be authenticated. The contents of the cookie should be encrypted to protect them, and when running in a multi-node environment, all of the nodes must use the same keys. These are defined in our cas.properties sample above as cas.tgc.crypto.signing.key and cas.tgc.crypto.encryption.key To start with - we'll need a key generation tool. The Apereo project has one that we can use. This doesn't have to be done on the CAS hosts - just somewhere with Java. wget https://raw.githubusercontent.com/apereo/cas/master/etc/jwk-gen.jar Skip ahead for a script to generate all these keys There's a script to generate all these keys ahead - feel free to skip to it in the \"Generating all necessary keys\" section near the end of this page.","title":"Configure ticket granting cookie encryption"},{"location":"building-cas/initial-cas-config/#generate-the-first-key-castgccryptosigningkey","text":"Run: java -jar jwk-gen.jar -t oct -s 256 | grep k.: | cut -f4 -d\\\" Enter the output as your DEV_TGC_SIGNING_KEY in your Ansible vault (or if not using Ansible vault - just put it directly as the value for cas.tgc.crypto.signing.key within your cas.properties file.)","title":"Generate the first key (cas.tgc.crypto.signing.key)"},{"location":"building-cas/initial-cas-config/#generate-the-second-key-castgccryptoencryptionkey","text":"Run: java -jar jwk-gen.jar -t oct -s 512 | grep k.: | cut -f4 -d\\\" Enter the output as your DEV_TGC_ENCRYPTION_KEY in your Ansible vault (or if not using Ansible vault - just put it directly as the value for cas.tgc.crypto.encryption.key in cas.properties file.)","title":"Generate the second key (cas.tgc.crypto.encryption.key)"},{"location":"building-cas/initial-cas-config/#configure-spring-webflow-encryption","text":"CAS uses Spring Webflow to manage the authentication sequence, and this also needs to be encrypted. We'll use the same jwk-gen.jar tool to generate the webflow.crypto.signing.key as we used to generate the two tgc keys but will use openssl and a random function for the webflow encryption key.","title":"Configure Spring Webflow encryption"},{"location":"building-cas/initial-cas-config/#generate-the-first-key-caswebflowcryptosigningkey","text":"Run: java -jar jwk-gen.jar -t oct -s 512 | grep k.: | cut -f4 -d\\\" Enter the output as your DEV_WEBFLOW_SIGNING_KEY in your Ansible vault (or if not using Ansible vault - just put it directly as the value for cas.webflow.crypto.signing.key in your cas.properties file.)","title":"Generate the first key (cas.webflow.crypto.signing.key)"},{"location":"building-cas/initial-cas-config/#generate-the-second-key-caswebflowcryptoencryptionkey","text":"This one is different. Unlike the ticket granting cookie encryption key above, the encryption key for Spring WebFlow is not a JSON Web Key. Rather, it\u2019s a randomly-generated string of 16 (by default) octets, Base64-encoded. An easy way to generate this key is to use openssl: Run: openssl rand -base64 16 Enter the output of that as your DEV_WEBFLOW_ENCRYPTION_KEY in your Ansible vault (or if not using Ansible vault - just put it directly as the value for cas.webflow.crypto.encryption.key in your cas.properties file.) You can also use the JSON Web Key Generator, which point to to generate keys, is provided by the Mitre Corporation and the MIT Kerberos and Internet Trust Consortium, and is simply a web-based interface to the json-web-key-generator project, also provided by Mitre/MIT. The project can be cloned from GitHub and built locally if you don\u2019t trust the online generator. I was using that method - but I've found the above method from my colleague Bill Jojo in his CAS Primer :","title":"Generate the second key (cas.webflow.crypto.encryption.key)"},{"location":"building-cas/initial-cas-config/#generating-all-necessary-keys","text":"I have a script to generate the necessary keys instead of doing them one by one. Note: there are ticket encryption keys which are not needed yet - but I put them all in this script. You'll need them in the ticket registry section of this guide for the Hazelcast ticket registry. #!/usr/bin/bash echo \"Specify the environment that you are generating keys for (DEV/TEST/PROD): \" read CAS_ENV if [[ $CAS_ENV -eq \"DEV\" ]] || [[ $CAS_ENV -eq \"TEST\" ]] || [[ $CAS_ENV -eq \"PROD\" ]] then echo \"# cas.tgc.crypto.signing.key:\" tgcSigning = $( java -jar jwk-gen.jar -t oct -s 512 | grep k.: | cut -f4 -d \\\" ) tgcSigningOutput = $CAS_ENV \"_TGC_SIGNING_KEY: \" $tgcSigning echo $tgcSigningOutput echo \"\" echo \"# cas.tgc.crypto.encryption.key:\" tgcEncryption = $( java -jar jwk-gen.jar -t oct -s 256 | grep k.: | cut -f4 -d \\\" ) tgcEncryptionOutput = $CAS_ENV \"_TGC_ENCRYPTION_KEY: \" $tgcEncryption echo $tgcEncryptionOutput echo \"\" echo \"# cas.webflow.crypto.signing.key:\" webflowSigning = $( java -jar jwk-gen.jar -t oct -s 512 | grep k.: | cut -f4 -d \\\" ) webflowSigningOutput = $CAS_ENV \"_WEBFLOW_SIGNING_KEY: \" $webflowSigning echo $webflowSigningOutput echo \"\" echo \"# cas.webflow.crypto.encryption.key:\" webflowEncryption = $( openssl rand -base64 16 ) webflowEncryptionOutput = $CAS_ENV \"_WEBFLOW_ENCRYPTION_KEY: \" $webflowEncryption echo $webflowEncryptionOutput echo \"\" echo \"# cas.ticket.registry.hazelcast.crypto.signing.key:\" ticketSigning = $( java -jar jwk-gen.jar -t oct -s 512 | grep k.: | cut -f4 -d \\\" ) ticketSigningOutput = $CAS_ENV \"_CAS_HAZELCAST_SIGNING_KEY: \" $ticketSigning echo $ticketSigningOutput echo \"\" echo \"# cas.ticket.registry.hazelcast.crypto.encryption.key\" ticketEncryption = $( openssl rand -base64 16 ) ticketEncryptionOutput = $CAS_ENV \"_CAS_HAZELCAST_ENCRYPTION_KEY: \" $ticketEncryption echo $ticketEncryptionOutput echo \"\" else echo \"Enter DEV, TEST, or PROD for environment\" fi","title":"Generating all necessary keys"},{"location":"building-cas/initial-cas-config/#example-of-output","text":"As previously noted - these are of course not my real keys. [chauvetp@login6deva ~]$ ./generate-keys.sh Specify the environment that you are generating keys for (DEV/TEST/PROD): DEV # cas.tgc.crypto.signing.key: DEV_TGC_SIGNING_KEY: 9v5s2DnNgGMK5dAsa3morDuUB7haZJ2yTX9XBZbu9fLJYoTfg1_OOyLMe-oTAx8UMmonVkYoT8mcgMBuUAoTag # cas.tgc.crypto.encryption.key: DEV_TGC_ENCRYPTION_KEY: dJTxu7LkM6TQcm2_Y4qF7NfLzmgNXyFrWk1jgFg4e6s # cas.webflow.crypto.signing.key: DEV_WEBFLOW_SIGNING_KEY: NJ52ZvKqWa_gRhcwYUONOD4YIlldz_gapiGmufv0hebWxEkAv_ZOGcQfkYiXW7-BbOzh9At_gzTTF-5cyfOAdg # cas.webflow.crypto.encryption.key: DEV_WEBFLOW_ENCRYPTION_KEY: QRMYFG1NwIAQW5J7OxddwA== # cas.ticket.registry.hazelcast.crypto.signing.key: DEV_CAS_HAZELCAST_SIGNING_KEY: i3stPkvGFo86nuXHX2Y4AIaU__Cop1O0maBQe2bVRk1sVC_QYAq0nGlksnv6EcJAcDY3sf5Yzk-Ye9Oe3Hw_lQ # cas.ticket.registry.hazelcast.crypto.encryption.key DEV_CAS_HAZELCAST_ENCRYPTION_KEY: Au9CEFNrOPItYbGNFSDQUw==","title":"Example of output"},{"location":"building-cas/initial-cas-config/#save-your-vault-file","text":"That's it for the vault file for now - save it.","title":"Save your vault file"},{"location":"building-cas/initial-cas-config/#references","text":"Encrypting content with Ansible Vault William Jojo's CAS Primer","title":"References"},{"location":"building-cas/overview/","text":"Building the CAS server If you've followed the other steps, then you'll already have one or more Tomcat servers ready to go. Overview We will be building from source, using the Gradle WAR overlay method. As per Misagh Moayyed's Getting Started document: CAS 6.0.x Deployment - WAR Overlays Overlays are a strategy to combat repetitive code and/or resources. Rather than downloading the CAS codebase and building it from source, overlays allow you to download a pre-built vanilla CAS web application server provided by the project itself, override/insert specific behavior into it and then merge it all back together to produce the final (web application) artifact. If you've used CAS 5.x, you may have used the Maven WAR overlay template instead, but as of CAS 6 this was deprecated and the Gradle WAR overlay method is recommended instead. Before you get started These steps are done on the build/ansible server - not the CAS servers. We'll get to pushing the build out to the CAS servers later. On your build server, you'll want to have installed: java-11-openjdk java-11-openjdk-devel git curl-devel I may have forgotten some prerequisites since I'm doing this on an existing server. I will be going back to replicate this in the future on a clean server and will catch anything I missed there. References CAS 6.3.x deployment - WAR Overlays","title":"Overview"},{"location":"building-cas/overview/#building-the-cas-server","text":"If you've followed the other steps, then you'll already have one or more Tomcat servers ready to go.","title":"Building the CAS server"},{"location":"building-cas/overview/#overview","text":"We will be building from source, using the Gradle WAR overlay method. As per Misagh Moayyed's Getting Started document: CAS 6.0.x Deployment - WAR Overlays Overlays are a strategy to combat repetitive code and/or resources. Rather than downloading the CAS codebase and building it from source, overlays allow you to download a pre-built vanilla CAS web application server provided by the project itself, override/insert specific behavior into it and then merge it all back together to produce the final (web application) artifact. If you've used CAS 5.x, you may have used the Maven WAR overlay template instead, but as of CAS 6 this was deprecated and the Gradle WAR overlay method is recommended instead.","title":"Overview"},{"location":"building-cas/overview/#before-you-get-started","text":"These steps are done on the build/ansible server - not the CAS servers. We'll get to pushing the build out to the CAS servers later. On your build server, you'll want to have installed: java-11-openjdk java-11-openjdk-devel git curl-devel I may have forgotten some prerequisites since I'm doing this on an existing server. I will be going back to replicate this in the future on a clean server and will catch anything I missed there.","title":"Before you get started"},{"location":"building-cas/overview/#references","text":"CAS 6.3.x deployment - WAR Overlays","title":"References"},{"location":"cas-client/build-cas-client/","text":"Building CAS client Template setup We will have three templates for this. Two are the index.php pages that were discussed on the previous page. The third is hte cas.conf file which will be placed within /etc/httpd/conf.d/. We're only doing this for the development environment, but if you need CAS clients for prod or test, you can include a separate file for each. Only the CAS server name, or possibly the Certificate section at the end, will differ here. roles/cas-client/templates/dev-cas-client.conf.j2: LoadModule auth_cas_module modules/mod_auth_cas.so <Directory \"/var/www/html/secured-by-cas\" > <IfModule mod_auth_cas.c > AuthType CAS </IfModule> Require valid-user </Directory> <IfModule mod_auth_cas.c > CASLoginUrl https://{{ CAS_DEV_URL }}/cas/login CASValidateUrl https://{{ CAS_DEV_URL }}/cas/serviceValidate CASCookiePath /var/cache/httpd/mod_auth_cas/ CASSSOEnabled On CASDebug Off CASAttributePreffix CAS- # Set the following instead you're having issues: #LogLevel Debug #CASDebug On # Set the following if you're using a self-signed or other non-commercially signed cert # such as from a local CA CASCertificatePath /etc/pki/tls/certs/dev-cas.crt </IfModule> Setup certificate If you're using a non-commercially signed certificate - you'll need to tell the CAS client where it is. Easiest way to do this is to download that into the template directory and have a task ensure it is referenced in the CAS config. If you're using a self-signed cert, or a local certificate authority, copy that certificate to your templates directory as dev-cas.crt (it will have to be referenced by name in dev-cas-client.conf.j2 . Task setup This is a small task - but I still prefer to use sub-tasks in my main.yml file. It makes it easier to expand it later. roles/cas-client/tasks/main.yml: --- # tasks file for cas-client - include_tasks : setup-cas-client.yml - include_tasks : setup-test-pages.yml # The following is only needed if you are using a non-commercially signed cert in # your development or test environments. - include_tasks : non-commercial-cert.yml setup-cas-client.yml task Then you'll create 'setup-cas-client.yml'. It will do the following: Ensure the prerequisite packages to build the CAS client are installed Yes - some of these were installed by earlier playbooks, but you may want to have the CAS client installed on places other than the CAS server. Check if the CAS client is already installed (if so - the rest is ignored via the when statements) Download the source from Apereo's github, unpack it, configure and compile it Runs make install (to put mod_auth_cas.so in the httpd modules directory) Places the cas-client.conf into /etc/httpd/conf.d Reloads Apache httpd (if necessary) roles/cas-client/tasks/setup-cas-client.yml: --- - name : Setup prerequisite dnf packages ansible.builtin.dnf : name : - gcc - httpd - httpd-devel - libcurl-devel - libtool - make - openssl-devel - pcre-devel - php - redhat-rpm-config state : present - name : Check if CAS client is already installed ansible.builtin.stat : path : /etc/httpd/modules/mod_auth_cas.so register : cas_client - name : Check if cas client zip file exists ansible.builtin.stat : path : \"/tmp/cas-client.zip\" register : cas_client_zip # Only download source zip if it isn't already downloaded # and the CAS client isn't already installed - name : Download source zip when it doesn't already exist ansible.builtin.get_url : url : https://github.com/apereo/mod_auth_cas/archive/master.zip dest : /tmp/cas-client.zip mode : 0600 when : cas_client_zip.stat.exists == False and cas_client.stat.exists == False # Only unpack archive if the cas_client isn't already installed # and the CAS client isn't already installed - name : Unpack cas-client source archive ansible.builtin.unarchive : src : \"/tmp/cas-client.zip\" dest : /tmp/ remote_src : yes when : cas_client.stat.exists == False and cas_client.stat.exists == False # Only do this if the cas_client isn't already installed - name : Run autoreconf for CAS client ansible.builtin.command : \"autoreconf -ivf\" args : chdir : \"/tmp/mod_auth_cas-master\" when : cas_client.stat.exists == False - name : Run configure for CAS client ansible.builtin.command : \"./configure\" args : chdir : \"/tmp/mod_auth_cas-master\" when : cas_client.stat.exists == False - name : Run make for CAS client ansible.builtin.command : \"make\" args : chdir : \"/tmp/mod_auth_cas-master\" when : cas_client.stat.exists == False - name : Install CAS client ansible.builtin.command : \"make install\" args : chdir : \"/tmp/mod_auth_cas-master\" when : cas_client.stat.exists == False notify : reload httpd - name : Ensure CAS cookie directory exists ansible.builtin.file : path : /var/cache/httpd/mod_auth_cas state : directory owner : apache group : apache mode : 0700 # Replace \"login6dev\" with whatever you are using in your dev hosts # We use login6deva and login6devb as our dev cas servers so it will catch both of those - name : Setup Apache CAS config file ansible.builtin.template : src : dev-cas-client.conf.j2 dest : /etc/httpd/conf.d/cas-client.conf mode : 0644 owner : root group : root when : (\"login6dev\" in inventory_hostname) notify : reload httpd - name : \"Ensure php-fpm is set to start on boot\" ansible.builtin.systemd : name : php-fpm state : started enabled : yes setup-test-pages.yml task The following are the contents of setup-test-pages.yml, which were created on the previous page. It will just ensure the 'secured-by-cas' directory exists, and the two index.php files are placed (one in /var/www/html, one in /var/www/html/secured-by-cas) roles/cas-client/tasks/setup-test-pages.yml: --- - name : Setup CAS test index page ansible.builtin.template : src : main-index.php dest : /var/www/html/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure secured-by-cas directory exists ansible.builtin.file : path : /var/www/html/secured-by-cas state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup basic 'secured-by-cas' test index page ansible.builtin.template : src : basic-cas-check-index.php dest : /var/www/html/secured-by-cas/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) setup non-commercial-cert task If you're using a commercially signed cert, you can ignore this section. Otherwise, you'll need to do get the the public certificate of your local certificate authority or the self-signed cert of your CAS server (or load balancer), and store it in templates/. You'll need to reference the file name variable in CAS_DEV_CERT_FILE in vars/main.yml roles/cas-client/tasks/non-commercial-cert.yml: # The 'source' here - should be your self signed cert if you're using one # In our case here - this is our local certificate authority - name : Setup self-signed cert ansible.builtin.template : # Make sure to define CAS_DEV_CERT_FILE in vars/main.yml src : {{ CAS_DEV_CERT_FILE }} .crt dest : /etc/pki/tls/certs/{{ CAS_DEV_CERT_FILE }}.crt mode : 0644 owner : root group : root when : (\"login6dev\" in inventory_hostname) notify : reload httpd References Apereo's mod_auth_cas client","title":"Configure httpd to use CAS"},{"location":"cas-client/build-cas-client/#building-cas-client","text":"","title":"Building CAS client"},{"location":"cas-client/build-cas-client/#template-setup","text":"We will have three templates for this. Two are the index.php pages that were discussed on the previous page. The third is hte cas.conf file which will be placed within /etc/httpd/conf.d/. We're only doing this for the development environment, but if you need CAS clients for prod or test, you can include a separate file for each. Only the CAS server name, or possibly the Certificate section at the end, will differ here. roles/cas-client/templates/dev-cas-client.conf.j2: LoadModule auth_cas_module modules/mod_auth_cas.so <Directory \"/var/www/html/secured-by-cas\" > <IfModule mod_auth_cas.c > AuthType CAS </IfModule> Require valid-user </Directory> <IfModule mod_auth_cas.c > CASLoginUrl https://{{ CAS_DEV_URL }}/cas/login CASValidateUrl https://{{ CAS_DEV_URL }}/cas/serviceValidate CASCookiePath /var/cache/httpd/mod_auth_cas/ CASSSOEnabled On CASDebug Off CASAttributePreffix CAS- # Set the following instead you're having issues: #LogLevel Debug #CASDebug On # Set the following if you're using a self-signed or other non-commercially signed cert # such as from a local CA CASCertificatePath /etc/pki/tls/certs/dev-cas.crt </IfModule>","title":"Template setup"},{"location":"cas-client/build-cas-client/#setup-certificate","text":"If you're using a non-commercially signed certificate - you'll need to tell the CAS client where it is. Easiest way to do this is to download that into the template directory and have a task ensure it is referenced in the CAS config. If you're using a self-signed cert, or a local certificate authority, copy that certificate to your templates directory as dev-cas.crt (it will have to be referenced by name in dev-cas-client.conf.j2 .","title":"Setup certificate"},{"location":"cas-client/build-cas-client/#task-setup","text":"This is a small task - but I still prefer to use sub-tasks in my main.yml file. It makes it easier to expand it later. roles/cas-client/tasks/main.yml: --- # tasks file for cas-client - include_tasks : setup-cas-client.yml - include_tasks : setup-test-pages.yml # The following is only needed if you are using a non-commercially signed cert in # your development or test environments. - include_tasks : non-commercial-cert.yml","title":"Task setup"},{"location":"cas-client/build-cas-client/#setup-cas-clientyml-task","text":"Then you'll create 'setup-cas-client.yml'. It will do the following: Ensure the prerequisite packages to build the CAS client are installed Yes - some of these were installed by earlier playbooks, but you may want to have the CAS client installed on places other than the CAS server. Check if the CAS client is already installed (if so - the rest is ignored via the when statements) Download the source from Apereo's github, unpack it, configure and compile it Runs make install (to put mod_auth_cas.so in the httpd modules directory) Places the cas-client.conf into /etc/httpd/conf.d Reloads Apache httpd (if necessary) roles/cas-client/tasks/setup-cas-client.yml: --- - name : Setup prerequisite dnf packages ansible.builtin.dnf : name : - gcc - httpd - httpd-devel - libcurl-devel - libtool - make - openssl-devel - pcre-devel - php - redhat-rpm-config state : present - name : Check if CAS client is already installed ansible.builtin.stat : path : /etc/httpd/modules/mod_auth_cas.so register : cas_client - name : Check if cas client zip file exists ansible.builtin.stat : path : \"/tmp/cas-client.zip\" register : cas_client_zip # Only download source zip if it isn't already downloaded # and the CAS client isn't already installed - name : Download source zip when it doesn't already exist ansible.builtin.get_url : url : https://github.com/apereo/mod_auth_cas/archive/master.zip dest : /tmp/cas-client.zip mode : 0600 when : cas_client_zip.stat.exists == False and cas_client.stat.exists == False # Only unpack archive if the cas_client isn't already installed # and the CAS client isn't already installed - name : Unpack cas-client source archive ansible.builtin.unarchive : src : \"/tmp/cas-client.zip\" dest : /tmp/ remote_src : yes when : cas_client.stat.exists == False and cas_client.stat.exists == False # Only do this if the cas_client isn't already installed - name : Run autoreconf for CAS client ansible.builtin.command : \"autoreconf -ivf\" args : chdir : \"/tmp/mod_auth_cas-master\" when : cas_client.stat.exists == False - name : Run configure for CAS client ansible.builtin.command : \"./configure\" args : chdir : \"/tmp/mod_auth_cas-master\" when : cas_client.stat.exists == False - name : Run make for CAS client ansible.builtin.command : \"make\" args : chdir : \"/tmp/mod_auth_cas-master\" when : cas_client.stat.exists == False - name : Install CAS client ansible.builtin.command : \"make install\" args : chdir : \"/tmp/mod_auth_cas-master\" when : cas_client.stat.exists == False notify : reload httpd - name : Ensure CAS cookie directory exists ansible.builtin.file : path : /var/cache/httpd/mod_auth_cas state : directory owner : apache group : apache mode : 0700 # Replace \"login6dev\" with whatever you are using in your dev hosts # We use login6deva and login6devb as our dev cas servers so it will catch both of those - name : Setup Apache CAS config file ansible.builtin.template : src : dev-cas-client.conf.j2 dest : /etc/httpd/conf.d/cas-client.conf mode : 0644 owner : root group : root when : (\"login6dev\" in inventory_hostname) notify : reload httpd - name : \"Ensure php-fpm is set to start on boot\" ansible.builtin.systemd : name : php-fpm state : started enabled : yes","title":"setup-cas-client.yml task"},{"location":"cas-client/build-cas-client/#setup-test-pagesyml-task","text":"The following are the contents of setup-test-pages.yml, which were created on the previous page. It will just ensure the 'secured-by-cas' directory exists, and the two index.php files are placed (one in /var/www/html, one in /var/www/html/secured-by-cas) roles/cas-client/tasks/setup-test-pages.yml: --- - name : Setup CAS test index page ansible.builtin.template : src : main-index.php dest : /var/www/html/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure secured-by-cas directory exists ansible.builtin.file : path : /var/www/html/secured-by-cas state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup basic 'secured-by-cas' test index page ansible.builtin.template : src : basic-cas-check-index.php dest : /var/www/html/secured-by-cas/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname)","title":"setup-test-pages.yml task"},{"location":"cas-client/build-cas-client/#setup-non-commercial-cert-task","text":"If you're using a commercially signed cert, you can ignore this section. Otherwise, you'll need to do get the the public certificate of your local certificate authority or the self-signed cert of your CAS server (or load balancer), and store it in templates/. You'll need to reference the file name variable in CAS_DEV_CERT_FILE in vars/main.yml roles/cas-client/tasks/non-commercial-cert.yml: # The 'source' here - should be your self signed cert if you're using one # In our case here - this is our local certificate authority - name : Setup self-signed cert ansible.builtin.template : # Make sure to define CAS_DEV_CERT_FILE in vars/main.yml src : {{ CAS_DEV_CERT_FILE }} .crt dest : /etc/pki/tls/certs/{{ CAS_DEV_CERT_FILE }}.crt mode : 0644 owner : root group : root when : (\"login6dev\" in inventory_hostname) notify : reload httpd","title":"setup non-commercial-cert task"},{"location":"cas-client/build-cas-client/#references","text":"Apereo's mod_auth_cas client","title":"References"},{"location":"cas-client/cas-client-pages/","text":"Setting up CAS client pages To start with - we'll be creating two php pages. These will be supplemented later as we add other functionality like attribute release or MFA into the CAS serverbuild. These two example php pages should be placed in your cas-client's templates directory. Create example content The following should be called 'main-index.php' and placed in the templates directory. When deployed by the template, it will be copied to /var/www/html/index.php. It's just a collection of links that we will be adding to as we add functionality to the CAS server. roles/cas-client/templates/main-index.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS test links </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > CAS test page </ h1 > < p >< big > Click < a href = \"secured-by-cas/index.php\" > here </ a > for some secure content. </ big ></ p > </ div > </ body > </ html > The following should be called 'basic-cas-check-index.php' and should also be placed in the templates directory. When deployed by the template, it will be copied to /var/www/html/secured-by-cas/index.php. It will display information on the logged in user for test purposes. roles/cas-client/templates/basic-cas-check-index.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS basic test page </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > Secured Content </ h1 > < p >< big > This is some secure content. You should not be able to see it until you have entered your username and password. </ big ></ p > < h2 > Attributes Returned by CAS </ h2 > <?php echo \"<pre>\"; if (array_key_exists('REMOTE_USER', $_SERVER)) { echo \"REMOTE_USER = \" . $_SERVER['REMOTE_USER'] . \"<br>\"; } $headers = getallheaders(); foreach ($headers as $key => $value) { if (strpos($key, 'Cas-') === 0) { echo substr($key, 4) . \" = \" . $value . \"<br>\"; } } echo \"</pre>\"; ?> </ div > </ body > </ html >","title":"Create test/example pages"},{"location":"cas-client/cas-client-pages/#setting-up-cas-client-pages","text":"To start with - we'll be creating two php pages. These will be supplemented later as we add other functionality like attribute release or MFA into the CAS serverbuild. These two example php pages should be placed in your cas-client's templates directory.","title":"Setting up CAS client pages"},{"location":"cas-client/cas-client-pages/#create-example-content","text":"The following should be called 'main-index.php' and placed in the templates directory. When deployed by the template, it will be copied to /var/www/html/index.php. It's just a collection of links that we will be adding to as we add functionality to the CAS server. roles/cas-client/templates/main-index.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS test links </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > CAS test page </ h1 > < p >< big > Click < a href = \"secured-by-cas/index.php\" > here </ a > for some secure content. </ big ></ p > </ div > </ body > </ html > The following should be called 'basic-cas-check-index.php' and should also be placed in the templates directory. When deployed by the template, it will be copied to /var/www/html/secured-by-cas/index.php. It will display information on the logged in user for test purposes. roles/cas-client/templates/basic-cas-check-index.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS basic test page </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > Secured Content </ h1 > < p >< big > This is some secure content. You should not be able to see it until you have entered your username and password. </ big ></ p > < h2 > Attributes Returned by CAS </ h2 > <?php echo \"<pre>\"; if (array_key_exists('REMOTE_USER', $_SERVER)) { echo \"REMOTE_USER = \" . $_SERVER['REMOTE_USER'] . \"<br>\"; } $headers = getallheaders(); foreach ($headers as $key => $value) { if (strpos($key, 'Cas-') === 0) { echo substr($key, 4) . \" = \" . $value . \"<br>\"; } } echo \"</pre>\"; ?> </ div > </ body > </ html >","title":"Create example content"},{"location":"cas-client/overview/","text":"CAS Client Overview To make it easier to develop and test CAS - we should have a CAS client application. For my development environment, I just use the mod_auth_cas plugin on our CAS development servers, within Apache httpd. We'll use this CAS client to test as we go along - including as we build out extra functionality such as MFA, attribute release, service restrictions by group or other attributes, etc. As you probably noticed - I'm assuming use of Ansible at this point. My hope is that even if you're not - what I'm providing here is still usable (and you can still read what the Ansible tasks are doing) Configuring HTTPD to use CAS The mod_auth_cas plugin allows an Apache web server to interact with a CAS server via the CAS protocol. Red Hat does not offer this plugin for installation via yum however, so it must be downloaded and built from source code. We'll build the plugin via Ansible as we've done for other tasks. To start with, we'll (you guessed it) build another role so that this can be applied independently of the CAS servers. You could also use a modified version of this role if you have Apache servers that have content you want to protect via CAS (that aren't running an app that speaks CAS natively). Create Ansible role [chauvetp@ansible ~]$ cd ansible/roles/ [chauvetp@ansible roles]$ ansible-galaxy init cas-client - Role cas-client was created successfully [chauvetp@ansible roles]$ ls casclient/ defaults files handlers meta README.md tasks templates tests vars Variable setup The only variable we're using here is {{ CAS_DEV_URL }}, though you can fill in the rest if you're using it on other hosts. If your cas servers are behind a load balancer, this is the load balancer's virtual host, not the individual servers. roles/cas-client/vars/main.yml: CAS_DEV_URL : your_dev_hostname.domain.edu CAS_TEST_URL : your_test_hostname.domain.edu CAS_PROD_URL : your_prod_hostname.domain.edu # The following is needed if you're using self-signed or other non-commercially signed certs # for your dev CAS server or the load balancer in front of it CAS_DEV_CERT_FILE : your_cert_file_name Handler setup roles/cas-client/handlers/main.yml: # handlers file for cas-client - name : restart httpd service : name : \"httpd\" state : \"restarted\" - name : reload httpd service : name : \"httpd\" state : \"reloaded\"","title":"CAS client overview"},{"location":"cas-client/overview/#cas-client-overview","text":"To make it easier to develop and test CAS - we should have a CAS client application. For my development environment, I just use the mod_auth_cas plugin on our CAS development servers, within Apache httpd. We'll use this CAS client to test as we go along - including as we build out extra functionality such as MFA, attribute release, service restrictions by group or other attributes, etc. As you probably noticed - I'm assuming use of Ansible at this point. My hope is that even if you're not - what I'm providing here is still usable (and you can still read what the Ansible tasks are doing)","title":"CAS Client Overview"},{"location":"cas-client/overview/#configuring-httpd-to-use-cas","text":"The mod_auth_cas plugin allows an Apache web server to interact with a CAS server via the CAS protocol. Red Hat does not offer this plugin for installation via yum however, so it must be downloaded and built from source code. We'll build the plugin via Ansible as we've done for other tasks. To start with, we'll (you guessed it) build another role so that this can be applied independently of the CAS servers. You could also use a modified version of this role if you have Apache servers that have content you want to protect via CAS (that aren't running an app that speaks CAS natively).","title":"Configuring HTTPD to use CAS"},{"location":"cas-client/overview/#create-ansible-role","text":"[chauvetp@ansible ~]$ cd ansible/roles/ [chauvetp@ansible roles]$ ansible-galaxy init cas-client - Role cas-client was created successfully [chauvetp@ansible roles]$ ls casclient/ defaults files handlers meta README.md tasks templates tests vars","title":"Create Ansible role"},{"location":"cas-client/overview/#variable-setup","text":"The only variable we're using here is {{ CAS_DEV_URL }}, though you can fill in the rest if you're using it on other hosts. If your cas servers are behind a load balancer, this is the load balancer's virtual host, not the individual servers. roles/cas-client/vars/main.yml: CAS_DEV_URL : your_dev_hostname.domain.edu CAS_TEST_URL : your_test_hostname.domain.edu CAS_PROD_URL : your_prod_hostname.domain.edu # The following is needed if you're using self-signed or other non-commercially signed certs # for your dev CAS server or the load balancer in front of it CAS_DEV_CERT_FILE : your_cert_file_name","title":"Variable setup"},{"location":"cas-client/overview/#handler-setup","text":"roles/cas-client/handlers/main.yml: # handlers file for cas-client - name : restart httpd service : name : \"httpd\" state : \"restarted\" - name : reload httpd service : name : \"httpd\" state : \"reloaded\"","title":"Handler setup"},{"location":"cas-client/test-cas-client/","text":"Testing the CAS Client You're ready to test - just go to the root of your development CAS server (https://your-cas-server.domain.edu). If it works, when you click \"here\" on the index.php page you'll see something like: If the login works - you'll see the following (with whatever your test user is): If you get unauthorized messages, set the debug options in your CAS client config in /etc/httpd/conf.d and restart Apache, then look at the Apache logs. When I was creating these docs with a new CAS server - I had forgotten to add the locally signed cert and was getting an unauthorized message due to that (the Apache CAS client was refusing to communicate with the CAS server since it had a non-commercial cert it had no idea about).","title":"Test the application"},{"location":"cas-client/test-cas-client/#testing-the-cas-client","text":"You're ready to test - just go to the root of your development CAS server (https://your-cas-server.domain.edu). If it works, when you click \"here\" on the index.php page you'll see something like: If the login works - you'll see the following (with whatever your test user is): If you get unauthorized messages, set the debug options in your CAS client config in /etc/httpd/conf.d and restart Apache, then look at the Apache logs. When I was creating these docs with a new CAS server - I had forgotten to add the locally signed cert and was getting an unauthorized message due to that (the Apache CAS client was refusing to communicate with the CAS server since it had a non-commercial cert it had no idea about).","title":"Testing the CAS Client"},{"location":"delegated-auth/azure-oidc-incomplete/","text":"Delegated Authentication to Azure AD via OIDC This is incomplete As of when this was published - I was able to get this MOSTLY working - and this may be good enough for your environment. What wasn't working for me is that in our environment, all our CAS clients are expecting the username not the full email address or userPrincipalName. For example, in the UPN username@domain.edu, our CAS clients were expecting 'username' not 'username@newpaltz.edu'. I could not figure out (at least before getting this working via SAML) how to fix this issue. Your mileage may vary, so I'm still including this. Setup an application in Azure AD Azure Active Directory needs to have an application registered in order for CAS to delegate authentications to it. This is all done via the Azure AD portal . Go to the Azure AD portal . Click Azure Active Directory then select App Registrations Create a new application via the \"New registration\" button. Set a Name for the application. This is user visible (depending on where users look) so I recommend something clear like \"YourSchoolLogin-Dev\" , \"YourSchoolLogin-Test\" or \"YourSchoolLogin\" (for prod). Leave Support account types as the default ( Accounts in this organizational directory only ). Set your RedirectURL as follows: https://YourCASDevDomain.domain.edu/cas/login?client_name= . For example, if I chose NewPaltz-Dev in step 4, my RedirectURL is https://logindev.newpaltz.edu/cas/login?client_name=NewPaltzLogin-Dev then click Register . Note regarding application names I'd recommend not having a spaces or crazy special characters in the app name. I have only tested with alphanumeric characters along with hypnens in the client name. I don't know what Azure allows - that would cause issues with CAS, or CAS clients, etc, but I haven't had a reason to find out. Stick with the basics. Configure OIDC properties in CAS Add the following settings to roles/cas6/templates/dev-cas.properties.j2 in the cas-overlay-template directory on your Ansible server. As with other sections - we're going to use variables here since some of these properties are sensitive, and we'll leave them as variables here (and the real values will be in the Ansible cas-vault.yml file). cas.authn.pac4j.oidc[0].azure.tenant={{ AZURE_TENANT }} cas.authn.pac4j.oidc[0].azure.id={{ AZURE_CAS_APP_ID }} cas.authn.pac4j.oidc[0].azure.secret={{ AZURE_CAS_APP_SECRET }} cas.authn.pac4j.oidc[0].azure.clientName={{ AZURE_CAS_APP_NAME }} cas.authn.pac4j.oidc[0].azure.discoveryUri={{ AZURE_CAS_DISCOVERY_URI }} cas.authn.pac4j.oidc[0].azure.principalAttributeId=upn cas.authn.pac4j.oidc[0].azure.autoRedirect=false Variable setup Edit your cas-vault.yml file within roles/cas6/vars/ You'll need to add the following: AZURE_TENANT: AZURE_CAS_APP_ID: AZURE_CAS_APP_SECRET: AZURE_CAS_APP_NAME: AZURE_CAS_DISCOVERY_URI: Where to get these values AZURE_TENANT: This is the main domain within Azure. In our case, it is newpaltz.edu. I don't have experience dealing with multiple domains for this. For our environment, we have some users who use a different domain as their primary email address (like engineering.newpaltz.edu) - but that is only for sending or receiving email. Those users still login to Office 365 and Azure prompts with their username@newpaltz.edu since that is their userPrincipalName. AZURE_CAS_APP_ID: This is the Application (client) ID within the Overview of the application in Azure (Azure Active Directory -> App Registrations -> YourApp -> Overview). AZURE_CAS_APP_SECRET: To create this - do the following: Go to the app in Azure, then go to Certificates & secrets . Click New client secret Give it a name for the description field - this is not user visible but make it something clear to you like CASDevClientSecret . Choose Never for expiration (if you want - choose a 1 year or 2 year expiration - but don't forget to update/renew this in advance....). Click Add . You'll see the value we need for AZURE_CAS_APP_SECRET in the value field next to the newly created client secret. AZURE_CAS_APP_NAME: This is what you chose as the name of the app in step 4 of Setup an application in Azure AD above. AZURE_CAS_DISCOVERY_URI: To find this - go to the Overview tab of your application in Azure, then click the Endpoints button. This value is what is listed under OpenID Connect metadata document . It starts with https://login.microsoftonline.com and ends with /.well-known/openid-configuration . References CAS 6: Delegated Authentication CAS 6: Delegated Authentication with SAML2","title":"OIDC (incomplete)"},{"location":"delegated-auth/azure-oidc-incomplete/#delegated-authentication-to-azure-ad-via-oidc","text":"This is incomplete As of when this was published - I was able to get this MOSTLY working - and this may be good enough for your environment. What wasn't working for me is that in our environment, all our CAS clients are expecting the username not the full email address or userPrincipalName. For example, in the UPN username@domain.edu, our CAS clients were expecting 'username' not 'username@newpaltz.edu'. I could not figure out (at least before getting this working via SAML) how to fix this issue. Your mileage may vary, so I'm still including this.","title":"Delegated Authentication to Azure AD via OIDC"},{"location":"delegated-auth/azure-oidc-incomplete/#setup-an-application-in-azure-ad","text":"Azure Active Directory needs to have an application registered in order for CAS to delegate authentications to it. This is all done via the Azure AD portal . Go to the Azure AD portal . Click Azure Active Directory then select App Registrations Create a new application via the \"New registration\" button. Set a Name for the application. This is user visible (depending on where users look) so I recommend something clear like \"YourSchoolLogin-Dev\" , \"YourSchoolLogin-Test\" or \"YourSchoolLogin\" (for prod). Leave Support account types as the default ( Accounts in this organizational directory only ). Set your RedirectURL as follows: https://YourCASDevDomain.domain.edu/cas/login?client_name= . For example, if I chose NewPaltz-Dev in step 4, my RedirectURL is https://logindev.newpaltz.edu/cas/login?client_name=NewPaltzLogin-Dev then click Register . Note regarding application names I'd recommend not having a spaces or crazy special characters in the app name. I have only tested with alphanumeric characters along with hypnens in the client name. I don't know what Azure allows - that would cause issues with CAS, or CAS clients, etc, but I haven't had a reason to find out. Stick with the basics.","title":"Setup an application in Azure AD"},{"location":"delegated-auth/azure-oidc-incomplete/#configure-oidc-properties-in-cas","text":"Add the following settings to roles/cas6/templates/dev-cas.properties.j2 in the cas-overlay-template directory on your Ansible server. As with other sections - we're going to use variables here since some of these properties are sensitive, and we'll leave them as variables here (and the real values will be in the Ansible cas-vault.yml file). cas.authn.pac4j.oidc[0].azure.tenant={{ AZURE_TENANT }} cas.authn.pac4j.oidc[0].azure.id={{ AZURE_CAS_APP_ID }} cas.authn.pac4j.oidc[0].azure.secret={{ AZURE_CAS_APP_SECRET }} cas.authn.pac4j.oidc[0].azure.clientName={{ AZURE_CAS_APP_NAME }} cas.authn.pac4j.oidc[0].azure.discoveryUri={{ AZURE_CAS_DISCOVERY_URI }} cas.authn.pac4j.oidc[0].azure.principalAttributeId=upn cas.authn.pac4j.oidc[0].azure.autoRedirect=false","title":"Configure OIDC properties in CAS"},{"location":"delegated-auth/azure-oidc-incomplete/#variable-setup","text":"Edit your cas-vault.yml file within roles/cas6/vars/ You'll need to add the following: AZURE_TENANT: AZURE_CAS_APP_ID: AZURE_CAS_APP_SECRET: AZURE_CAS_APP_NAME: AZURE_CAS_DISCOVERY_URI:","title":"Variable setup"},{"location":"delegated-auth/azure-oidc-incomplete/#where-to-get-these-values","text":"AZURE_TENANT: This is the main domain within Azure. In our case, it is newpaltz.edu. I don't have experience dealing with multiple domains for this. For our environment, we have some users who use a different domain as their primary email address (like engineering.newpaltz.edu) - but that is only for sending or receiving email. Those users still login to Office 365 and Azure prompts with their username@newpaltz.edu since that is their userPrincipalName. AZURE_CAS_APP_ID: This is the Application (client) ID within the Overview of the application in Azure (Azure Active Directory -> App Registrations -> YourApp -> Overview). AZURE_CAS_APP_SECRET: To create this - do the following: Go to the app in Azure, then go to Certificates & secrets . Click New client secret Give it a name for the description field - this is not user visible but make it something clear to you like CASDevClientSecret . Choose Never for expiration (if you want - choose a 1 year or 2 year expiration - but don't forget to update/renew this in advance....). Click Add . You'll see the value we need for AZURE_CAS_APP_SECRET in the value field next to the newly created client secret. AZURE_CAS_APP_NAME: This is what you chose as the name of the app in step 4 of Setup an application in Azure AD above. AZURE_CAS_DISCOVERY_URI: To find this - go to the Overview tab of your application in Azure, then click the Endpoints button. This value is what is listed under OpenID Connect metadata document . It starts with https://login.microsoftonline.com and ends with /.well-known/openid-configuration .","title":"Where to get these values"},{"location":"delegated-auth/azure-oidc-incomplete/#references","text":"CAS 6: Delegated Authentication CAS 6: Delegated Authentication with SAML2","title":"References"},{"location":"delegated-auth/azure-saml/","text":"Delegated Authentication to Azure AD Optional Content This is all optional. If you don't need to delegate authentication to Azure and all of your authentication will be against an on-prem Active Directory or other LDAP/DB, then you can skip this section. Setup an application in Azure AD Azure Active Directory needs to have an application registered in order for CAS to delegate authentications to it. This is all done via the Azure AD portal . Go to the Azure AD portal . Click Enterprise Applications . At the top, click New application then Create your own application near the top left. Select Integrate any other application you don't find in the gallery (Non-gallery) , then give your app a name. This name is, at least by default, user visible (depending on where users look) so I recommend something clear like \"Your School Login-Dev\" , \"Your School Login-Test\" or \"Your School Login\" (for prod). Click Users and groups on the left. Use this section to add any users or groups who need access - though you may want to start with one or more test users. Click Single sign-on on the left, then SAML. Copy the App Federation Metadata URL - you'll need this for the DEV_AZURE_METADATA_PATH later. We're not done here yet - but need to do a few other things before we can finish - notably setting up the CAS side and the metadata there. Note regarding application names I'd recommend not having a spaces or crazy special characters in the app name. I have only tested with alphanumeric characters along with hypnens in the client name. I don't know what Azure would allow, but would cause issues with CAS, or CAS clients, etc, but I haven't had a reason to find out. Stick with the basics. Configure SAML properties in CAS Add the following settings to roles/cas6/templates/dev-cas.properties.j2 in the cas-overlay-template directory on your Ansible server. As with other sections - we're going to use variables here since some of these properties are sensitive, and we'll leave them as variables here (and the real values will be in the Ansible cas-vault.yml file). Azure SAML settings roles/cas6/templates/dev-cas-properties.j2: cas.au t h n .pac 4 j.saml [ 0 ] .keys t orePassword= {{ DEV_KEYSTORE_PASSWORD }} cas.au t h n .pac 4 j.saml [ 0 ] .priva te KeyPassword= {{ DEV_SAML_KEY_PASSWORD }} cas.au t h n .pac 4 j.saml [ 0 ] .keys t orePa t h=/e t c/cas/co nf ig/samlKeys t ore.jks cas.au t h n .pac 4 j.saml [ 0 ] .serviceProviderE nt i t yId= {{ DEV_SAML_ENTITY_ID }} cas.au t h n .pac 4 j.saml [ 0 ] .serviceProviderMe ta da ta Pa t h=/e t c/cas/co nf ig/sp - me ta da ta .xml cas.au t h n .pac 4 j.saml [ 0 ] .ide nt i t yProviderMe ta da ta Pa t h= {{ DEV_AZURE_METADATA_PATH }} cas.au t h n .pac 4 j.saml [ 0 ] .clie nt Name= {{ DEV_AZURE_APP_NAME }} cas.au t h n .pac 4 j.saml [ 0 ] .use - na me - quali f ier= false # cas.au t h n .pac 4 j.saml [ 0 ] .au t oRedirec t = true Automatic redirect Once you are done testing - if you ONLY want to delegate authentication (i.e. no local AD or LDAP auth) you may want to use the autoRedirect setting that I have commented out above. This will cause anyone who goes to CAS (either directly or via a redirect from a service) to be automatically redirected to the specified external identity provider. Variable setup Edit your cas-vault.yml file within roles/cas6/vars/ You'll need to add the following: DEV_KEYSTORE_PASSWORD : SomeS tr o n gPasswordImSure DEV_SAML_KEY_PASSWORD : SomeO t herS tr o n gPassword DEV_SAML_ENTITY_ID : ur n : mace : saml : pac 4 j : org DEV_AZURE_APP_NAME : Your School - Dev DEV_AZURE_METADATA_PATH : h tt ps : //logi n .microso ft o nl i ne .com/<some - tenant - speci f ic - i nf o>/ fe dera t io n me ta da ta / 2007-06 / fe dera t io n me ta da ta .xml?appid=<some - app - speci f ic - i nf o> Where to get these values DEV_KEYSTORE_PASSWORD: This is a password you choose to protect your SAML keystore DEV_SAML_KEY_PASSWORD: This is a password you choose to protect your SAML private key DEV_SAML_ENTITY_ID: This is unique and cannot be reused in more than one app in Azure. The 'sample' entity id is urn:mace:saml:pac4j.org . You may want to use something like urn:mace:saml:dev.yourdomain.edu . DEV_AZURE_APP_NAME: This is the name you gave the application in step 4 of Setup an application in Azure AD . DEV_AZURE_METADATA_PATH: This is from step 7 of Setup an application in Azure AD . Deploy to ONLY ONE CAS server You need to deploy this to one CAS server only to start. In order for the files below to be created (if they don't exist already) you have to start CAS - and then visit the CAS page in a browser. If you deploy to more than one it's not a huge deal - but you'll want to make sure the files below are the same in each tier (i.e. all of your prod tier has the same files, all of your dev tier has the same files, etc.). samlKeystore.jks sp-metadata.xml saml-signing-cert- .crt saml-signing-cert- .pem saml-signing-cert- .key Distributing these files via Ansible Optional of course - but if you don't do it via Ansible you'll have to make sure some other way that these are the same on a tier. Encrypt the key/pem/keystore files Copy the five files listed above to your ansible/roles/cas6/files directory rename samlKeystore.jks to samlKeystore-DEV.jks ( or some other indication that it's the dev store ) rename sp-metadata.xml to sp-metadata-DEV.xml ( or some other indication that it's the dev store ) In that directory type the following: ansible-vault encrypt saml-signing-cert-YourSchoolLogin-DEV.key saml-signing-cert-YourSchoolLogin-DEV.pem samlKeystore-DEV.jks Create an Ansible task to push those files out First update main.yml and include a reference to a new sub-task: roles/cas6/tasks/main.yml: - include_tasks : debug.yml - include_tasks : base-cas-config.yml - include_tasks : cas-ajp-proxy.yml - include_tasks : service-config.yml - include_tasks : push-saml-files.yml **roles/cas6/tasks/push-saml-files.yml - include_vars : cas-vault.yml # Note: These are for dev specifically. If we have multiple environments, there's # will be different keystores, certificates, metadata, etc., for each host. - name : Ensure saml-signing-cert .crt file (DEV) is up-to-date ansible.builtin.copy : src : saml-signing-cert-YourSchoolLogin-DEV.crt dest : /etc/cas/config/saml-signing-cert-YourSchoolLogin-DEV.crt mode : 0600 owner : tomcat group : tomcat ignore_errors : yes when : (\"login6dev\" in inventory_hostname) notify : restart tomcat - name : Ensure saml-signing-cert .key file (DEV) is up-to-date ansible.builtin.copy : src : saml-signing-cert-YourSchoolLogin-DEV.key dest : /etc/cas/config/saml-signing-cert-YourSchoolLogin-DEV.key mode : 0600 owner : tomcat group : tomcat ignore_errors : yes when : (\"login6dev\" in inventory_hostname) notify : restart tomcat - name : Ensure saml-signing-cert .pem file (DEV) is up-to-date ansible.builtin.copy : src : saml-signing-cert-YourSchoolLogin-DEV.pem dest : /etc/cas/config/saml-signing-cert-YourSchoolLogin-DEV.pem mode : 0600 owner : tomcat group : tomcat ignore_errors : yes when : (\"login6dev\" in inventory_hostname) notify : restart tomcat - name : Ensure sp-metadata.xml (DEV) is up-to-date ansible.builtin.copy : src : sp-metadata-DEV.xml dest : /etc/cas/config/sp-metadata.xml mode : 0600 owner : tomcat group : tomcat when : (\"login6dev\" in inventory_hostname) ignore_errors : yes notify : restart tomcat - name : Ensure samlKeystore.jks (DEV) is up-to-date ansible.builtin.copy : src : samlKeystore-DEV.jks dest : /etc/cas/config/samlKeystore.jks mode : 0600 owner : tomcat group : tomcat when : (\"login6dev\" in inventory_hostname) ignore_errors : yes notify : restart tomcat Why the ignore_errors setting? This is the only place so far that the 'ignore_errors' is used - and it's used for all the tasks here. You may be wondering why? The reason for this - is that when the CAS6 playbook is first being run - those files will not exist. You'll run this on one server, start up CAS, and go to the CAS login page. That will cause these files (samlKeystore.jks, sp-metadata.xml, and the various saml-signing-certs) to be created. Once you have them created on one host in a tier, you can copy them from that host to your Ansible files directory (and encrypt them if you're going to have them in git) Rerun the playbook [ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit <your_CAS_server> Vault password : Finish Azure config There's a few remaining things to do in Azure. Upload CAS metadata to Azure Have the sp-metadata.xml file available from CAS then go back to the application you created earlier in Azure (Azure AAD -> Enterprise Applications -> Search for your app) Go to the Single sign-on tab Click Upload metadata file near the top and navigate to the sp-metadata.xml file then click Add then Save Optional: Within the Properties section - you may want to set \"Visible to Users\" to no . Environment specific This is highly dependent on your own environment! In my environment this takes my userPrincipalName (chauvetp@newpaltz.edu) and transforms it to just chauvetp (ExtractMailPrefix takes the part before the @ sign). If your environment is like ours (and it may not be!) - your cas applications want to see a person's username - not their full email address or userPrincipalName as the 'cas user'. You can do a transformation within Azure to make this happen. Go to the Single Sign On section of your app in Azure again (Azure AD -> Enterprise Applications -> Your application). In section 2, User Attributes & Claims , click Edit . In the Required claim section, click on the existing claim. Change Name identifier format from Email address (which is the default in Azure) to just default Change Source from Attribute to Transformation Set Transformation to ExtractMailPrefix() Set Parameter 1 to user.userprincipalname Click Add at the bottom, then Save References CAS 6: Delegated Authentication CAS 6: Delegated Authentication with SAML2 Encrypting content with Ansible vault","title":"SAML method"},{"location":"delegated-auth/azure-saml/#delegated-authentication-to-azure-ad","text":"Optional Content This is all optional. If you don't need to delegate authentication to Azure and all of your authentication will be against an on-prem Active Directory or other LDAP/DB, then you can skip this section.","title":"Delegated Authentication to Azure AD"},{"location":"delegated-auth/azure-saml/#setup-an-application-in-azure-ad","text":"Azure Active Directory needs to have an application registered in order for CAS to delegate authentications to it. This is all done via the Azure AD portal . Go to the Azure AD portal . Click Enterprise Applications . At the top, click New application then Create your own application near the top left. Select Integrate any other application you don't find in the gallery (Non-gallery) , then give your app a name. This name is, at least by default, user visible (depending on where users look) so I recommend something clear like \"Your School Login-Dev\" , \"Your School Login-Test\" or \"Your School Login\" (for prod). Click Users and groups on the left. Use this section to add any users or groups who need access - though you may want to start with one or more test users. Click Single sign-on on the left, then SAML. Copy the App Federation Metadata URL - you'll need this for the DEV_AZURE_METADATA_PATH later. We're not done here yet - but need to do a few other things before we can finish - notably setting up the CAS side and the metadata there. Note regarding application names I'd recommend not having a spaces or crazy special characters in the app name. I have only tested with alphanumeric characters along with hypnens in the client name. I don't know what Azure would allow, but would cause issues with CAS, or CAS clients, etc, but I haven't had a reason to find out. Stick with the basics.","title":"Setup an application in Azure AD"},{"location":"delegated-auth/azure-saml/#configure-saml-properties-in-cas","text":"Add the following settings to roles/cas6/templates/dev-cas.properties.j2 in the cas-overlay-template directory on your Ansible server. As with other sections - we're going to use variables here since some of these properties are sensitive, and we'll leave them as variables here (and the real values will be in the Ansible cas-vault.yml file).","title":"Configure SAML properties in CAS"},{"location":"delegated-auth/azure-saml/#azure-saml-settings","text":"roles/cas6/templates/dev-cas-properties.j2: cas.au t h n .pac 4 j.saml [ 0 ] .keys t orePassword= {{ DEV_KEYSTORE_PASSWORD }} cas.au t h n .pac 4 j.saml [ 0 ] .priva te KeyPassword= {{ DEV_SAML_KEY_PASSWORD }} cas.au t h n .pac 4 j.saml [ 0 ] .keys t orePa t h=/e t c/cas/co nf ig/samlKeys t ore.jks cas.au t h n .pac 4 j.saml [ 0 ] .serviceProviderE nt i t yId= {{ DEV_SAML_ENTITY_ID }} cas.au t h n .pac 4 j.saml [ 0 ] .serviceProviderMe ta da ta Pa t h=/e t c/cas/co nf ig/sp - me ta da ta .xml cas.au t h n .pac 4 j.saml [ 0 ] .ide nt i t yProviderMe ta da ta Pa t h= {{ DEV_AZURE_METADATA_PATH }} cas.au t h n .pac 4 j.saml [ 0 ] .clie nt Name= {{ DEV_AZURE_APP_NAME }} cas.au t h n .pac 4 j.saml [ 0 ] .use - na me - quali f ier= false # cas.au t h n .pac 4 j.saml [ 0 ] .au t oRedirec t = true Automatic redirect Once you are done testing - if you ONLY want to delegate authentication (i.e. no local AD or LDAP auth) you may want to use the autoRedirect setting that I have commented out above. This will cause anyone who goes to CAS (either directly or via a redirect from a service) to be automatically redirected to the specified external identity provider.","title":"Azure SAML settings"},{"location":"delegated-auth/azure-saml/#variable-setup","text":"Edit your cas-vault.yml file within roles/cas6/vars/ You'll need to add the following: DEV_KEYSTORE_PASSWORD : SomeS tr o n gPasswordImSure DEV_SAML_KEY_PASSWORD : SomeO t herS tr o n gPassword DEV_SAML_ENTITY_ID : ur n : mace : saml : pac 4 j : org DEV_AZURE_APP_NAME : Your School - Dev DEV_AZURE_METADATA_PATH : h tt ps : //logi n .microso ft o nl i ne .com/<some - tenant - speci f ic - i nf o>/ fe dera t io n me ta da ta / 2007-06 / fe dera t io n me ta da ta .xml?appid=<some - app - speci f ic - i nf o>","title":"Variable setup"},{"location":"delegated-auth/azure-saml/#where-to-get-these-values","text":"DEV_KEYSTORE_PASSWORD: This is a password you choose to protect your SAML keystore DEV_SAML_KEY_PASSWORD: This is a password you choose to protect your SAML private key DEV_SAML_ENTITY_ID: This is unique and cannot be reused in more than one app in Azure. The 'sample' entity id is urn:mace:saml:pac4j.org . You may want to use something like urn:mace:saml:dev.yourdomain.edu . DEV_AZURE_APP_NAME: This is the name you gave the application in step 4 of Setup an application in Azure AD . DEV_AZURE_METADATA_PATH: This is from step 7 of Setup an application in Azure AD .","title":"Where to get these values"},{"location":"delegated-auth/azure-saml/#deploy-to-only-one-cas-server","text":"You need to deploy this to one CAS server only to start. In order for the files below to be created (if they don't exist already) you have to start CAS - and then visit the CAS page in a browser. If you deploy to more than one it's not a huge deal - but you'll want to make sure the files below are the same in each tier (i.e. all of your prod tier has the same files, all of your dev tier has the same files, etc.). samlKeystore.jks sp-metadata.xml saml-signing-cert- .crt saml-signing-cert- .pem saml-signing-cert- .key","title":"Deploy to ONLY ONE CAS server"},{"location":"delegated-auth/azure-saml/#distributing-these-files-via-ansible","text":"Optional of course - but if you don't do it via Ansible you'll have to make sure some other way that these are the same on a tier.","title":"Distributing these files via Ansible"},{"location":"delegated-auth/azure-saml/#encrypt-the-keypemkeystore-files","text":"Copy the five files listed above to your ansible/roles/cas6/files directory rename samlKeystore.jks to samlKeystore-DEV.jks ( or some other indication that it's the dev store ) rename sp-metadata.xml to sp-metadata-DEV.xml ( or some other indication that it's the dev store ) In that directory type the following: ansible-vault encrypt saml-signing-cert-YourSchoolLogin-DEV.key saml-signing-cert-YourSchoolLogin-DEV.pem samlKeystore-DEV.jks","title":"Encrypt the key/pem/keystore files"},{"location":"delegated-auth/azure-saml/#create-an-ansible-task-to-push-those-files-out","text":"First update main.yml and include a reference to a new sub-task: roles/cas6/tasks/main.yml: - include_tasks : debug.yml - include_tasks : base-cas-config.yml - include_tasks : cas-ajp-proxy.yml - include_tasks : service-config.yml - include_tasks : push-saml-files.yml **roles/cas6/tasks/push-saml-files.yml - include_vars : cas-vault.yml # Note: These are for dev specifically. If we have multiple environments, there's # will be different keystores, certificates, metadata, etc., for each host. - name : Ensure saml-signing-cert .crt file (DEV) is up-to-date ansible.builtin.copy : src : saml-signing-cert-YourSchoolLogin-DEV.crt dest : /etc/cas/config/saml-signing-cert-YourSchoolLogin-DEV.crt mode : 0600 owner : tomcat group : tomcat ignore_errors : yes when : (\"login6dev\" in inventory_hostname) notify : restart tomcat - name : Ensure saml-signing-cert .key file (DEV) is up-to-date ansible.builtin.copy : src : saml-signing-cert-YourSchoolLogin-DEV.key dest : /etc/cas/config/saml-signing-cert-YourSchoolLogin-DEV.key mode : 0600 owner : tomcat group : tomcat ignore_errors : yes when : (\"login6dev\" in inventory_hostname) notify : restart tomcat - name : Ensure saml-signing-cert .pem file (DEV) is up-to-date ansible.builtin.copy : src : saml-signing-cert-YourSchoolLogin-DEV.pem dest : /etc/cas/config/saml-signing-cert-YourSchoolLogin-DEV.pem mode : 0600 owner : tomcat group : tomcat ignore_errors : yes when : (\"login6dev\" in inventory_hostname) notify : restart tomcat - name : Ensure sp-metadata.xml (DEV) is up-to-date ansible.builtin.copy : src : sp-metadata-DEV.xml dest : /etc/cas/config/sp-metadata.xml mode : 0600 owner : tomcat group : tomcat when : (\"login6dev\" in inventory_hostname) ignore_errors : yes notify : restart tomcat - name : Ensure samlKeystore.jks (DEV) is up-to-date ansible.builtin.copy : src : samlKeystore-DEV.jks dest : /etc/cas/config/samlKeystore.jks mode : 0600 owner : tomcat group : tomcat when : (\"login6dev\" in inventory_hostname) ignore_errors : yes notify : restart tomcat Why the ignore_errors setting? This is the only place so far that the 'ignore_errors' is used - and it's used for all the tasks here. You may be wondering why? The reason for this - is that when the CAS6 playbook is first being run - those files will not exist. You'll run this on one server, start up CAS, and go to the CAS login page. That will cause these files (samlKeystore.jks, sp-metadata.xml, and the various saml-signing-certs) to be created. Once you have them created on one host in a tier, you can copy them from that host to your Ansible files directory (and encrypt them if you're going to have them in git)","title":"Create an Ansible task to push those files out"},{"location":"delegated-auth/azure-saml/#rerun-the-playbook","text":"[ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit <your_CAS_server> Vault password :","title":"Rerun the playbook"},{"location":"delegated-auth/azure-saml/#finish-azure-config","text":"There's a few remaining things to do in Azure.","title":"Finish Azure config"},{"location":"delegated-auth/azure-saml/#upload-cas-metadata-to-azure","text":"Have the sp-metadata.xml file available from CAS then go back to the application you created earlier in Azure (Azure AAD -> Enterprise Applications -> Search for your app) Go to the Single sign-on tab Click Upload metadata file near the top and navigate to the sp-metadata.xml file then click Add then Save Optional: Within the Properties section - you may want to set \"Visible to Users\" to no . Environment specific This is highly dependent on your own environment! In my environment this takes my userPrincipalName (chauvetp@newpaltz.edu) and transforms it to just chauvetp (ExtractMailPrefix takes the part before the @ sign). If your environment is like ours (and it may not be!) - your cas applications want to see a person's username - not their full email address or userPrincipalName as the 'cas user'. You can do a transformation within Azure to make this happen. Go to the Single Sign On section of your app in Azure again (Azure AD -> Enterprise Applications -> Your application). In section 2, User Attributes & Claims , click Edit . In the Required claim section, click on the existing claim. Change Name identifier format from Email address (which is the default in Azure) to just default Change Source from Attribute to Transformation Set Transformation to ExtractMailPrefix() Set Parameter 1 to user.userprincipalname Click Add at the bottom, then Save","title":"Upload CAS metadata to Azure"},{"location":"delegated-auth/azure-saml/#references","text":"CAS 6: Delegated Authentication CAS 6: Delegated Authentication with SAML2 Encrypting content with Ansible vault","title":"References"},{"location":"delegated-auth/overview/","text":"Delegated Authentication to Azure AD Optional Content This is all optional. If you don't need to delegate authentication to Azure and all of your authentication will be against an on-prem Active Directory or other LDAP/DB, then you can skip this section. As previously mentioned in the introduction, our goal here is to move our authentication from Azure AD to CAS. By delegating authentication from CAS to Azure, a user only has to login via one 'login' screen, notably Azure. This is great if you have apps which: only work with CAS (and not Azure) or you haven't had a chance to move over from CAS to Azure yet All will still work for those services. It also lets you gradually move services from CAS to Azure AD without having to move everything at once, or make your users login via multiple systems. What we want to avoid is a user going to our portal (and authenticating via CAS) and clicking a link to a service on Azure AD and having to login a second time (or vice-versa). There are two ways that I'm aware of to make this happen: OIDC (OpenID Connect) SAML (Security Assertion Markup Language) I've created documents for both in this section. Getting this all working was a pain in the neck (due to either insufficiently detailed documentation, my lack of understanding of that documentation, or some combination of both!). I ended up getting the OIDC method mostly working, but had issues with usernames (where Azure would send over the userPrincipalName, not just the CN). I was able to deal with this with SAML so I'm proceeding with that method (and I'm more experience with SAML than OIDC). I'll leave both documents up though - but only the SAML method will be complete. The steps below are the same for both methods. Add the pac4j dependency To add delegated SAML support to the CAS server, edit the build.gradle file within the cas-overlay-template directory on your build host. We're going to add a single depency for the pac4j-webflow to the one we already added for the json service registry. See the highlighted line below for the addition. cas-overlay-template/build.gradle depe n de n cies { // CAS depe n de n cies/modules may be lis te d here s tat ically... impleme ntat io n \"org.apereo.cas:cas-server-webapp-init:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-ldap:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-saml:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-duo:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-hazelcast-ticket-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-pac4j-webflow:${casServerVersion}\" } Rebuild CAS To rebuild CAS with the newest dependency built in we'll do the same thing we did with previous additions. You'll want to go to the cas-overlay-template directory and run the following and wait a moment for it to be complete: ./gradlew clean build Your cas.war file will have been updated. Copy it from cas-overlay-template/build/libs/cas.war to your roles/cas6/files","title":"Overview"},{"location":"delegated-auth/overview/#delegated-authentication-to-azure-ad","text":"Optional Content This is all optional. If you don't need to delegate authentication to Azure and all of your authentication will be against an on-prem Active Directory or other LDAP/DB, then you can skip this section. As previously mentioned in the introduction, our goal here is to move our authentication from Azure AD to CAS. By delegating authentication from CAS to Azure, a user only has to login via one 'login' screen, notably Azure. This is great if you have apps which: only work with CAS (and not Azure) or you haven't had a chance to move over from CAS to Azure yet All will still work for those services. It also lets you gradually move services from CAS to Azure AD without having to move everything at once, or make your users login via multiple systems. What we want to avoid is a user going to our portal (and authenticating via CAS) and clicking a link to a service on Azure AD and having to login a second time (or vice-versa). There are two ways that I'm aware of to make this happen: OIDC (OpenID Connect) SAML (Security Assertion Markup Language) I've created documents for both in this section. Getting this all working was a pain in the neck (due to either insufficiently detailed documentation, my lack of understanding of that documentation, or some combination of both!). I ended up getting the OIDC method mostly working, but had issues with usernames (where Azure would send over the userPrincipalName, not just the CN). I was able to deal with this with SAML so I'm proceeding with that method (and I'm more experience with SAML than OIDC). I'll leave both documents up though - but only the SAML method will be complete. The steps below are the same for both methods.","title":"Delegated Authentication to Azure AD"},{"location":"delegated-auth/overview/#add-the-pac4j-dependency","text":"To add delegated SAML support to the CAS server, edit the build.gradle file within the cas-overlay-template directory on your build host. We're going to add a single depency for the pac4j-webflow to the one we already added for the json service registry. See the highlighted line below for the addition. cas-overlay-template/build.gradle depe n de n cies { // CAS depe n de n cies/modules may be lis te d here s tat ically... impleme ntat io n \"org.apereo.cas:cas-server-webapp-init:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-ldap:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-saml:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-duo:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-hazelcast-ticket-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-pac4j-webflow:${casServerVersion}\" }","title":"Add the pac4j dependency"},{"location":"delegated-auth/overview/#rebuild-cas","text":"To rebuild CAS with the newest dependency built in we'll do the same thing we did with previous additions. You'll want to go to the cas-overlay-template directory and run the following and wait a moment for it to be complete: ./gradlew clean build Your cas.war file will have been updated. Copy it from cas-overlay-template/build/libs/cas.war to your roles/cas6/files","title":"Rebuild CAS"},{"location":"delegated-auth/testing/","text":"Testing Delegated Authentication To test this - go to your dev CAS page. You should (if you still have AD logins enabled) see two sections for logins (for now at least) - one for the local AD auth, one for Azure, as in the screenshot below. Click on the button under \" External Identity Providers \". The name on the button is what you called the app in Azure. When you click on the external identity provider, you'll be redirected to your Azure login page. Sign in as normal there. Application Consent If you have Admin Consent enabled in Azure - you'll see a page saying approval is required by an admin. You will have to make the request and have an admin approve the account in Azure (unless you're logging in now via an account that is already an admin in Azure). Your Azure Admin(s) will get an email asking for approval, or they can go to Azure Active Directory , click on \"Enterprise Applications\" then \"Admin consent requests\". The only permission requested should be \" Sign in and read user profile \". The admin can approve. If you want to restrict by users or groups, you can go: Go to Azure AD portal -> Enterprise Applications -> and search for your app. Go to Properties Make sure \"User assignment required* is set to yes. Go to Users and groups Add your users or access groups (i.e. if you have groups for faculty, staff, students, alumni, etc., add them here) Issues experienced I had a heck of a time getting this working. I want to mention a couple things that are potential issues. This is by no means comprehensive, but they're things I ran into. make sure cas.server.name in your cas properties is set to your public facing URL (i.e. if your CAS servers are behind a load balancer, make sure it is the load balancer's virtual host URL, not the actual server name). If it isn't - you'll have issues. At least when you're testing this with Azure - you'll need a real commercial cert. I'm using Let's Encrypt for these when possible so I don't have to pay for certs (at least in DEV).","title":"Testing Delegated Auth"},{"location":"delegated-auth/testing/#testing-delegated-authentication","text":"To test this - go to your dev CAS page. You should (if you still have AD logins enabled) see two sections for logins (for now at least) - one for the local AD auth, one for Azure, as in the screenshot below. Click on the button under \" External Identity Providers \". The name on the button is what you called the app in Azure. When you click on the external identity provider, you'll be redirected to your Azure login page. Sign in as normal there.","title":"Testing Delegated Authentication"},{"location":"delegated-auth/testing/#application-consent","text":"If you have Admin Consent enabled in Azure - you'll see a page saying approval is required by an admin. You will have to make the request and have an admin approve the account in Azure (unless you're logging in now via an account that is already an admin in Azure). Your Azure Admin(s) will get an email asking for approval, or they can go to Azure Active Directory , click on \"Enterprise Applications\" then \"Admin consent requests\". The only permission requested should be \" Sign in and read user profile \". The admin can approve. If you want to restrict by users or groups, you can go: Go to Azure AD portal -> Enterprise Applications -> and search for your app. Go to Properties Make sure \"User assignment required* is set to yes. Go to Users and groups Add your users or access groups (i.e. if you have groups for faculty, staff, students, alumni, etc., add them here)","title":"Application Consent"},{"location":"delegated-auth/testing/#issues-experienced","text":"I had a heck of a time getting this working. I want to mention a couple things that are potential issues. This is by no means comprehensive, but they're things I ran into. make sure cas.server.name in your cas properties is set to your public facing URL (i.e. if your CAS servers are behind a load balancer, make sure it is the load balancer's virtual host URL, not the actual server name). If it isn't - you'll have issues. At least when you're testing this with Azure - you'll need a real commercial cert. I'm using Let's Encrypt for these when possible so I don't have to pay for certs (at least in DEV).","title":"Issues experienced"},{"location":"duo-mfa/overview/","text":"MFA with Duo At New Paltz - we have Duo deployed to all students, faculty, staff, and affiliates. It is in use on any service at the CAS level that can be used to access sensitive data, or if there are other risks or compromised. Other types of MFA can be used outside of Duo of course - but I'm only focusing on Duo in this document. For more information on Duo - see their website, duo.com . I'll go over how to add Duo as a dependency, configure it in CAS (at the server-wide level, and at the service level) and within the Duo admin panel. Note regarding Duo Universal Prompt Duo is changing over to a new login system for web apps that they call the \"Universal Prompt\". Instead of the old way, where CAS (or other sites) would frame a Duo page, with the Universal Prompt, this is handled via browser redirects to a page on Duo's servers. This is supposedly ready in CAS according to the documents I've seen on the Apereo side (https://apereo.github.io/cas/6.3.x/mfa/DuoSecurity-Authentication.html#universal-prompt) but I haven't yet been able to get this working. I hope to get back to that and will update this documentation when I have that ready. Note regarding Duo in Azure and at CAS If you are eventually going to delegate authentication to Azure - you may have an issue with Duo. You can either: Enable MFA at the Azure level via conditional access and NOT at the service level in CAS (if that's the case - you will want to make sure that you only allow delegated auth so users can't use local AD auth to bypass MFA). Enable MFA at the CAS level - and set conditional access on Azure to exclude your CAS app from requiring MFA since Duo is doing it. If you enable MFA at both levels - users will have to MFA twice in a row if they are going through delegated auth (once prompted by CAS - once prompted by Azure Conditional Access). Add the duo-mfa dependency To add duo-mfa support to the CAS server, edit the build.gradle file within the cas-overlay-template directory on your build host. We're going to add a single depency to the one we already added for the json service registry. See the highlighted line below for the addition. cas-overlay-template/build.gradle depe n de n cies { // O t her CAS depe n de n cies/modules may be lis te d here... // impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-webapp-init:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-ldap:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-saml:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-duo:${casServerVersion}\" } Rebuild CAS To rebuild CAS with the newest dependency built in we'll do the same thing we did when adding the json service registry. You'll want to go to the cas-overlay-template directory and run the following and wait a moment for it to be complete: ./gradlew clean build Your cas.war file will have been updated. Copy it from cas-overlay-template/build/libs/cas.war to your roles/cas6/files Note You may or may not care - but this is the point I gave up on CAS 6.2 in favor of 6.3. I could not get CAS 6.2 to build the Duo MFA module - it kept complaining about dependency issues, so I moved over to 6.3 without any issues. Create a new Duo protected application This needs to be done in the Duo Administrator Console Login to the Duo Admin Console Go to Applications on the left then the Protect an application button Type CAS in the search box, then click Protect next to CAS (Central Authentication Service) Scroll down to the Settings section and choose an application name. This will be visible to your users when they get a push notification, so at least for your production CAS/Duo - you should choose something user friendly like \" YourSchool Login (DEV) \". Make any other changes you need for it (for example, if you want users to be able to add or remove devices after they've verified with an existing device, check the \"Let users remove devices, add new devices, and reactivate Duo Mobile\" check box). Click Save. The three values (API hostname, secret key, and integration key) will be needed shortly. Create Duo application key The duoApplicationKey value is a string, at least 40 characters long, that is generated locally and is not shared with Duo. The CAS documentation offers the procedure below for generating this string. Obviously - you should generate your own and don't share it. [ root@login6deva ~ ] # python3 Python 3 .6.8 ( default, Aug 18 2020 , 08 :33:21 ) [ GCC 8 .3.1 20191121 ( Red Hat 8 .3.1-5 )] on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. >>> import os, hashlib >>> akey = hashlib.sha1 ( os.urandom ( 32 )) .hexdigest () >>> print ( akey ) 9941db238a6e75ec188fd12fcf6813191894f7c1 >>> exit () Configure Duo properties in CAS Add the following settings to roles/cas6/templates/dev-cas.properties.j2 in the cas-overlay-template directory on your Ansible server. As with other sections - we're going to use variables here since some of the Duo info is sensitive, and we'll leave them as variables here (and the real values will be in the Ansible cas-vault.yml file). cas.authn.mfa.duo[0].duoApiHost: {{ DEV_DUO_API_HOST }} cas.authn.mfa.duo[0].duoIntegrationKey: {{ DEV_DUO_IKEY }} cas.authn.mfa.duo[0].duoSecretKey: {{ DEV_DUO_SKEY }} cas.authn.mfa.duo[0].duoApplicationKey: {{ DEV_DUO_AKEY }} Variable setup Edit your cas-vault.yml file within roles/cas6/vars/ Fill in values for {{ DEV_DUO_API_HOST }}, {{ DEV_DUO_IKEY }}, {{ DEV_DUO_SKEY }}, and {{ DEV_DUO_AKEY }}. It should now look like the following (after opening with ansible-vault edit cas-vault.yml). roles/cas6/vars/cas-vault.yml # As previously mentioned - these are not my real keys DEV_TGC_SIGNING_KEY : WEebZqgDjfKJei0XM-owdfueb3lZ3lyKKXAL8wLUoLfc2qTFWyBmYxVQBSLslau70uJH_gGM5teTqgbDD3Xcag DEV_TGC_ENCRYPTION_KEY : zyTzo8eMzToxP9_Kmk33iFVKVFMJD8873ZGA9Z_2Fco DEV_WEBFLOW_SIGNING_KEY : _mUEdBjyFlfbvKaGPnAtIbQ7sEkMO2A57lCu3OKz835NeNZqcOCsVo6WmCc95TMgdmahP-aP1lXBpqjd4rU2-g DEV_WEBFLOW_ENCRYPTION_KEY : JnGirTeE8yp3Jp/Mg9Z5Pg== # You will have to change these for your own environment AD_SERVER_0 : server.domain.edu AD_BASE_DN_0 : dc=subdomain,dc=domain,dc=edu AD_DN_FORMAT_0 : CN=%s,OU=active,DC=subdomain,DC=domain,DC=edu AD_BIND_USER_0 : CN=bindusername,CN=users,DC=subdomain,DC=domain,DC=edu AD_BIND_PASSWORD_0 : SomeStrongPasswordIAssume # If you have other servers or organizational units, you can list them here AD_SERVER_1 : other-server.domain.edu AD_BASE_DN_1 : dc=subdomain,dc=domain,dc=edu AD_DN_FORMAT_1 : CN=%s,OU=alumni,DC=subdomain,DC=domain,DC=edu AD_BIND_USER_1 : CN=bindusername,CN=users,DC=subdomain,DC=domain,DC=edu AD_BIND_PASSWORD_1 : SomeStrongPasswordIAssume # Duo DEV_DUO_API_HOST : # Your API Hostname from your application in the Duo Admin panel DEV_DUO_IKEY : # Your integration key from your application in the Duo Admin panel DEV_DUO_SKEY : # Your secret key from your application in the Duo Admin panel DEV_DUO_AKEY : # Your integration key from your application in the Duo Admin panel References Duo & CAS CAS 6: Multifactor Authentication CAS 6: Getting Started - MFA via Duo","title":"Overview"},{"location":"duo-mfa/overview/#mfa-with-duo","text":"At New Paltz - we have Duo deployed to all students, faculty, staff, and affiliates. It is in use on any service at the CAS level that can be used to access sensitive data, or if there are other risks or compromised. Other types of MFA can be used outside of Duo of course - but I'm only focusing on Duo in this document. For more information on Duo - see their website, duo.com . I'll go over how to add Duo as a dependency, configure it in CAS (at the server-wide level, and at the service level) and within the Duo admin panel. Note regarding Duo Universal Prompt Duo is changing over to a new login system for web apps that they call the \"Universal Prompt\". Instead of the old way, where CAS (or other sites) would frame a Duo page, with the Universal Prompt, this is handled via browser redirects to a page on Duo's servers. This is supposedly ready in CAS according to the documents I've seen on the Apereo side (https://apereo.github.io/cas/6.3.x/mfa/DuoSecurity-Authentication.html#universal-prompt) but I haven't yet been able to get this working. I hope to get back to that and will update this documentation when I have that ready. Note regarding Duo in Azure and at CAS If you are eventually going to delegate authentication to Azure - you may have an issue with Duo. You can either: Enable MFA at the Azure level via conditional access and NOT at the service level in CAS (if that's the case - you will want to make sure that you only allow delegated auth so users can't use local AD auth to bypass MFA). Enable MFA at the CAS level - and set conditional access on Azure to exclude your CAS app from requiring MFA since Duo is doing it. If you enable MFA at both levels - users will have to MFA twice in a row if they are going through delegated auth (once prompted by CAS - once prompted by Azure Conditional Access).","title":"MFA with Duo"},{"location":"duo-mfa/overview/#add-the-duo-mfa-dependency","text":"To add duo-mfa support to the CAS server, edit the build.gradle file within the cas-overlay-template directory on your build host. We're going to add a single depency to the one we already added for the json service registry. See the highlighted line below for the addition. cas-overlay-template/build.gradle depe n de n cies { // O t her CAS depe n de n cies/modules may be lis te d here... // impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-webapp-init:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-ldap:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-saml:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-duo:${casServerVersion}\" }","title":"Add the duo-mfa dependency"},{"location":"duo-mfa/overview/#rebuild-cas","text":"To rebuild CAS with the newest dependency built in we'll do the same thing we did when adding the json service registry. You'll want to go to the cas-overlay-template directory and run the following and wait a moment for it to be complete: ./gradlew clean build Your cas.war file will have been updated. Copy it from cas-overlay-template/build/libs/cas.war to your roles/cas6/files Note You may or may not care - but this is the point I gave up on CAS 6.2 in favor of 6.3. I could not get CAS 6.2 to build the Duo MFA module - it kept complaining about dependency issues, so I moved over to 6.3 without any issues.","title":"Rebuild CAS"},{"location":"duo-mfa/overview/#create-a-new-duo-protected-application","text":"This needs to be done in the Duo Administrator Console Login to the Duo Admin Console Go to Applications on the left then the Protect an application button Type CAS in the search box, then click Protect next to CAS (Central Authentication Service) Scroll down to the Settings section and choose an application name. This will be visible to your users when they get a push notification, so at least for your production CAS/Duo - you should choose something user friendly like \" YourSchool Login (DEV) \". Make any other changes you need for it (for example, if you want users to be able to add or remove devices after they've verified with an existing device, check the \"Let users remove devices, add new devices, and reactivate Duo Mobile\" check box). Click Save. The three values (API hostname, secret key, and integration key) will be needed shortly.","title":"Create a new Duo protected application"},{"location":"duo-mfa/overview/#create-duo-application-key","text":"The duoApplicationKey value is a string, at least 40 characters long, that is generated locally and is not shared with Duo. The CAS documentation offers the procedure below for generating this string. Obviously - you should generate your own and don't share it. [ root@login6deva ~ ] # python3 Python 3 .6.8 ( default, Aug 18 2020 , 08 :33:21 ) [ GCC 8 .3.1 20191121 ( Red Hat 8 .3.1-5 )] on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. >>> import os, hashlib >>> akey = hashlib.sha1 ( os.urandom ( 32 )) .hexdigest () >>> print ( akey ) 9941db238a6e75ec188fd12fcf6813191894f7c1 >>> exit ()","title":"Create Duo application key"},{"location":"duo-mfa/overview/#configure-duo-properties-in-cas","text":"Add the following settings to roles/cas6/templates/dev-cas.properties.j2 in the cas-overlay-template directory on your Ansible server. As with other sections - we're going to use variables here since some of the Duo info is sensitive, and we'll leave them as variables here (and the real values will be in the Ansible cas-vault.yml file). cas.authn.mfa.duo[0].duoApiHost: {{ DEV_DUO_API_HOST }} cas.authn.mfa.duo[0].duoIntegrationKey: {{ DEV_DUO_IKEY }} cas.authn.mfa.duo[0].duoSecretKey: {{ DEV_DUO_SKEY }} cas.authn.mfa.duo[0].duoApplicationKey: {{ DEV_DUO_AKEY }}","title":"Configure Duo properties in CAS"},{"location":"duo-mfa/overview/#variable-setup","text":"Edit your cas-vault.yml file within roles/cas6/vars/ Fill in values for {{ DEV_DUO_API_HOST }}, {{ DEV_DUO_IKEY }}, {{ DEV_DUO_SKEY }}, and {{ DEV_DUO_AKEY }}. It should now look like the following (after opening with ansible-vault edit cas-vault.yml). roles/cas6/vars/cas-vault.yml # As previously mentioned - these are not my real keys DEV_TGC_SIGNING_KEY : WEebZqgDjfKJei0XM-owdfueb3lZ3lyKKXAL8wLUoLfc2qTFWyBmYxVQBSLslau70uJH_gGM5teTqgbDD3Xcag DEV_TGC_ENCRYPTION_KEY : zyTzo8eMzToxP9_Kmk33iFVKVFMJD8873ZGA9Z_2Fco DEV_WEBFLOW_SIGNING_KEY : _mUEdBjyFlfbvKaGPnAtIbQ7sEkMO2A57lCu3OKz835NeNZqcOCsVo6WmCc95TMgdmahP-aP1lXBpqjd4rU2-g DEV_WEBFLOW_ENCRYPTION_KEY : JnGirTeE8yp3Jp/Mg9Z5Pg== # You will have to change these for your own environment AD_SERVER_0 : server.domain.edu AD_BASE_DN_0 : dc=subdomain,dc=domain,dc=edu AD_DN_FORMAT_0 : CN=%s,OU=active,DC=subdomain,DC=domain,DC=edu AD_BIND_USER_0 : CN=bindusername,CN=users,DC=subdomain,DC=domain,DC=edu AD_BIND_PASSWORD_0 : SomeStrongPasswordIAssume # If you have other servers or organizational units, you can list them here AD_SERVER_1 : other-server.domain.edu AD_BASE_DN_1 : dc=subdomain,dc=domain,dc=edu AD_DN_FORMAT_1 : CN=%s,OU=alumni,DC=subdomain,DC=domain,DC=edu AD_BIND_USER_1 : CN=bindusername,CN=users,DC=subdomain,DC=domain,DC=edu AD_BIND_PASSWORD_1 : SomeStrongPasswordIAssume # Duo DEV_DUO_API_HOST : # Your API Hostname from your application in the Duo Admin panel DEV_DUO_IKEY : # Your integration key from your application in the Duo Admin panel DEV_DUO_SKEY : # Your secret key from your application in the Duo Admin panel DEV_DUO_AKEY : # Your integration key from your application in the Duo Admin panel","title":"Variable setup"},{"location":"duo-mfa/overview/#references","text":"Duo & CAS CAS 6: Multifactor Authentication CAS 6: Getting Started - MFA via Duo","title":"References"},{"location":"duo-mfa/testing-mfa/","text":"Testing Duo MFA First - go to your CAS client index page and select the Duo MFA test link. Then, login with a user that exists in your directory and exists in Duo. You should note the specific Duo test service name ( Apache Test - Duo MFA in my example). If you don't see that - you may have an error in your service or in your Apache config, causing another service to pick up instead. You should, if all is working correctly, see the Duo prompt framed within the CAS window. In the screenshot below, I'm prompted for three options of second factor. * Send me a push - this will send a push notice to my phone with the Duo app installed. I can click \"Approve\" or \"Deny\" there. Note: If you use this option, the Duo app will show the client name that we called this within the Duo admin panel. * Enter a passcode - this is a passcode either from the Duo app or a one-time-passcode (OTP) token * The blue \"Use your Security Key to login\" message is because I also have a Yubikey Security Key, acting as a Fido U2F (Universal Two Factor). I can use any of these to login - but what options you or your users have depends on how you are using Duo. After logging in - you should see your php test page in the Duo client which will show the attributes that are resolved.","title":"Test Duo MFA"},{"location":"duo-mfa/testing-mfa/#testing-duo-mfa","text":"First - go to your CAS client index page and select the Duo MFA test link. Then, login with a user that exists in your directory and exists in Duo. You should note the specific Duo test service name ( Apache Test - Duo MFA in my example). If you don't see that - you may have an error in your service or in your Apache config, causing another service to pick up instead. You should, if all is working correctly, see the Duo prompt framed within the CAS window. In the screenshot below, I'm prompted for three options of second factor. * Send me a push - this will send a push notice to my phone with the Duo app installed. I can click \"Approve\" or \"Deny\" there. Note: If you use this option, the Duo app will show the client name that we called this within the Duo admin panel. * Enter a passcode - this is a passcode either from the Duo app or a one-time-passcode (OTP) token * The blue \"Use your Security Key to login\" message is because I also have a Yubikey Security Key, acting as a Fido U2F (Universal Two Factor). I can use any of these to login - but what options you or your users have depends on how you are using Duo. After logging in - you should see your php test page in the Duo client which will show the attributes that are resolved.","title":"Testing Duo MFA"},{"location":"duo-mfa/update-cas-client/","text":"Update the CAS client We've made the CAS server side changes (though not deployed them yet) but we need to change the CAS client side, both the Apache config, and the php pages. Update mod_auth_cas settings Edit the def-cas-client.conf.j2 file in roles/cas-client/templates/ . The only thing to do here is create another directory configuration for our duo-secured service When done it will look like this - with the new additions highlighted roles/cas-client/templates/dev-cas-client.conf.j2 LoadModule auth_cas_module modules/mod_auth_cas.so # this is our basic config from earlier <Directory \"/var/www/html/secured-by-cas\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> # Return all attribute directory <Directory \"/var/www/html/return-all\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> # Return mapped attributes directory <Directory \"/var/www/html/return-mapped\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> # Duo MFA test directory <Directory \"/var/www/html/duo-secured\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> <IfModule mod_auth_cas.c > CASLoginUrl https://{{ CAS_DEV_URL }}/cas/login CASValidateUrl https://{{ CAS_DEV_URL }}/cas/samlValidate CASCookiePath /var/cache/httpd/mod_auth_cas/ CASSSOEnabled On CASValidateSAML On CASAttributePreffix CAS- CASDebug Off CASCertificatePath /etc/pki/tls/certs/np-ca.crt </IfModule> Update the PHP page templates Edit the existing main-index file to reference the Duo page roles/cas-client/templates/main-index.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS client test page </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > CAS client test page </ h1 > < p >< big > Click < a href = \"secured-by-cas/index.php\" > here </ a > for our basic test. </ big ></ p > < p >< big > Click < a href = \"return-all/index.php\" > here </ a > for our 'return all attributes' test. </ big ></ p > < p >< big > Click < a href = \"return-mapped/index.php\" > here </ a > for our 'return mapped attributes' test. </ big ></ p > < p >< big > Click < a href = \"duo-secured/index.php\" > here </ a > for our 'Duo MFA' test. </ big ></ p > </ div > </ body > </ html > Create a new 'duo-secured-index.php' index file This can be identical to the previously created basic-cas-check-index.php file - you can just update the title page and/or text. roles/cas-client/templates/return-all.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS Duo MFA test page </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > CAS Duo MFA test page </ h1 > < h2 > Attributes Returned by CAS </ h2 > <?php echo \"<pre>\"; if (array_key_exists('REMOTE_USER', $_SERVER)) { echo \"REMOTE_USER = \" . $_SERVER['REMOTE_USER'] . \"<br>\"; } $headers = getallheaders(); foreach ($headers as $key => $value) { if (strpos($key, 'Cas-') === 0) { echo substr($key, 4) . \" = \" . $value . \"<br>\"; } } echo \"</pre>\"; ?> </ div > </ body > </ html > Update the CAS client Ansible role Edit the setup-test-pages.yml file in roles/cas-client/tasks to ensure the directories are created and the new files are copied over. The newly added content is highlighted. roles/cas-client/tasks/setup-test-pages.yml: --- - name : Setup CAS test index page ansible.builtin.template : src : main-index.php dest : /var/www/html/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure secured-by-cas directory exists ansible.builtin.file : path : /var/www/html/secured-by-cas state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup basic 'secured-by-cas' test index page ansible.builtin.template : src : basic-cas-check-index.php dest : /var/www/html/secured-by-cas/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure return-all directory exists ansible.builtin.file : path : /var/www/html/return-all state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup return-all index page ansible.builtin.template : src : return-all-index.php dest : /var/www/html/return-all/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure return-mapped directory exists ansible.builtin.file : path : /var/www/html/return-mapped state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup return-mapped index page ansible.builtin.template : src : return-mapped-index.php dest : /var/www/html/return-mapped/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure duo-secured directory exists ansible.builtin.file : path : /var/www/html/duo-secured state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup duo-secured index page ansible.builtin.template : src : duo-secured-index.php dest : /var/www/html/duo-secured/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) Create a duo-secured service definition We're going to add a new service - with another high evaluation order (85000). To follow the naming scheme we used earlier , you'll first need a unique ID. As with last time, its recommended that you use the date +%s command to get the datetime in unix epoch format. For my example, I have 1614372813 as that ID. I'm thus calling my service file ApacheTestDuo-1614372813.json and placing it in the roles/cas6/templates/dev-services directory. You'll need to make sure the serviceID matches the host with your CAS client and the id is updated to match what you have in your file name. We're using the ReturnAllAttributeReleasePolicy here (which again - you may not want or need to use in production). roles/cas6/templates/dev-services/ApacheTestDuo-1614372813.json: { \"@class\" : \"org.apereo.cas.services.RegexRegisteredService\" , \"serviceId\" : \"^https://logindev.newpaltz.edu/duo-secured(\\\\z|/.*)\" , \"name\" : \"Apache Test - Duo MFA\" , \"id\" : 1614372813 , \"description\" : \"Apache Test - Duo MFA\" , \"attributeReleasePolicy\" : { \"@class\" : \"org.apereo.cas.services.ReturnAllAttributeReleasePolicy\" }, \"multifactorPolicy\" : { \"@class\" : \"org.apereo.cas.services.DefaultRegisteredServiceMultifactorPolicy\" , \"multifactorAuthenticationProviders\" : [ \"java.util.LinkedHashSet\" , [ \"mfa-duo\" ] ] }, \"evaluationOrder\" : 85000 } Rerun the playbook [ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit <your_CAS_server> Vault password :","title":"Update CAS client"},{"location":"duo-mfa/update-cas-client/#update-the-cas-client","text":"We've made the CAS server side changes (though not deployed them yet) but we need to change the CAS client side, both the Apache config, and the php pages.","title":"Update the CAS client"},{"location":"duo-mfa/update-cas-client/#update-mod_auth_cas-settings","text":"Edit the def-cas-client.conf.j2 file in roles/cas-client/templates/ . The only thing to do here is create another directory configuration for our duo-secured service When done it will look like this - with the new additions highlighted roles/cas-client/templates/dev-cas-client.conf.j2 LoadModule auth_cas_module modules/mod_auth_cas.so # this is our basic config from earlier <Directory \"/var/www/html/secured-by-cas\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> # Return all attribute directory <Directory \"/var/www/html/return-all\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> # Return mapped attributes directory <Directory \"/var/www/html/return-mapped\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> # Duo MFA test directory <Directory \"/var/www/html/duo-secured\" > <IfModule mod_auth_cas.c > AuthType CAS CASAuthNHeader On </IfModule> Require valid-user </Directory> <IfModule mod_auth_cas.c > CASLoginUrl https://{{ CAS_DEV_URL }}/cas/login CASValidateUrl https://{{ CAS_DEV_URL }}/cas/samlValidate CASCookiePath /var/cache/httpd/mod_auth_cas/ CASSSOEnabled On CASValidateSAML On CASAttributePreffix CAS- CASDebug Off CASCertificatePath /etc/pki/tls/certs/np-ca.crt </IfModule>","title":"Update mod_auth_cas settings"},{"location":"duo-mfa/update-cas-client/#update-the-php-page-templates","text":"","title":"Update the PHP page templates"},{"location":"duo-mfa/update-cas-client/#edit-the-existing-main-index-file-to-reference-the-duo-page","text":"roles/cas-client/templates/main-index.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS client test page </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > CAS client test page </ h1 > < p >< big > Click < a href = \"secured-by-cas/index.php\" > here </ a > for our basic test. </ big ></ p > < p >< big > Click < a href = \"return-all/index.php\" > here </ a > for our 'return all attributes' test. </ big ></ p > < p >< big > Click < a href = \"return-mapped/index.php\" > here </ a > for our 'return mapped attributes' test. </ big ></ p > < p >< big > Click < a href = \"duo-secured/index.php\" > here </ a > for our 'Duo MFA' test. </ big ></ p > </ div > </ body > </ html >","title":"Edit the existing main-index file to reference the Duo page"},{"location":"duo-mfa/update-cas-client/#create-a-new-duo-secured-indexphp-index-file","text":"This can be identical to the previously created basic-cas-check-index.php file - you can just update the title page and/or text. roles/cas-client/templates/return-all.php: <!DOCTYPE html> < html lang = \"en\" > < head > < title > CAS Duo MFA test page </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" > </ head > < body > < div class = \"container\" > < h1 > CAS Duo MFA test page </ h1 > < h2 > Attributes Returned by CAS </ h2 > <?php echo \"<pre>\"; if (array_key_exists('REMOTE_USER', $_SERVER)) { echo \"REMOTE_USER = \" . $_SERVER['REMOTE_USER'] . \"<br>\"; } $headers = getallheaders(); foreach ($headers as $key => $value) { if (strpos($key, 'Cas-') === 0) { echo substr($key, 4) . \" = \" . $value . \"<br>\"; } } echo \"</pre>\"; ?> </ div > </ body > </ html >","title":"Create a new 'duo-secured-index.php' index file"},{"location":"duo-mfa/update-cas-client/#update-the-cas-client-ansible-role","text":"Edit the setup-test-pages.yml file in roles/cas-client/tasks to ensure the directories are created and the new files are copied over. The newly added content is highlighted. roles/cas-client/tasks/setup-test-pages.yml: --- - name : Setup CAS test index page ansible.builtin.template : src : main-index.php dest : /var/www/html/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure secured-by-cas directory exists ansible.builtin.file : path : /var/www/html/secured-by-cas state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup basic 'secured-by-cas' test index page ansible.builtin.template : src : basic-cas-check-index.php dest : /var/www/html/secured-by-cas/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure return-all directory exists ansible.builtin.file : path : /var/www/html/return-all state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup return-all index page ansible.builtin.template : src : return-all-index.php dest : /var/www/html/return-all/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure return-mapped directory exists ansible.builtin.file : path : /var/www/html/return-mapped state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup return-mapped index page ansible.builtin.template : src : return-mapped-index.php dest : /var/www/html/return-mapped/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname) - name : Ensure duo-secured directory exists ansible.builtin.file : path : /var/www/html/duo-secured state : directory owner : root group : root mode : 0755 when : (\"login6dev\" in inventory_hostname) - name : Setup duo-secured index page ansible.builtin.template : src : duo-secured-index.php dest : /var/www/html/duo-secured/index.php mode : 0755 owner : root group : root when : (\"login6dev\" in inventory_hostname)","title":"Update the CAS client Ansible role"},{"location":"duo-mfa/update-cas-client/#create-a-duo-secured-service-definition","text":"We're going to add a new service - with another high evaluation order (85000). To follow the naming scheme we used earlier , you'll first need a unique ID. As with last time, its recommended that you use the date +%s command to get the datetime in unix epoch format. For my example, I have 1614372813 as that ID. I'm thus calling my service file ApacheTestDuo-1614372813.json and placing it in the roles/cas6/templates/dev-services directory. You'll need to make sure the serviceID matches the host with your CAS client and the id is updated to match what you have in your file name. We're using the ReturnAllAttributeReleasePolicy here (which again - you may not want or need to use in production). roles/cas6/templates/dev-services/ApacheTestDuo-1614372813.json: { \"@class\" : \"org.apereo.cas.services.RegexRegisteredService\" , \"serviceId\" : \"^https://logindev.newpaltz.edu/duo-secured(\\\\z|/.*)\" , \"name\" : \"Apache Test - Duo MFA\" , \"id\" : 1614372813 , \"description\" : \"Apache Test - Duo MFA\" , \"attributeReleasePolicy\" : { \"@class\" : \"org.apereo.cas.services.ReturnAllAttributeReleasePolicy\" }, \"multifactorPolicy\" : { \"@class\" : \"org.apereo.cas.services.DefaultRegisteredServiceMultifactorPolicy\" , \"multifactorAuthenticationProviders\" : [ \"java.util.LinkedHashSet\" , [ \"mfa-duo\" ] ] }, \"evaluationOrder\" : 85000 }","title":"Create a duo-secured service definition"},{"location":"duo-mfa/update-cas-client/#rerun-the-playbook","text":"[ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit <your_CAS_server> Vault password :","title":"Rerun the playbook"},{"location":"final-setup/overview/","text":"Final Tasks So I've got way too many pages here. I've gone through enough steps here that I'm glad I documented them for myself, even if no one else uses this! Here are the steps I've taken to move from using a development environment for CAS, to moving to TEST. In our environment, TEST is not just for testing CAS. It's for authentication for non-production applications. These steps will be replicated for production. Update your /etc/ansible/hosts to refer to your new systems. Here are mine as an example (note - you don't need the vmware_name or vmware_folder stuff here for the CAS/Tomcat stuff. They are used in other playbooks I have, like those that take snapshots in VMWare before patching or major changes). logi n 6 testa vmware_ na me= \"Login6TestA (CAS 6 Test 1)\" vmware_ f older= \"/Computer Services/vm/CAS Authentication Servers\" a ns ible_py t ho n _i nter pre ter =/usr/libexec/pla tf orm - py t ho n apache_domai ns = \"logintest.newpaltz.edu login6testa.newpaltz.edu\" t omca t _major_ver= 9.0 t omca t _ver= 9.0.45 jdk_versio n = 11 logi n 6 test b vmware_ na me= \"Login6TestB (CAS 6 Test 2)\" vmware_ f older= \"/Computer Services/vm/CAS Authentication Servers\" a ns ible_py t ho n _i nter pre ter =/usr/libexec/pla tf orm - py t ho n apache_domai ns = \"logintest.newpaltz.edu login6testb.newpaltz.edu\" t omca t _major_ver= 9.0 t omca t _ver= 9.0.45 jdk_versio n = 11 Build two or more new hosts. For our test environment, I call these 'login6testa' and 'login6testb'. Use whatever your existing build process for them is. For us - we use Ansible to build VMs via Kickstart. Maybe I'll get into that in the future here. Set your site.yml to include the roles you want to use. For my environment, I use a few that aren't covered here (such as for security hardening, setting content-security-policies, or setting up apache-http), but those that are relevant for CAS are: apache-tomcat cas6 cas6-client (not needed in production - but I still use this in test) Generate the various keys (see the Generating all necessary keys section near the bottom of the initial CAS config ) and place them in your cas-vault.yml file. Create your Azure app as per the Azure SAML page. Get the metadata URL and put it in your cas-vault.yml Ensure you have created a test-cas.properties.j2 file - and set the variable names correctly (changing DEV_ to TEST_ in variable names when appropriate, and setting cas.server.name to your load balanced virtual host). Populate at least one service into your roles/cas6/templates/test-services directory Ensure your playbooks have sections for TEST configs - not just DEV Run your Ansible playbook on ONE of the servers. ansible-playbook site.yml --ask-vault-pass --limit login6testa Place only one of the servers as active in your load balancer - then visit the site. It will generate the various saml-signing-cert files, sp-metadata.xml, and samlKeystore.jks Copy these files to your roles/cas6/files directory - but rename the sp-metadata.xml and samlKeystore.jks to be tier specific (i.e. sp-metadata-TEST.xml and samlKeystore-TEST.jks). You can then re-run the playbook on the other server(s) this will now push the sp-metadata.xml, samlKeystore, and saml-signing-cert files that were generated on the first host so they are the same in others in the tier. ansible-playbook site.yml --ask-vault-pass --limit login6testa Finish your Azure setup (see \"Finish Azure config\" section of the Azure SAML page). Restart tomcat on both hosts (not sure this is necessary - but it's a one time thing). Delegated auth should work now on your new tier. Is this really easier than doing it without Ansible? To do it once - definitely not. To make it repeatable and to maintain configs, service settings, Tomcat upgrades, and more - for me at least make Ansible essential for this. Maybe that's because I have too much work - but I'm sure I'm not the only one reading this who has too much work!","title":"Final tasks"},{"location":"final-setup/overview/#final-tasks","text":"So I've got way too many pages here. I've gone through enough steps here that I'm glad I documented them for myself, even if no one else uses this! Here are the steps I've taken to move from using a development environment for CAS, to moving to TEST. In our environment, TEST is not just for testing CAS. It's for authentication for non-production applications. These steps will be replicated for production. Update your /etc/ansible/hosts to refer to your new systems. Here are mine as an example (note - you don't need the vmware_name or vmware_folder stuff here for the CAS/Tomcat stuff. They are used in other playbooks I have, like those that take snapshots in VMWare before patching or major changes). logi n 6 testa vmware_ na me= \"Login6TestA (CAS 6 Test 1)\" vmware_ f older= \"/Computer Services/vm/CAS Authentication Servers\" a ns ible_py t ho n _i nter pre ter =/usr/libexec/pla tf orm - py t ho n apache_domai ns = \"logintest.newpaltz.edu login6testa.newpaltz.edu\" t omca t _major_ver= 9.0 t omca t _ver= 9.0.45 jdk_versio n = 11 logi n 6 test b vmware_ na me= \"Login6TestB (CAS 6 Test 2)\" vmware_ f older= \"/Computer Services/vm/CAS Authentication Servers\" a ns ible_py t ho n _i nter pre ter =/usr/libexec/pla tf orm - py t ho n apache_domai ns = \"logintest.newpaltz.edu login6testb.newpaltz.edu\" t omca t _major_ver= 9.0 t omca t _ver= 9.0.45 jdk_versio n = 11 Build two or more new hosts. For our test environment, I call these 'login6testa' and 'login6testb'. Use whatever your existing build process for them is. For us - we use Ansible to build VMs via Kickstart. Maybe I'll get into that in the future here. Set your site.yml to include the roles you want to use. For my environment, I use a few that aren't covered here (such as for security hardening, setting content-security-policies, or setting up apache-http), but those that are relevant for CAS are: apache-tomcat cas6 cas6-client (not needed in production - but I still use this in test) Generate the various keys (see the Generating all necessary keys section near the bottom of the initial CAS config ) and place them in your cas-vault.yml file. Create your Azure app as per the Azure SAML page. Get the metadata URL and put it in your cas-vault.yml Ensure you have created a test-cas.properties.j2 file - and set the variable names correctly (changing DEV_ to TEST_ in variable names when appropriate, and setting cas.server.name to your load balanced virtual host). Populate at least one service into your roles/cas6/templates/test-services directory Ensure your playbooks have sections for TEST configs - not just DEV Run your Ansible playbook on ONE of the servers. ansible-playbook site.yml --ask-vault-pass --limit login6testa Place only one of the servers as active in your load balancer - then visit the site. It will generate the various saml-signing-cert files, sp-metadata.xml, and samlKeystore.jks Copy these files to your roles/cas6/files directory - but rename the sp-metadata.xml and samlKeystore.jks to be tier specific (i.e. sp-metadata-TEST.xml and samlKeystore-TEST.jks). You can then re-run the playbook on the other server(s) this will now push the sp-metadata.xml, samlKeystore, and saml-signing-cert files that were generated on the first host so they are the same in others in the tier. ansible-playbook site.yml --ask-vault-pass --limit login6testa Finish your Azure setup (see \"Finish Azure config\" section of the Azure SAML page). Restart tomcat on both hosts (not sure this is necessary - but it's a one time thing). Delegated auth should work now on your new tier. Is this really easier than doing it without Ansible? To do it once - definitely not. To make it repeatable and to maintain configs, service settings, Tomcat upgrades, and more - for me at least make Ansible essential for this. Maybe that's because I have too much work - but I'm sure I'm not the only one reading this who has too much work!","title":"Final Tasks"},{"location":"service-config/overview/","text":"Service configuration Services within CAS are where you define a policy per-service. For example you may want to: Release certain attributes to one service (name, email, eduPerson values, etc.) Require a user to be in one or more groups in Active Directory, or to have a certain eduPersonPrimaryAffiliation before they can access a particular service. Use a multi-factor authentication policy on a given service. Each service can be different. You can combine functions in the JSON service to accomplish various tasks. We'll get to more of those later. There are several ways to handle service registries, including the CAS Services Management Webapp . Because I deploy and maintain CAS via Ansible, I prefer to define my services via JSON files within /etc/cas/services and deploy via Ansible instead of using a web application. This helps preserve history (via git) of service changes. It's all up to you though. This documentation will assume you're using JSON files here. To use the JSON service registry, you're going to want to edit your build.gradle file within your cas-overlay-template directory. Editing build.gradle Look for this section, around line 84 in the build.gradle file dependencies { // Other CAS dependencies/modules may be listed here... implementation \"org.apereo.cas:cas-server-webapp-init:${casServerVersion}\" } Add the dependency implementation \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" as follows there: dependencies { // Other CAS dependencies/modules may be listed here... // implementation \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" implementation \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" } Update your cas.properties Go to your dev-cas.properties.j2 file in your ansible templates directory (or update the file cas.properties file directly if you're not using ansible) and make sure the following entry exists (it should be from our initial CAS config): # JSON Service Registry cas.serviceRegistry.json.location=file:/etc/cas/services Create a test service definition file Within the templates directory (in your CAS Ansible role), create a subdirectory called dev-services . For simplicity (and to avoid worrying about the details of the service registry for the moment), create a \u201cwildcard\u201d service definition that will allow any HTTPS based service to make use of the CAS server. Create a file in the dev-services directory with the following contents: { /* * Wildcard service de f i n i t io n t ha t applies t o a n y h tt ps or imaps url. * Do n o t use t his de f i n i t io n i n a produc t io n e n viro n me nt . */ \"@class\" : \"org.apereo.cas.services.RegexRegisteredService\" , \"serviceId\" : \"^https://.*\" , \"name\" : \"HTTPS wildcard\" , \"id\" : 1614029117 , \"evaluationOrder\" : 99999 } Warning Make sure to get rid of this wildcard service before moving into production.... The CAS documentation recommends the following naming convention for JSON service definition files: JSON filename = serviceName + \"-\" + serviceNumericId + \".json\" Therefore, the filename for the wildcard service definition above should be: HTTPSWildcard-1614029117.json Wait - where'd those crazy numbers come from? Techincally the id number just needs to be something unique. One way to do this is with the date +%s command in Linux, which will give you the date/time as the number of seconds in the unix epoch. The 'evaluationOrder' is set really high here since it will process anything here - but you want a wildcard like this to run last. The fields we've used so far are defined as: Field Description 'serviceId' A regular expression describing the URL(s) where a service or services are located. Care should be taken to avoid patterns that match more than just the desired URL(s), as this can create security vulnerabilities. 'name' A name for the service. Note that because the service definition filename is created based on this name (see above), the value of this field should never contain characters that are not allowed in filenames . 'id' Unique numeric identifier for the service definition. An easy way to ensure that these identifiers are unique is to use the date and time the service definition was created. This can be represented as YYYYMMDDhhmmss or, for a more \u201canonymous\u201d representation, as a timestamp (number of seconds since the epoch), which can be obtained with the command date +%s . 'evaluationOrder' A value that determines the relative evaluation order of registered services (lower values come before higher values). This is especially important when more than one serviceId expression can match the same service; evalutionOrder deterines which expression is evaluated first. Getting your services from Ansible to CAS As listed earlier, I recommend creating a separate service directory for each tier (prod, test, dev) within your templates directory. I've created one called dev-services (within the templates directory of your Ansible CAS role). Place your newly created service file from above into this directory. Update your tasks Within the tasks directory, create a new file called service-config.yml (or something similar). Reference that file within your existing cas role's main.yml. Your main.yml should look like the one below now. roles/cas6/tasks/main.yml: --- # main tasks file for cas6 - include_tasks : base-cas-config.yml - include_tasks : cas-ajp-proxy.yml - include_tasks : service-config.yml Configure the service config task This will ensure whatever is in your templates/dev-services directory will be replicated in the CAS servers when the playbook runs. roles/cas6/tasks/service-config.yml: --- - name : Ensure service files are populated from templates ansible.builtin.template : src : '{{ item.src }}' dest : '/etc/cas/services/{{ item.path }}' owner : root group : tomcat with_filetree : '../templates/dev-services' when : item.state == 'file' and 'login6dev' in inventory_hostname This is a way of getting a whole directory copied over instead of a single file. Otherwise you'd have to define an ansible template for each service you have - which could get pretty large (though is okay if you prefer it!). With this in place - any services that are defined in the dev-services directory will be copied over. Note: it will not DELETE services. This is still to be implemented. Rebuild and redeploy CAS To rebuild CAS with this dependency built in, you'll want to go to the cas-overlay-template directory and run the following and wait a moment for it to be complete: ./gradlew clean build Your cas.war file will have been updated. You can either copy it to your CAS server directly (but where's the fun in that!) or update it in your files directory in your CAS Ansible role. If you update it in your Ansible role, you can just rerun the playbook. [ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit <your_CAS_server> Vault password : It won't have to rebuild or reinstall Tomcat, since it's idempotent. It will only alter what is different from our templates/files/playbook. In fact, when you run it, it will say 'ok' or 'skipped' for every task except the following (assuming you didn't change anything else), where it will say changed : TASK [cas6 : Configure cas.properties file (dev)] TASK [cas6 : Copy CAS war file] RUNNING HANDLER [cas6 : restart tomcat] References CAS Services Management","title":"Service Overview"},{"location":"service-config/overview/#service-configuration","text":"Services within CAS are where you define a policy per-service. For example you may want to: Release certain attributes to one service (name, email, eduPerson values, etc.) Require a user to be in one or more groups in Active Directory, or to have a certain eduPersonPrimaryAffiliation before they can access a particular service. Use a multi-factor authentication policy on a given service. Each service can be different. You can combine functions in the JSON service to accomplish various tasks. We'll get to more of those later. There are several ways to handle service registries, including the CAS Services Management Webapp . Because I deploy and maintain CAS via Ansible, I prefer to define my services via JSON files within /etc/cas/services and deploy via Ansible instead of using a web application. This helps preserve history (via git) of service changes. It's all up to you though. This documentation will assume you're using JSON files here. To use the JSON service registry, you're going to want to edit your build.gradle file within your cas-overlay-template directory.","title":"Service configuration"},{"location":"service-config/overview/#editing-buildgradle","text":"Look for this section, around line 84 in the build.gradle file dependencies { // Other CAS dependencies/modules may be listed here... implementation \"org.apereo.cas:cas-server-webapp-init:${casServerVersion}\" } Add the dependency implementation \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" as follows there: dependencies { // Other CAS dependencies/modules may be listed here... // implementation \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" implementation \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" }","title":"Editing build.gradle"},{"location":"service-config/overview/#update-your-casproperties","text":"Go to your dev-cas.properties.j2 file in your ansible templates directory (or update the file cas.properties file directly if you're not using ansible) and make sure the following entry exists (it should be from our initial CAS config): # JSON Service Registry cas.serviceRegistry.json.location=file:/etc/cas/services","title":"Update your cas.properties"},{"location":"service-config/overview/#create-a-test-service-definition-file","text":"Within the templates directory (in your CAS Ansible role), create a subdirectory called dev-services . For simplicity (and to avoid worrying about the details of the service registry for the moment), create a \u201cwildcard\u201d service definition that will allow any HTTPS based service to make use of the CAS server. Create a file in the dev-services directory with the following contents: { /* * Wildcard service de f i n i t io n t ha t applies t o a n y h tt ps or imaps url. * Do n o t use t his de f i n i t io n i n a produc t io n e n viro n me nt . */ \"@class\" : \"org.apereo.cas.services.RegexRegisteredService\" , \"serviceId\" : \"^https://.*\" , \"name\" : \"HTTPS wildcard\" , \"id\" : 1614029117 , \"evaluationOrder\" : 99999 } Warning Make sure to get rid of this wildcard service before moving into production.... The CAS documentation recommends the following naming convention for JSON service definition files: JSON filename = serviceName + \"-\" + serviceNumericId + \".json\" Therefore, the filename for the wildcard service definition above should be: HTTPSWildcard-1614029117.json","title":"Create a test service definition file"},{"location":"service-config/overview/#wait-whered-those-crazy-numbers-come-from","text":"Techincally the id number just needs to be something unique. One way to do this is with the date +%s command in Linux, which will give you the date/time as the number of seconds in the unix epoch. The 'evaluationOrder' is set really high here since it will process anything here - but you want a wildcard like this to run last. The fields we've used so far are defined as: Field Description 'serviceId' A regular expression describing the URL(s) where a service or services are located. Care should be taken to avoid patterns that match more than just the desired URL(s), as this can create security vulnerabilities. 'name' A name for the service. Note that because the service definition filename is created based on this name (see above), the value of this field should never contain characters that are not allowed in filenames . 'id' Unique numeric identifier for the service definition. An easy way to ensure that these identifiers are unique is to use the date and time the service definition was created. This can be represented as YYYYMMDDhhmmss or, for a more \u201canonymous\u201d representation, as a timestamp (number of seconds since the epoch), which can be obtained with the command date +%s . 'evaluationOrder' A value that determines the relative evaluation order of registered services (lower values come before higher values). This is especially important when more than one serviceId expression can match the same service; evalutionOrder deterines which expression is evaluated first.","title":"Wait - where'd those crazy numbers come from?"},{"location":"service-config/overview/#getting-your-services-from-ansible-to-cas","text":"As listed earlier, I recommend creating a separate service directory for each tier (prod, test, dev) within your templates directory. I've created one called dev-services (within the templates directory of your Ansible CAS role). Place your newly created service file from above into this directory.","title":"Getting your services from Ansible to CAS"},{"location":"service-config/overview/#update-your-tasks","text":"Within the tasks directory, create a new file called service-config.yml (or something similar). Reference that file within your existing cas role's main.yml. Your main.yml should look like the one below now. roles/cas6/tasks/main.yml: --- # main tasks file for cas6 - include_tasks : base-cas-config.yml - include_tasks : cas-ajp-proxy.yml - include_tasks : service-config.yml","title":"Update your tasks"},{"location":"service-config/overview/#configure-the-service-config-task","text":"This will ensure whatever is in your templates/dev-services directory will be replicated in the CAS servers when the playbook runs. roles/cas6/tasks/service-config.yml: --- - name : Ensure service files are populated from templates ansible.builtin.template : src : '{{ item.src }}' dest : '/etc/cas/services/{{ item.path }}' owner : root group : tomcat with_filetree : '../templates/dev-services' when : item.state == 'file' and 'login6dev' in inventory_hostname This is a way of getting a whole directory copied over instead of a single file. Otherwise you'd have to define an ansible template for each service you have - which could get pretty large (though is okay if you prefer it!). With this in place - any services that are defined in the dev-services directory will be copied over. Note: it will not DELETE services. This is still to be implemented.","title":"Configure the service config task"},{"location":"service-config/overview/#rebuild-and-redeploy-cas","text":"To rebuild CAS with this dependency built in, you'll want to go to the cas-overlay-template directory and run the following and wait a moment for it to be complete: ./gradlew clean build Your cas.war file will have been updated. You can either copy it to your CAS server directly (but where's the fun in that!) or update it in your files directory in your CAS Ansible role. If you update it in your Ansible role, you can just rerun the playbook. [ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit <your_CAS_server> Vault password : It won't have to rebuild or reinstall Tomcat, since it's idempotent. It will only alter what is different from our templates/files/playbook. In fact, when you run it, it will say 'ok' or 'skipped' for every task except the following (assuming you didn't change anything else), where it will say changed : TASK [cas6 : Configure cas.properties file (dev)] TASK [cas6 : Copy CAS war file] RUNNING HANDLER [cas6 : restart tomcat]","title":"Rebuild and redeploy CAS"},{"location":"service-config/overview/#references","text":"CAS Services Management","title":"References"},{"location":"setting-up-the-environment/build-environment/","text":"Build Environment Summary My build server is our existing Ansible host. I've set that system up several years ago - so I may have missed a step or two here. I'll try to recreate this from scratch later though. Install and Configure git We keep our code for git in an internal git repository running Bitbucket Server . We make enough changes to CAS and Ansible that I would be insane to not use git or some other form of version control for development. Whether you do or not is up to you - but the instructions here assume you are using some sort of git repository. If you aren't familiar with Git - I recommend Pro Git, available online for free via (https://git-scm.com/book/en/v2). Install and basic configuration of Git This should be done as the user you are going to be running Ansible and building CAS from - NOT root. yum install git git config --global user.name \"Your Name Here\" git config --global user.email \"Your Email Here\" Install Ansible We are using the version of Ansible that comes with RedHat. This was just installed via: yum install ansible Set up SSH public key authentication If you're deploying via Ansible, or just using SCP/SFTP to copy files over, you'll want to set up public key authentication. From the master server: When done - view the contents of the public key (by default in /home/username/.ssh/id_rsa.pub) - you'll need it in the next step. From the CAS servers: Edit the file /root/.ssh/authorized_keys Place the contents of the public key in that file. Test Login to your build server as the user you will be building CAS and running ansible from (I'll use 'builduser' as an example here). See if you can login to one of your newly built CAS servers without entering a password. ssh root@cas6dev1 If successful - you'll be logged in without a username or password. If this is the first time you are connecting via SSH from the build host to the CAS host, you'll be warned that the authenticity of the host cannot be established, and you'll be prompted to enter yes to continue connecting. Don't forget to commit changes I'm not going to mention committing changes into Git during the rest of this documentation. It's up to you as to when you commit - but I usually recommend as you're getting things setup after each 'phase' of the install.","title":"Build Environment"},{"location":"setting-up-the-environment/build-environment/#build-environment","text":"Summary My build server is our existing Ansible host. I've set that system up several years ago - so I may have missed a step or two here. I'll try to recreate this from scratch later though.","title":"Build Environment"},{"location":"setting-up-the-environment/build-environment/#install-and-configure-git","text":"We keep our code for git in an internal git repository running Bitbucket Server . We make enough changes to CAS and Ansible that I would be insane to not use git or some other form of version control for development. Whether you do or not is up to you - but the instructions here assume you are using some sort of git repository. If you aren't familiar with Git - I recommend Pro Git, available online for free via (https://git-scm.com/book/en/v2).","title":"Install and Configure git"},{"location":"setting-up-the-environment/build-environment/#install-and-basic-configuration-of-git","text":"This should be done as the user you are going to be running Ansible and building CAS from - NOT root. yum install git git config --global user.name \"Your Name Here\" git config --global user.email \"Your Email Here\"","title":"Install and basic configuration of Git"},{"location":"setting-up-the-environment/build-environment/#install-ansible","text":"We are using the version of Ansible that comes with RedHat. This was just installed via: yum install ansible","title":"Install Ansible"},{"location":"setting-up-the-environment/build-environment/#set-up-ssh-public-key-authentication","text":"If you're deploying via Ansible, or just using SCP/SFTP to copy files over, you'll want to set up public key authentication.","title":"Set up SSH public key authentication"},{"location":"setting-up-the-environment/build-environment/#from-the-master-server","text":"When done - view the contents of the public key (by default in /home/username/.ssh/id_rsa.pub) - you'll need it in the next step.","title":"From the master server:"},{"location":"setting-up-the-environment/build-environment/#from-the-cas-servers","text":"Edit the file /root/.ssh/authorized_keys Place the contents of the public key in that file.","title":"From the CAS servers:"},{"location":"setting-up-the-environment/build-environment/#test","text":"Login to your build server as the user you will be building CAS and running ansible from (I'll use 'builduser' as an example here). See if you can login to one of your newly built CAS servers without entering a password. ssh root@cas6dev1 If successful - you'll be logged in without a username or password. If this is the first time you are connecting via SSH from the build host to the CAS host, you'll be warned that the authenticity of the host cannot be established, and you'll be prompted to enter yes to continue connecting. Don't forget to commit changes I'm not going to mention committing changes into Git during the rest of this documentation. It's up to you as to when you commit - but I usually recommend as you're getting things setup after each 'phase' of the install.","title":"Test"},{"location":"setting-up-the-environment/overview/","text":"System/Architecture Overview Components Summary Before beginning the CAS build and configuration process, you will want to plan out your server environment. Below is how we have things setup - but by no means is the only way. We at New Paltz have a three-tiered CAS consisting of: Development: This is used exclusively for deploying/configuring/testing CAS itself - no end users use this. Test: This is used for test applications/environments which still need authentication such as Banner Test. Since there are a number of IT staff and end users testing these applications, changes here can still impact users though far less than production. Production: The actual public facing CAS. Within each tier, you will want one or more servers. We do something similar to the following: Development login6deva login6devb logindev: Public-facing load balanced virtual host Test login6testa login6testb logintest: Public-facing load balanced virtual host Production login6proda login6prodb login6prodc login: Public-facing load balanced virtual host Each of these servers for us are RHEL 8 hosts, with: 2 virtual CPUs for production, 1 for test/dev 4 GB memory (though you may need more or less depending on load) 25 GB disk For the official requirements, see the Apereo CAS Installation Requirements document. I will document both how to set these up manually, as well as my Ansible playbooks which handle deployment (of Apache, Apache Tomcat, and CAS itself).","title":"Overview"},{"location":"setting-up-the-environment/overview/#systemarchitecture-overview","text":"","title":"System/Architecture Overview"},{"location":"setting-up-the-environment/overview/#components","text":"Summary Before beginning the CAS build and configuration process, you will want to plan out your server environment. Below is how we have things setup - but by no means is the only way. We at New Paltz have a three-tiered CAS consisting of: Development: This is used exclusively for deploying/configuring/testing CAS itself - no end users use this. Test: This is used for test applications/environments which still need authentication such as Banner Test. Since there are a number of IT staff and end users testing these applications, changes here can still impact users though far less than production. Production: The actual public facing CAS. Within each tier, you will want one or more servers. We do something similar to the following: Development login6deva login6devb logindev: Public-facing load balanced virtual host Test login6testa login6testb logintest: Public-facing load balanced virtual host Production login6proda login6prodb login6prodc login: Public-facing load balanced virtual host Each of these servers for us are RHEL 8 hosts, with: 2 virtual CPUs for production, 1 for test/dev 4 GB memory (though you may need more or less depending on load) 25 GB disk For the official requirements, see the Apereo CAS Installation Requirements document. I will document both how to set these up manually, as well as my Ansible playbooks which handle deployment (of Apache, Apache Tomcat, and CAS itself).","title":"Components"},{"location":"setting-up-the-environment/time-synchronization/","text":"Configure Time Synchronization For an active-active environment with at least two servers in each pair, it's essential that the system clocks match. Out-of-date clocks between the CAS servers could cause issues with ticket processing, and will make correllating the logs (when doing an investigation - whether it be troubleshooting or incident response) problematic. The best way to handle this is to ensure the Network Time Protocol (NTP) is in use. Determine if NTP is already in use. RHEL 8 offers chrony for NTP time synchronization. Older versions of RHEL either had ntpd available, or in use by default, but chrony is what RHEL uses by default now. If you're looking for more about the differences between chronyd and ntpd, see Comparison of NTP implementations . That being said, I've never had issues using whatever the OS default is. # Check chrony status systemctl status chronyd # If you are on an older version of RHEL or have otherwise installed NTPD - you can check it as follows: systemctl status ntpd If chrony is running, you'll see something like: If the one you check is not installed - you'll see a message like: Unit chronyd.service could not be found Install chrony (if needed) If you don't have chrony installed, you can install it via dnf install chronyd Configure chrony Chrony by default is configured via /etc/chrony.conf. The default file from RedHat is below, though most options are commented out by default. The only change I've ever made to it is including our on-prem NTP servers. If you want to do that, remove the ntp.org servers from the list and replace or supplement them with your own server(s). # Use public servers from the pool.ntp.org project. # Please consider joining the pool (http://www.pool.ntp.org/join.html). server 0.rhel.pool.ntp.org iburst server 1.rhel.pool.ntp.org iburst server 2.rhel.pool.ntp.org iburst server 3.rhel.pool.ntp.org iburst # Record the rate at which the system clock gains/losses time. driftfile /var/lib/chrony/drift # Allow the system clock to be stepped in the first three updates # if its offset is larger than 1 second. makestep 1.0 3 # Enable kernel synchronization of the real-time clock (RTC). rtcsync # Enable hardware timestamping on all interfaces that support it. #hwtimestamp * # Increase the minimum number of selectable sources required to adjust # the system clock. #minsources 2 # Allow NTP client access from local network. #allow 192.168.0.0/16 # Serve time even if not synchronized to a time source. #local stratum 10 # Specify file containing keys for NTP authentication. #keyfile /etc/chrony.keys # Specify directory for log files. logdir /var/log/chrony # Select which information is logged. #log measurements statistics tracking Enable and start chronyd # Set chronyd to start on boot systemctl enable chronyd # Start chronyd now systemctl start chronyd You can check some information about time sync on the system with the command: chronyc tracking and chronyc sources .","title":"Configure time synchronization"},{"location":"setting-up-the-environment/time-synchronization/#configure-time-synchronization","text":"For an active-active environment with at least two servers in each pair, it's essential that the system clocks match. Out-of-date clocks between the CAS servers could cause issues with ticket processing, and will make correllating the logs (when doing an investigation - whether it be troubleshooting or incident response) problematic. The best way to handle this is to ensure the Network Time Protocol (NTP) is in use.","title":"Configure Time Synchronization"},{"location":"setting-up-the-environment/time-synchronization/#determine-if-ntp-is-already-in-use","text":"RHEL 8 offers chrony for NTP time synchronization. Older versions of RHEL either had ntpd available, or in use by default, but chrony is what RHEL uses by default now. If you're looking for more about the differences between chronyd and ntpd, see Comparison of NTP implementations . That being said, I've never had issues using whatever the OS default is. # Check chrony status systemctl status chronyd # If you are on an older version of RHEL or have otherwise installed NTPD - you can check it as follows: systemctl status ntpd If chrony is running, you'll see something like: If the one you check is not installed - you'll see a message like: Unit chronyd.service could not be found","title":"Determine if NTP is already in use."},{"location":"setting-up-the-environment/time-synchronization/#install-chrony-if-needed","text":"If you don't have chrony installed, you can install it via dnf install chronyd","title":"Install chrony (if needed)"},{"location":"setting-up-the-environment/time-synchronization/#configure-chrony","text":"Chrony by default is configured via /etc/chrony.conf. The default file from RedHat is below, though most options are commented out by default. The only change I've ever made to it is including our on-prem NTP servers. If you want to do that, remove the ntp.org servers from the list and replace or supplement them with your own server(s). # Use public servers from the pool.ntp.org project. # Please consider joining the pool (http://www.pool.ntp.org/join.html). server 0.rhel.pool.ntp.org iburst server 1.rhel.pool.ntp.org iburst server 2.rhel.pool.ntp.org iburst server 3.rhel.pool.ntp.org iburst # Record the rate at which the system clock gains/losses time. driftfile /var/lib/chrony/drift # Allow the system clock to be stepped in the first three updates # if its offset is larger than 1 second. makestep 1.0 3 # Enable kernel synchronization of the real-time clock (RTC). rtcsync # Enable hardware timestamping on all interfaces that support it. #hwtimestamp * # Increase the minimum number of selectable sources required to adjust # the system clock. #minsources 2 # Allow NTP client access from local network. #allow 192.168.0.0/16 # Serve time even if not synchronized to a time source. #local stratum 10 # Specify file containing keys for NTP authentication. #keyfile /etc/chrony.keys # Specify directory for log files. logdir /var/log/chrony # Select which information is logged. #log measurements statistics tracking","title":"Configure chrony"},{"location":"setting-up-the-environment/time-synchronization/#enable-and-start-chronyd","text":"# Set chronyd to start on boot systemctl enable chronyd # Start chronyd now systemctl start chronyd You can check some information about time sync on the system with the command: chronyc tracking and chronyc sources .","title":"Enable and start chronyd"},{"location":"setting-up-the-environment/httpd/ajp-proxy/","text":"Setting up Apache HTTPD in front of Tomcat I prefer, for a number of reasons, to put Apache httpd in front of Tomcat (even though there's a load balancer in front of the CAS servers as well. I'm sure there's ways around this, but I like the flexibility that it provides me, and I also have had other applications on the CAS servers that are not running on Tomcat and still need to be accessible (including SimpleSAML for applications we haven't moved to Azure or directly into CAS yet). For now, I'm not going to go over full configuration of Apache httpd here. I will eventually (hopefully by end of Spring 2021) put up my steps and Ansible playbooks to get httpd running, but for now - I'll mention the Tomcat/httpd specific portion. We use AJP for communication between Apache httpd and Apache Tomcat. Configuring this is in two steps, one on the httpd server and one on Tomcat. On the httpd server Create a configuration file in /etc/httpd/conf.d. We call ours 'cas-ajp.conf' but it doesn't matter as long as it ends in .conf. The contents of which are below: **roles/apache-tomcat/templates/cas-ajp.conf ProxyRequests Off <Proxy * > Order allow,deny Allow from all </Proxy> ProxyPass /cas ajp://localhost:8009/cas ProxyPassReverse /cas ajp://localhost:8009/cas On the Tomcat server Edit /etc/tomcat/server.xml and define an AJP port: <!-- Define an AJP 1.3 Connector on port 8009 See https://tomcat.apache.org/tomcat-9.0-doc/config/ajp.html for more on the 'secretRequired' and 'secret' options. Since I'm only exposing this to localhost via host firewall --> <Connector port= \"8009\" protocol= \"AJP/1.3\" redirectPort= \"8443\" secretRequired= \"false\" /> The Tomcat portion is already in the Tomcat server.xml that is linked to from the Tomcat/Ansible section.","title":"Use AJP to communicate with Tomcat"},{"location":"setting-up-the-environment/httpd/ajp-proxy/#setting-up-apache-httpd-in-front-of-tomcat","text":"I prefer, for a number of reasons, to put Apache httpd in front of Tomcat (even though there's a load balancer in front of the CAS servers as well. I'm sure there's ways around this, but I like the flexibility that it provides me, and I also have had other applications on the CAS servers that are not running on Tomcat and still need to be accessible (including SimpleSAML for applications we haven't moved to Azure or directly into CAS yet). For now, I'm not going to go over full configuration of Apache httpd here. I will eventually (hopefully by end of Spring 2021) put up my steps and Ansible playbooks to get httpd running, but for now - I'll mention the Tomcat/httpd specific portion. We use AJP for communication between Apache httpd and Apache Tomcat. Configuring this is in two steps, one on the httpd server and one on Tomcat.","title":"Setting up Apache HTTPD in front of Tomcat"},{"location":"setting-up-the-environment/httpd/ajp-proxy/#on-the-httpd-server","text":"Create a configuration file in /etc/httpd/conf.d. We call ours 'cas-ajp.conf' but it doesn't matter as long as it ends in .conf. The contents of which are below: **roles/apache-tomcat/templates/cas-ajp.conf ProxyRequests Off <Proxy * > Order allow,deny Allow from all </Proxy> ProxyPass /cas ajp://localhost:8009/cas ProxyPassReverse /cas ajp://localhost:8009/cas","title":"On the httpd server"},{"location":"setting-up-the-environment/httpd/ajp-proxy/#on-the-tomcat-server","text":"Edit /etc/tomcat/server.xml and define an AJP port: <!-- Define an AJP 1.3 Connector on port 8009 See https://tomcat.apache.org/tomcat-9.0-doc/config/ajp.html for more on the 'secretRequired' and 'secret' options. Since I'm only exposing this to localhost via host firewall --> <Connector port= \"8009\" protocol= \"AJP/1.3\" redirectPort= \"8443\" secretRequired= \"false\" /> The Tomcat portion is already in the Tomcat server.xml that is linked to from the Tomcat/Ansible section.","title":"On the Tomcat server"},{"location":"setting-up-the-environment/tomcat/asynch-request-support/","text":"Configure asynchronous request support Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. With Ansible, the web.xml file will be a template pushed from Ansible. CAS 6's documentation states \"In the event that an external servlet container is used, you MAY need to make sure it\u2019s configured correctly to support asynchronous requests in the event you get related errors and your container requires this.\" . Set async-supported to true within default servlet To implement this edit /etc/tomcat/web.xml and look for the definition of the default web app servlet, around line 113. You'll want to add the async-supported directive before the end of the servlet. <!-- Before changes --> <servlet> <servlet-name> default </servlet-name> <servlet-class> org.apache.catalina.servlets.DefaultServlet </servlet-class> <init-param> <param-name> debug </param-name> <param-value> 0 </param-value> </init-param> <init-param> <param-name> listings </param-name> <param-value> false </param-value> </init-param> <load-on-startup> 1 </load-on-startup> </servlet> <!-- After changes --> <servlet> <servlet-name> default </servlet-name> <servlet-class> org.apache.catalina.servlets.DefaultServlet </servlet-class> <init-param> <param-name> debug </param-name> <param-value> 0 </param-value> </init-param> <init-param> <param-name> listings </param-name> <param-value> false </param-value> </init-param> <load-on-startup> 1 </load-on-startup> <async-supported> true </async-supported> </servlet> Set async-supported to true within jsp compiler and execution servlet To implement this edit /etc/tomcat/web.xml and look for the definition of the jsp servlet, around line 268. You'll want to add the async-supported directive before the end of the servlet. <!-- Before changes --> <servlet> <servlet-name> jsp </servlet-name> <servlet-class> org.apache.jasper.servlet.JspServlet </servlet-class> <init-param> <param-name> fork </param-name> <param-value> false </param-value> </init-param> <init-param> <param-name> xpoweredBy </param-name> <param-value> false </param-value> </init-param> <load-on-startup> 3 </load-on-startup> </servlet> <!-- Before changes --> <servlet> <servlet-name> jsp </servlet-name> <servlet-class> org.apache.jasper.servlet.JspServlet </servlet-class> <init-param> <param-name> fork </param-name> <param-value> false </param-value> </init-param> <init-param> <param-name> xpoweredBy </param-name> <param-value> false </param-value> </init-param> <load-on-startup> 3 </load-on-startup> <async-supported> true </async-supported> </servlet> References CAS 6: Servlet Container Configuration","title":"Configure asynchronous request support"},{"location":"setting-up-the-environment/tomcat/asynch-request-support/#configure-asynchronous-request-support","text":"Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. With Ansible, the web.xml file will be a template pushed from Ansible. CAS 6's documentation states \"In the event that an external servlet container is used, you MAY need to make sure it\u2019s configured correctly to support asynchronous requests in the event you get related errors and your container requires this.\" .","title":"Configure asynchronous request support"},{"location":"setting-up-the-environment/tomcat/asynch-request-support/#set-async-supported-to-true-within-default-servlet","text":"To implement this edit /etc/tomcat/web.xml and look for the definition of the default web app servlet, around line 113. You'll want to add the async-supported directive before the end of the servlet. <!-- Before changes --> <servlet> <servlet-name> default </servlet-name> <servlet-class> org.apache.catalina.servlets.DefaultServlet </servlet-class> <init-param> <param-name> debug </param-name> <param-value> 0 </param-value> </init-param> <init-param> <param-name> listings </param-name> <param-value> false </param-value> </init-param> <load-on-startup> 1 </load-on-startup> </servlet> <!-- After changes --> <servlet> <servlet-name> default </servlet-name> <servlet-class> org.apache.catalina.servlets.DefaultServlet </servlet-class> <init-param> <param-name> debug </param-name> <param-value> 0 </param-value> </init-param> <init-param> <param-name> listings </param-name> <param-value> false </param-value> </init-param> <load-on-startup> 1 </load-on-startup> <async-supported> true </async-supported> </servlet>","title":"Set async-supported to true within default servlet"},{"location":"setting-up-the-environment/tomcat/asynch-request-support/#set-async-supported-to-true-within-jsp-compiler-and-execution-servlet","text":"To implement this edit /etc/tomcat/web.xml and look for the definition of the jsp servlet, around line 268. You'll want to add the async-supported directive before the end of the servlet. <!-- Before changes --> <servlet> <servlet-name> jsp </servlet-name> <servlet-class> org.apache.jasper.servlet.JspServlet </servlet-class> <init-param> <param-name> fork </param-name> <param-value> false </param-value> </init-param> <init-param> <param-name> xpoweredBy </param-name> <param-value> false </param-value> </init-param> <load-on-startup> 3 </load-on-startup> </servlet> <!-- Before changes --> <servlet> <servlet-name> jsp </servlet-name> <servlet-class> org.apache.jasper.servlet.JspServlet </servlet-class> <init-param> <param-name> fork </param-name> <param-value> false </param-value> </init-param> <init-param> <param-name> xpoweredBy </param-name> <param-value> false </param-value> </init-param> <load-on-startup> 3 </load-on-startup> <async-supported> true </async-supported> </servlet>","title":"Set async-supported to true within jsp compiler and execution servlet"},{"location":"setting-up-the-environment/tomcat/asynch-request-support/#references","text":"CAS 6: Servlet Container Configuration","title":"References"},{"location":"setting-up-the-environment/tomcat/config-x-forwarded/","text":"Configure X-Forwarded-For header processing Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. With Ansible, the server.xml file will be a template pushed from Ansible. You will most likely have CAS behind a load balancer. If you have things like we have them in our environment, the source IP that comes to the web server is the IP of the load balancer, not the actual client IP. Most, if not all load balancers can be configured to insert an X-Forwarded-For HTTP header to identify the address of the connecting system. Tomcat can be configured as follows to look for this header and use it instead of the load balancer's source IP. To configure Tomcat to process X-Forwarded-For HTTP headers, edit the file /etc/tomcat/server.xml and locate the definition of the AccessLogValve (around line 164, after inserting the changes in Configure TLS/SSL settings) and Insert a RemoteIpValve definition above it. Add a requestAttributesEnabled attribute to the AccessLogValve definition. <!--Before changes--> <!-- Access log processes all example. Documentation at: /docs/config/valve.html Note: The pattern used is equivalent to using pattern=\"common\" --> <Valve className= \"org.apache.catalina.valves.AccessLogValve\" directory= \"logs\" prefix= \"localhost_access_log\" suffix= \".txt\" pattern= \"%h %l %u %t &quot;%r&quot; %s %b\" /> <!-- After changes--> <!-- RemoteIp valve, process X-Forwarded-For headers Documentation at: /docs/config/valve.html IP addresses below are those your load balancer uses to talk to your application server. Multiple IP addresses separated by | --> <Valve className= \"org.apache.catalina.valves.RemoteIpValve\" internalProxies= \"192\\.168\\.1\\.10|192\\.168\\.1\\.11\" /> <!-- Access log processes all example. Documentation at: /docs/config/valve.html Note: The pattern used is equivalent to using pattern=\"common\" --> <Valve className= \"org.apache.catalina.valves.AccessLogValve\" directory= \"logs\" prefix= \"localhost_access_log\" suffix= \".txt\" requestAttributesEnabled= \"true\" pattern= \"%h %l %u %t &quot;%r&quot; %s %b\" />","title":"Configure X-Forwarded-For header processing"},{"location":"setting-up-the-environment/tomcat/config-x-forwarded/#configure-x-forwarded-for-header-processing","text":"Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. With Ansible, the server.xml file will be a template pushed from Ansible. You will most likely have CAS behind a load balancer. If you have things like we have them in our environment, the source IP that comes to the web server is the IP of the load balancer, not the actual client IP. Most, if not all load balancers can be configured to insert an X-Forwarded-For HTTP header to identify the address of the connecting system. Tomcat can be configured as follows to look for this header and use it instead of the load balancer's source IP. To configure Tomcat to process X-Forwarded-For HTTP headers, edit the file /etc/tomcat/server.xml and locate the definition of the AccessLogValve (around line 164, after inserting the changes in Configure TLS/SSL settings) and Insert a RemoteIpValve definition above it. Add a requestAttributesEnabled attribute to the AccessLogValve definition. <!--Before changes--> <!-- Access log processes all example. Documentation at: /docs/config/valve.html Note: The pattern used is equivalent to using pattern=\"common\" --> <Valve className= \"org.apache.catalina.valves.AccessLogValve\" directory= \"logs\" prefix= \"localhost_access_log\" suffix= \".txt\" pattern= \"%h %l %u %t &quot;%r&quot; %s %b\" /> <!-- After changes--> <!-- RemoteIp valve, process X-Forwarded-For headers Documentation at: /docs/config/valve.html IP addresses below are those your load balancer uses to talk to your application server. Multiple IP addresses separated by | --> <Valve className= \"org.apache.catalina.valves.RemoteIpValve\" internalProxies= \"192\\.168\\.1\\.10|192\\.168\\.1\\.11\" /> <!-- Access log processes all example. Documentation at: /docs/config/valve.html Note: The pattern used is equivalent to using pattern=\"common\" --> <Valve className= \"org.apache.catalina.valves.AccessLogValve\" directory= \"logs\" prefix= \"localhost_access_log\" suffix= \".txt\" requestAttributesEnabled= \"true\" pattern= \"%h %l %u %t &quot;%r&quot; %s %b\" />","title":"Configure X-Forwarded-For header processing"},{"location":"setting-up-the-environment/tomcat/configure-async-logging/","text":"Configure asynchronous logging support Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. With Ansible, the catalina.properties file will be a template pushed from Ansible. CAS 6\u2019s logging subsystem automatically inserts itself into the runtime application context at startup time, and is designed to clean up the logging context when Tomcat shuts down. Unfortunately, the default Tomcat JarScanner configuration skips over JAR files named log4j*.jar, which prevents this feature from working. To correct this problem, edit the file /etc/tomcat/catalina.properties and locate the lines defining the jarsToSkip property (starting around line 108), and then the specific line of that definition that includes log4j*.jar (around line 161): tomcat.util.scan.StandardJarScanFilter.jarsToSkip=\\ annotations-api.jar,\\ ant-junit*.jar,\\ ant-launcher.jar,\\ (snip junit.jar,\\ log4j*.jar,\\ mail*.jar,\\ (snip) xmlParserAPIs.jar,\\ xom-*.jar Remove the log4j*.jar, \\ line completely.","title":"Configure asynchronous logging support"},{"location":"setting-up-the-environment/tomcat/configure-async-logging/#configure-asynchronous-logging-support","text":"Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. With Ansible, the catalina.properties file will be a template pushed from Ansible. CAS 6\u2019s logging subsystem automatically inserts itself into the runtime application context at startup time, and is designed to clean up the logging context when Tomcat shuts down. Unfortunately, the default Tomcat JarScanner configuration skips over JAR files named log4j*.jar, which prevents this feature from working. To correct this problem, edit the file /etc/tomcat/catalina.properties and locate the lines defining the jarsToSkip property (starting around line 108), and then the specific line of that definition that includes log4j*.jar (around line 161): tomcat.util.scan.StandardJarScanFilter.jarsToSkip=\\ annotations-api.jar,\\ ant-junit*.jar,\\ ant-launcher.jar,\\ (snip junit.jar,\\ log4j*.jar,\\ mail*.jar,\\ (snip) xmlParserAPIs.jar,\\ xom-*.jar Remove the log4j*.jar, \\ line completely.","title":"Configure asynchronous logging support"},{"location":"setting-up-the-environment/tomcat/entropy-daemon/","text":"Install an entropy daemon Note This step is recommended if running CAS on virtual Linux servers. It is not necessary if running CAS on physical Linux servers or Windows servers of either type. A common problem on virtual Linux servers is that the /dev/random device will run low on entropy, because most of the sources the kernel uses to build up the entropy pool are hardware-based, and therefore do not exist in a virtual environment. If there\u2019s not enough entropy available when Tomcat is started, it can often take two or three minutes or longer for the server to start. Once Tomcat has started and the CAS application has been loaded, entropy is still required to establish secure (HTTPS) connections with authenticating users\u2019 browsers and protected applications. A lack of available entropy will adversely affect the performance of the application by limiting the rate at which connections can be processed. To improve the size of the entropy pool on Linux, it\u2019s possible to feed random data from an external source into /dev/random. One way to do this is the haveged daemon, which uses the HAVEGE (HArdware Volatile Entropy Gathering and Expansion) algorithm to harvest the indirect effects of hardware events on hidden processor state (caches, branch predictors, memory translation tables, etc) to generate random bytes with which to fill /dev/random whenever the supply of random bits falls below the low water mark of the device. We will use this approach to avoid entropy depletion on the CAS servers. Red Hat does not offer haveged on RHEL 7, but it can be installed from the Fedora Project\u2019s Extra Packages for Enterprise Linux (EPEL) repository. I typically find at least ONE package I need from EPEL on each server I'm involved in, so it's part of my normal build process. Install the EPEL repository HAVEGE is needed on each CAS server, and since it needs EPEL, that is needed on each CAS server as well. dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm !!! note: According to EPEL: \"on RHEL 8 it is required to also enable the codeready-builder-for-rhel-8-*-rpms repository since EPEL packages may depend on packages from it\". I haven't needed it for the installed packages, but to be safe - I recommend following their guidance. # Installation commands for codeready-building are below. ARCH=$( /bin/arch ) subscription-manager repos --enable \"codeready-builder-for-rhel-8-${ARCH}-rpms\" # Note: since all our servers here are x86_64, I just run the following: subscription-manager repos --enable \"codeready-builder-for-rhel-8-x86_64-rpms\" Install, enable, and start haveged # Install haveged dnf install haveged # Enable the service systemctl enable haveged # Start the service systemctl start haveged # Verify that it is running systemctl status haveged References Extra Packages for Enterprise Linux (EPEL) haveged - A simple entropy daemon","title":"Install an entropy daemon"},{"location":"setting-up-the-environment/tomcat/entropy-daemon/#install-an-entropy-daemon","text":"Note This step is recommended if running CAS on virtual Linux servers. It is not necessary if running CAS on physical Linux servers or Windows servers of either type. A common problem on virtual Linux servers is that the /dev/random device will run low on entropy, because most of the sources the kernel uses to build up the entropy pool are hardware-based, and therefore do not exist in a virtual environment. If there\u2019s not enough entropy available when Tomcat is started, it can often take two or three minutes or longer for the server to start. Once Tomcat has started and the CAS application has been loaded, entropy is still required to establish secure (HTTPS) connections with authenticating users\u2019 browsers and protected applications. A lack of available entropy will adversely affect the performance of the application by limiting the rate at which connections can be processed. To improve the size of the entropy pool on Linux, it\u2019s possible to feed random data from an external source into /dev/random. One way to do this is the haveged daemon, which uses the HAVEGE (HArdware Volatile Entropy Gathering and Expansion) algorithm to harvest the indirect effects of hardware events on hidden processor state (caches, branch predictors, memory translation tables, etc) to generate random bytes with which to fill /dev/random whenever the supply of random bits falls below the low water mark of the device. We will use this approach to avoid entropy depletion on the CAS servers. Red Hat does not offer haveged on RHEL 7, but it can be installed from the Fedora Project\u2019s Extra Packages for Enterprise Linux (EPEL) repository. I typically find at least ONE package I need from EPEL on each server I'm involved in, so it's part of my normal build process.","title":"Install an entropy daemon"},{"location":"setting-up-the-environment/tomcat/entropy-daemon/#install-the-epel-repository","text":"HAVEGE is needed on each CAS server, and since it needs EPEL, that is needed on each CAS server as well. dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm !!! note: According to EPEL: \"on RHEL 8 it is required to also enable the codeready-builder-for-rhel-8-*-rpms repository since EPEL packages may depend on packages from it\". I haven't needed it for the installed packages, but to be safe - I recommend following their guidance. # Installation commands for codeready-building are below. ARCH=$( /bin/arch ) subscription-manager repos --enable \"codeready-builder-for-rhel-8-${ARCH}-rpms\" # Note: since all our servers here are x86_64, I just run the following: subscription-manager repos --enable \"codeready-builder-for-rhel-8-x86_64-rpms\"","title":"Install the EPEL repository"},{"location":"setting-up-the-environment/tomcat/entropy-daemon/#install-enable-and-start-haveged","text":"# Install haveged dnf install haveged # Enable the service systemctl enable haveged # Start the service systemctl start haveged # Verify that it is running systemctl status haveged","title":"Install, enable, and start haveged"},{"location":"setting-up-the-environment/tomcat/entropy-daemon/#references","text":"Extra Packages for Enterprise Linux (EPEL) haveged - A simple entropy daemon","title":"References"},{"location":"setting-up-the-environment/tomcat/java/","text":"Install Java CAS 6 requires Java 11 or later. Due to the licensing changes from Oracle, I have only used OpenJDK for the last several years. If you have the licensing from Oracle and prefer their version, go ahead! Likewise there's also AdoptOpenJDK but I only have direct experience using OpenJDK with CAS 5 or 6. OpenJDK has the advantage of being directly in the RHEL repositories, so it's one less thing to manage outside of the OS package management. This is needed on the build servers, and all the CAS servers. dnf install java-11-openjdk java-11-openjdk-devel You can have multiple Java versions installed, but you will want to have JDK 11 as the default (or will have to make sure it's the default for Tomcat at least). To check which is the default, use: java --version","title":"Install Java"},{"location":"setting-up-the-environment/tomcat/java/#install-java","text":"CAS 6 requires Java 11 or later. Due to the licensing changes from Oracle, I have only used OpenJDK for the last several years. If you have the licensing from Oracle and prefer their version, go ahead! Likewise there's also AdoptOpenJDK but I only have direct experience using OpenJDK with CAS 5 or 6. OpenJDK has the advantage of being directly in the RHEL repositories, so it's one less thing to manage outside of the OS package management. This is needed on the build servers, and all the CAS servers. dnf install java-11-openjdk java-11-openjdk-devel You can have multiple Java versions installed, but you will want to have JDK 11 as the default (or will have to make sure it's the default for Tomcat at least). To check which is the default, use: java --version","title":"Install Java"},{"location":"setting-up-the-environment/tomcat/resource-caching/","text":"Tune resource caching settings Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. With Ansible, the context.xml file will be a template pushed from Ansible. To improve performance, Tomcat is configured by default to cache static resources. However, the size of the cache is too small to work effectively with the CAS application. To tune Tomcat\u2019s cache settings, edit the file /etc/tomcat/context.xml , locate the definition of the default context (around line 19), and add a directive at the bottom: <!--Before changes--> <Context> <!-- Default set of monitored resources. If one of these changes, the --> <!-- web application will be reloaded. --> <WatchedResource> WEB-INF/web.xml </WatchedResource> <WatchedResource> WEB-INF/tomcat-web.xml </WatchedResource> <WatchedResource> ${catalina.base}/conf/web.xml </WatchedResource> <!-- Uncomment this to disable session persistence across Tomcat restarts --> <!-- <Manager pathname=\"\" /> --> </Context> <!--After changes--> <Context> <!-- Default set of monitored resources. If one of these changes, the --> <!-- web application will be reloaded. --> <WatchedResource> WEB-INF/web.xml </WatchedResource> <WatchedResource> WEB-INF/tomcat-web.xml </WatchedResource> <WatchedResource> ${catalina.base}/conf/web.xml </WatchedResource> <!-- Uncomment this to disable session persistence across Tomcat restarts --> <!-- <Manager pathname=\"\" /> --> <Resources cachingAllowed= \"true\" cacheMaxSize= \"40960\" cacheTtl= \"60000\" /> </Context>","title":"Tune resource caching settings"},{"location":"setting-up-the-environment/tomcat/resource-caching/#tune-resource-caching-settings","text":"Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. With Ansible, the context.xml file will be a template pushed from Ansible. To improve performance, Tomcat is configured by default to cache static resources. However, the size of the cache is too small to work effectively with the CAS application. To tune Tomcat\u2019s cache settings, edit the file /etc/tomcat/context.xml , locate the definition of the default context (around line 19), and add a directive at the bottom: <!--Before changes--> <Context> <!-- Default set of monitored resources. If one of these changes, the --> <!-- web application will be reloaded. --> <WatchedResource> WEB-INF/web.xml </WatchedResource> <WatchedResource> WEB-INF/tomcat-web.xml </WatchedResource> <WatchedResource> ${catalina.base}/conf/web.xml </WatchedResource> <!-- Uncomment this to disable session persistence across Tomcat restarts --> <!-- <Manager pathname=\"\" /> --> </Context> <!--After changes--> <Context> <!-- Default set of monitored resources. If one of these changes, the --> <!-- web application will be reloaded. --> <WatchedResource> WEB-INF/web.xml </WatchedResource> <WatchedResource> WEB-INF/tomcat-web.xml </WatchedResource> <WatchedResource> ${catalina.base}/conf/web.xml </WatchedResource> <!-- Uncomment this to disable session persistence across Tomcat restarts --> <!-- <Manager pathname=\"\" /> --> <Resources cachingAllowed= \"true\" cacheMaxSize= \"40960\" cacheTtl= \"60000\" /> </Context>","title":"Tune resource caching settings"},{"location":"setting-up-the-environment/tomcat/systemd-service/","text":"Configure systemd to start Tomcat Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. With Ansible, the unit file will be an Ansible template that it will push out and enable. RHEL, since version 7, has used systemd (instead of old sysv init scripts) to manage system resources. A unit in systemd is any resource systemd knows how to operate on and manage. This will give you a basic unit file with the ability to start/stop/restart the service (including on boot). Definte Tomcat as a service unit Create a new file: /etc/systemd/system/tomcat.service with the contents below: [Unit] Description=Apache Tomcat Web Application Container After=network.target [Service] Type=forking PIDFile=/var/run/tomcat.pid UMask=0007 # Tomcat variables Environment='JAVA_HOME=/usr/lib/jvm/java-openjdk' Environment='CATALINA_PID=/var/run/tomcat.pid' Environment='CATALINA_HOME=/opt/tomcat/latest' Environment='CATALINA_BASE=/opt/tomcat/latest' Environment='CATALINA_OPTS=-Xms512M -Xmx2048M -XX:+UseParallelGC -server' # Needed to make use of Tomcat Native Library Environment='LD_LIBRARY_PATH=/opt/tomcat/latest/lib' ExecStart=/opt/tomcat/latest/bin/jsvc \\ -Dcatalina.home=${CATALINA_HOME} \\ -Dcatalina.base=${CATALINA_BASE} \\ -Djava.awt.headless=true \\ -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \\ -Djava.util.logging.config.file=${CATALINA_BASE}/conf/logging.properties \\ -cp ${CATALINA_HOME}/bin/commons-daemon.jar:${CATALINA_HOME}/bin/bootstrap.jar:${CATALINA_HOME}/bin/tomcat-juli.jar \\ -pidfile ${CATALINA_PID} \\ -java-home ${JAVA_HOME} \\ -user tomcat \\ $CATALINA_OPTS \\ org.apache.catalina.startup.Bootstrap ExecStop=/opt/tomcat/latest/bin/jsvc \\ -pidfile ${CATALINA_PID} \\ -stop \\ org.apache.catalina.startup.Bootstrap [Install] WantedBy=multi-user.target Enable the Tomcat service Set the appropriate SELinux file context and file permissions: restorecon /etc/systemd/system/tomcat.service chmod 644 /etc/systemd/system/tomcat.service Enable the service - which will cause Tomcat to be started at boot. systemctl enable tomcat.service You can then stop/start/restart and check the status of Tomcat systemctl start tomcat systemctl stop tomcat systemctl restart tomcat systemctl status tomcat","title":"Configure systemd to start tomcat"},{"location":"setting-up-the-environment/tomcat/systemd-service/#configure-systemd-to-start-tomcat","text":"Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. With Ansible, the unit file will be an Ansible template that it will push out and enable. RHEL, since version 7, has used systemd (instead of old sysv init scripts) to manage system resources. A unit in systemd is any resource systemd knows how to operate on and manage. This will give you a basic unit file with the ability to start/stop/restart the service (including on boot).","title":"Configure systemd to start Tomcat"},{"location":"setting-up-the-environment/tomcat/systemd-service/#definte-tomcat-as-a-service-unit","text":"Create a new file: /etc/systemd/system/tomcat.service with the contents below: [Unit] Description=Apache Tomcat Web Application Container After=network.target [Service] Type=forking PIDFile=/var/run/tomcat.pid UMask=0007 # Tomcat variables Environment='JAVA_HOME=/usr/lib/jvm/java-openjdk' Environment='CATALINA_PID=/var/run/tomcat.pid' Environment='CATALINA_HOME=/opt/tomcat/latest' Environment='CATALINA_BASE=/opt/tomcat/latest' Environment='CATALINA_OPTS=-Xms512M -Xmx2048M -XX:+UseParallelGC -server' # Needed to make use of Tomcat Native Library Environment='LD_LIBRARY_PATH=/opt/tomcat/latest/lib' ExecStart=/opt/tomcat/latest/bin/jsvc \\ -Dcatalina.home=${CATALINA_HOME} \\ -Dcatalina.base=${CATALINA_BASE} \\ -Djava.awt.headless=true \\ -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \\ -Djava.util.logging.config.file=${CATALINA_BASE}/conf/logging.properties \\ -cp ${CATALINA_HOME}/bin/commons-daemon.jar:${CATALINA_HOME}/bin/bootstrap.jar:${CATALINA_HOME}/bin/tomcat-juli.jar \\ -pidfile ${CATALINA_PID} \\ -java-home ${JAVA_HOME} \\ -user tomcat \\ $CATALINA_OPTS \\ org.apache.catalina.startup.Bootstrap ExecStop=/opt/tomcat/latest/bin/jsvc \\ -pidfile ${CATALINA_PID} \\ -stop \\ org.apache.catalina.startup.Bootstrap [Install] WantedBy=multi-user.target","title":"Definte Tomcat as a service unit"},{"location":"setting-up-the-environment/tomcat/systemd-service/#enable-the-tomcat-service","text":"Set the appropriate SELinux file context and file permissions: restorecon /etc/systemd/system/tomcat.service chmod 644 /etc/systemd/system/tomcat.service Enable the service - which will cause Tomcat to be started at boot. systemctl enable tomcat.service You can then stop/start/restart and check the status of Tomcat systemctl start tomcat systemctl stop tomcat systemctl restart tomcat systemctl status tomcat","title":"Enable the Tomcat service"},{"location":"setting-up-the-environment/tomcat/tomcat-dependencies/","text":"Tomcat Dependencies Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. As discussed in the Tomcat Overview , we will be installing: Apache Portable Runtime (APR) - as per Apache, \"Tomcat can use the Apache Portable Runtime to provide superior scalability, performance, and better integration with native server technologies\" Tomcat Native Library - this is best described on the Apache site as \"an optional component for use with Apache Tomcat that allows Tomcat to use certain native resources for performance, compatibility, etc.\" Apache Commons Daemon - this allows Apache to be started as root to perform some privileged operations, then switch to a non-privileged user. The Tomcat Native Library and Commons Daemon are shipped with Tomcat but need to be compiled. APR is downloaded and installed separately from Apache. Apache Portable Runtime The Tomcat Native Library, which will be installed later here, depends on the Apache Portable Runtime (APR) library. As with Tomcat itself, we'll be installing APR within /opt/apr - with a symlink to the latest version. To download, compile, and install this, see the following: Note Your URL in the wget command below will differ depending on which mirror you are getting from the APR Download page, and which specific version of APR you are downloading (1.7.0 was released in April 2019 and it does not change in version nearly as much as Apache Tomcat). Replace 1.7.0 with the latest version. [root@login6devb ~]# mkdir -p /opt/apr/apr-1.7.0 [root@login6devb ~]# ln -s /opt/apr/apr-1.7.0 /opt/apr/latest [root@login6devb ~]# cd /tmp/ [root@login6devb tmp]# wget https://mirrors.ocf.berkeley.edu/apache//apr/apr-1.7.0.tar.gz (download progress will show) [root@login6devb tmp]# tar xzf apr-1.7.0.tar.gz (There will be a lot of output - look for errors. There may be an error of \"rm: cannot remove 'libtoolT': No such file or directory\" which appears harmless. If you get an error like 'no acceptable C compiler found in $PATH' - make sure gcc is installed. This is listed in the prerequisies section of the tomcat-overview.) [root@login6devb tmp]# cd apr-1.7.0 [root@login6devb apr-1.7.0]# make (There will be a lot of output - look for errors.) [root@login6devb apr-1.7.0]# make test (There will be a lot of output and it may take a while to run - look for errors.) [root@login6devb apr-1.7.0]# make install (There will be a lot of output - look for errors.) [root@login6devb tmp]# rm -rf /tmp/apr-1.7.0 /tmp/apr-1.7.0.tar.gz When it's done - you'll have /opt/apr/apr-1.7.0 (or whatever version) installed and with /opt/apr/latest as a symlink to the latest version. This way you can update APR to a later version without having to recompile other applications that use it. Tomcat Native Library The source for Tomcat Native Library is included in the Tomcat version that was downloaded in the previous page. It has to be extracted, compiled, and installed. Note: The tomcat native version may change between Tomcat minor releases. For example, it is 1.2.26 as of Tomcat 9.0.43 . To do so: [root@login6devb ~]# cd /opt/tomcat/latest/bin/ [root@login6devb bin]# tar xzf tomcat-native.tar.gz [root@login6devb bin]# cd tomcat-native-*-src/native [root@login6devb native]# ./configure \\ > --with-java-home = /usr/lib/jvm/java-openjdk \\ > --with-apr = /opt/apr/latest/bin/apr-1-config \\ > --prefix = /opt/tomcat/apache-tomcat-9.0.43 (There will be a lot of output - look for errors.) [root@login6devb native]# make (There will be a lot of output - look for errors. You're probably tired of me saying this though!) [root@login6devb native]# make install (There will be a lot of output - look for errors.) [root@login6devb native]# cd ../.. [root@login6devb bin]# rm -rf tomcat-native-*-src When done - the Tomcat Native Library will be installed in the lib directory of the version of Tomcat you're working in. You can see the 'libtcnative' files there. Apache Commons Daemon (jsvc) The Apache Commons Daemon (jsvc) allows Tomcat to be started as root to perform some privileged operations (such as binding to ports below 1024) and then switch identity to run as a non-privileged user, which is better from a security perspective. Like the Tomcat Native Library, the Commons Daemon is included as part of the Tomcat distribution; it just needs to be extracted, compiled, and installed. Note: Like the tomcat native, library, the apache commons daemon version may change between Tomcat minor releases. For example, it is 1.2.26 as of Tomcat 9.0.43 . To do so: [root@login6devb ~]# cd /opt/tomcat/latest/bin/ [root@login6devb bin]# tar xzf commons-daemon-native.tar.gz [root@login6devb bin]# cd commons-daemon-*-native-src/unix [root@login6devb unix]# ./configure --with-java = /usr/lib/jvm/java-openjdk (There will be a lot of output - look for errors.) [root@login6devb unix]# make [root@login6devb unix]# mv jsvc ../.. [root@login6devb unix]# cd ../.. [root@login6devb unix]# rm -rf commons-daemon-*-native-src This installs the jsvc binary within the bin directory of the version of Tomcat you're working in.","title":"Install Tomcat dependencies"},{"location":"setting-up-the-environment/tomcat/tomcat-dependencies/#tomcat-dependencies","text":"Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. As discussed in the Tomcat Overview , we will be installing: Apache Portable Runtime (APR) - as per Apache, \"Tomcat can use the Apache Portable Runtime to provide superior scalability, performance, and better integration with native server technologies\" Tomcat Native Library - this is best described on the Apache site as \"an optional component for use with Apache Tomcat that allows Tomcat to use certain native resources for performance, compatibility, etc.\" Apache Commons Daemon - this allows Apache to be started as root to perform some privileged operations, then switch to a non-privileged user. The Tomcat Native Library and Commons Daemon are shipped with Tomcat but need to be compiled. APR is downloaded and installed separately from Apache.","title":"Tomcat Dependencies"},{"location":"setting-up-the-environment/tomcat/tomcat-dependencies/#apache-portable-runtime","text":"The Tomcat Native Library, which will be installed later here, depends on the Apache Portable Runtime (APR) library. As with Tomcat itself, we'll be installing APR within /opt/apr - with a symlink to the latest version. To download, compile, and install this, see the following: Note Your URL in the wget command below will differ depending on which mirror you are getting from the APR Download page, and which specific version of APR you are downloading (1.7.0 was released in April 2019 and it does not change in version nearly as much as Apache Tomcat). Replace 1.7.0 with the latest version. [root@login6devb ~]# mkdir -p /opt/apr/apr-1.7.0 [root@login6devb ~]# ln -s /opt/apr/apr-1.7.0 /opt/apr/latest [root@login6devb ~]# cd /tmp/ [root@login6devb tmp]# wget https://mirrors.ocf.berkeley.edu/apache//apr/apr-1.7.0.tar.gz (download progress will show) [root@login6devb tmp]# tar xzf apr-1.7.0.tar.gz (There will be a lot of output - look for errors. There may be an error of \"rm: cannot remove 'libtoolT': No such file or directory\" which appears harmless. If you get an error like 'no acceptable C compiler found in $PATH' - make sure gcc is installed. This is listed in the prerequisies section of the tomcat-overview.) [root@login6devb tmp]# cd apr-1.7.0 [root@login6devb apr-1.7.0]# make (There will be a lot of output - look for errors.) [root@login6devb apr-1.7.0]# make test (There will be a lot of output and it may take a while to run - look for errors.) [root@login6devb apr-1.7.0]# make install (There will be a lot of output - look for errors.) [root@login6devb tmp]# rm -rf /tmp/apr-1.7.0 /tmp/apr-1.7.0.tar.gz When it's done - you'll have /opt/apr/apr-1.7.0 (or whatever version) installed and with /opt/apr/latest as a symlink to the latest version. This way you can update APR to a later version without having to recompile other applications that use it.","title":"Apache Portable Runtime"},{"location":"setting-up-the-environment/tomcat/tomcat-dependencies/#tomcat-native-library","text":"The source for Tomcat Native Library is included in the Tomcat version that was downloaded in the previous page. It has to be extracted, compiled, and installed. Note: The tomcat native version may change between Tomcat minor releases. For example, it is 1.2.26 as of Tomcat 9.0.43 . To do so: [root@login6devb ~]# cd /opt/tomcat/latest/bin/ [root@login6devb bin]# tar xzf tomcat-native.tar.gz [root@login6devb bin]# cd tomcat-native-*-src/native [root@login6devb native]# ./configure \\ > --with-java-home = /usr/lib/jvm/java-openjdk \\ > --with-apr = /opt/apr/latest/bin/apr-1-config \\ > --prefix = /opt/tomcat/apache-tomcat-9.0.43 (There will be a lot of output - look for errors.) [root@login6devb native]# make (There will be a lot of output - look for errors. You're probably tired of me saying this though!) [root@login6devb native]# make install (There will be a lot of output - look for errors.) [root@login6devb native]# cd ../.. [root@login6devb bin]# rm -rf tomcat-native-*-src When done - the Tomcat Native Library will be installed in the lib directory of the version of Tomcat you're working in. You can see the 'libtcnative' files there.","title":"Tomcat Native Library"},{"location":"setting-up-the-environment/tomcat/tomcat-dependencies/#apache-commons-daemon-jsvc","text":"The Apache Commons Daemon (jsvc) allows Tomcat to be started as root to perform some privileged operations (such as binding to ports below 1024) and then switch identity to run as a non-privileged user, which is better from a security perspective. Like the Tomcat Native Library, the Commons Daemon is included as part of the Tomcat distribution; it just needs to be extracted, compiled, and installed. Note: Like the tomcat native, library, the apache commons daemon version may change between Tomcat minor releases. For example, it is 1.2.26 as of Tomcat 9.0.43 . To do so: [root@login6devb ~]# cd /opt/tomcat/latest/bin/ [root@login6devb bin]# tar xzf commons-daemon-native.tar.gz [root@login6devb bin]# cd commons-daemon-*-native-src/unix [root@login6devb unix]# ./configure --with-java = /usr/lib/jvm/java-openjdk (There will be a lot of output - look for errors.) [root@login6devb unix]# make [root@login6devb unix]# mv jsvc ../.. [root@login6devb unix]# cd ../.. [root@login6devb unix]# rm -rf commons-daemon-*-native-src This installs the jsvc binary within the bin directory of the version of Tomcat you're working in.","title":"Apache Commons Daemon (jsvc)"},{"location":"setting-up-the-environment/tomcat/tomcat-harden/","text":"Harden the installation Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. The Tomcat Security Considerations document makes several recommendations for hardening a Tomcat installation: Tomcat should not be run as the root user; it should be run as a dedicated user (usually named tomcat) that has minimum operating system permissions. It should not be possible to log in remotely as the tomcat user. All Tomcat files should be owned by user root and group tomcat (the tomcat user\u2019s default group should be group tomcat). File/directory permissions should be set to owner read/write, group read only, and world none. The exceptions are the logs, temp, and work directories, which should be owned by the tomcat user instead of root. The default and example web applications included with the Tomcat distribution should be removed if they are not needed. Auto-deployment should be disabled, and web applications should be deployed as exploded directories rather than web application archives (WAR files). Implementing these recommendations means that, even if an attacker compromises the Tomcat process, he or she cannot change the Tomcat configuration, deploy new web applications, or modify existing web applications. Create a tomcat user and group [root@login6devb ~]# groupadd -r tomcat [root@login6devb ~]# useradd -r -d /opt/tomcat -g tomcat -s /sbin/nologin tomcat (This gives a 'shell' of /sbin/nologin which prevents the user from logging in) Set file ownership and permissions Some of these should be owned by user:root and group:tomcat (conf and webapps). Others (logs temp work) should be owned by user/group:tomcat. mkdir -p /opt/tomcat/latest/conf/Catalina/localhost cd /opt/tomcat/latest/conf chown -R root:tomcat . chmod -R u+rwX,g+rX,o = . chmod -R g-w . cd /opt/tomcat/latest/webapps chown -R root:tomcat . chmod -R u+rwX,g+rX,o = . chmod -R g-w . cd /opt/tomcat/latest/logs chown -R tomcat:tomcat . chmod -R u+rwX,g+rX,o = . chmod -R g-w . cd /opt/tomcat/latest/temp chown -R tomcat:tomcat . chmod -R u+rwX,g+rX,o = . chmod -R g-w . cd /opt/tomcat/latest/work chown -R tomcat:tomcat . chmod -R u+rwX,g+rX,o = . chmod -R g-w . Remove example webapps Unless you have a good reason, these should all be removed. If you do need to keep these, you'll want to heavily restrict access to them. [root@login6devb ~]# cd /opt/tomcat/latest/ [root@login6devb latest]# rm -rf temp/* work/* [root@login6devb latest]# cd webapps/ [root@login6devb webapps]# rm -rf docs examples host-manager manager Note Important: The command above does not remove the ROOT web application from the webapps directory because it can be useful in a development/test environment to quickly determine whether Tomcat is working properly. However, when deploying Tomcat to production servers, the ROOT application should be removed along with the rest of the default web applications. To do Still need to add guidance on other aspects of the Tomcat Security Considerations document, such as server.xml configuration. References Tomcat Security Considerations","title":"Harden the installation"},{"location":"setting-up-the-environment/tomcat/tomcat-harden/#harden-the-installation","text":"Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. The Tomcat Security Considerations document makes several recommendations for hardening a Tomcat installation: Tomcat should not be run as the root user; it should be run as a dedicated user (usually named tomcat) that has minimum operating system permissions. It should not be possible to log in remotely as the tomcat user. All Tomcat files should be owned by user root and group tomcat (the tomcat user\u2019s default group should be group tomcat). File/directory permissions should be set to owner read/write, group read only, and world none. The exceptions are the logs, temp, and work directories, which should be owned by the tomcat user instead of root. The default and example web applications included with the Tomcat distribution should be removed if they are not needed. Auto-deployment should be disabled, and web applications should be deployed as exploded directories rather than web application archives (WAR files). Implementing these recommendations means that, even if an attacker compromises the Tomcat process, he or she cannot change the Tomcat configuration, deploy new web applications, or modify existing web applications.","title":"Harden the installation"},{"location":"setting-up-the-environment/tomcat/tomcat-harden/#create-a-tomcat-user-and-group","text":"[root@login6devb ~]# groupadd -r tomcat [root@login6devb ~]# useradd -r -d /opt/tomcat -g tomcat -s /sbin/nologin tomcat (This gives a 'shell' of /sbin/nologin which prevents the user from logging in)","title":"Create a tomcat user and group"},{"location":"setting-up-the-environment/tomcat/tomcat-harden/#set-file-ownership-and-permissions","text":"Some of these should be owned by user:root and group:tomcat (conf and webapps). Others (logs temp work) should be owned by user/group:tomcat. mkdir -p /opt/tomcat/latest/conf/Catalina/localhost cd /opt/tomcat/latest/conf chown -R root:tomcat . chmod -R u+rwX,g+rX,o = . chmod -R g-w . cd /opt/tomcat/latest/webapps chown -R root:tomcat . chmod -R u+rwX,g+rX,o = . chmod -R g-w . cd /opt/tomcat/latest/logs chown -R tomcat:tomcat . chmod -R u+rwX,g+rX,o = . chmod -R g-w . cd /opt/tomcat/latest/temp chown -R tomcat:tomcat . chmod -R u+rwX,g+rX,o = . chmod -R g-w . cd /opt/tomcat/latest/work chown -R tomcat:tomcat . chmod -R u+rwX,g+rX,o = . chmod -R g-w .","title":"Set file ownership and permissions"},{"location":"setting-up-the-environment/tomcat/tomcat-harden/#remove-example-webapps","text":"Unless you have a good reason, these should all be removed. If you do need to keep these, you'll want to heavily restrict access to them. [root@login6devb ~]# cd /opt/tomcat/latest/ [root@login6devb latest]# rm -rf temp/* work/* [root@login6devb latest]# cd webapps/ [root@login6devb webapps]# rm -rf docs examples host-manager manager Note Important: The command above does not remove the ROOT web application from the webapps directory because it can be useful in a development/test environment to quickly determine whether Tomcat is working properly. However, when deploying Tomcat to production servers, the ROOT application should be removed along with the rest of the default web applications.","title":"Remove example webapps"},{"location":"setting-up-the-environment/tomcat/tomcat-harden/#to-do","text":"Still need to add guidance on other aspects of the Tomcat Security Considerations document, such as server.xml configuration.","title":"To do"},{"location":"setting-up-the-environment/tomcat/tomcat-harden/#references","text":"Tomcat Security Considerations","title":"References"},{"location":"setting-up-the-environment/tomcat/tomcat-install/","text":"Tomcat Installation Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. As mentioned in the [architecture] section, RHEL 8 doesn't package Tomcat (and RHEL 7 only packaged Tomcat 8.0.x) so this is both how I've had Tomcat managed in RHEL 7 for CAS 5, as well as how I'm installing and maintaining Tomcat 9.0.x on RHEL 8. Note Your URL in the wget command below will differ depending on which mirror you are getting from the Tomcat Download page, and which specific version of Tomcat you are downloading (9.0.43 was the latest in the 9.0.x branch when this page was last updated.) [root@login6devb ~]# mkdir -p /opt/tomcat [root@login6devb ~]# cd /opt/tomcat [root@login6devb tomcat]# wget https://mirrors.ocf.berkeley.edu/apache/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.tar.gz (download progress will show) [root@login6devb tomcat]# tar xzf apache-tomcat-9.0.43.tar.gz [root@login6devb tomcat]# ln -s /opt/tomcat/apache-tomcat-9.0.43 latest [root@login6devb tomcat]# rm -f apache-tomcat-9.0.43.tar.gz [root@login6devb tomcat]#","title":"Install Tomcat"},{"location":"setting-up-the-environment/tomcat/tomcat-install/#tomcat-installation","text":"Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. As mentioned in the [architecture] section, RHEL 8 doesn't package Tomcat (and RHEL 7 only packaged Tomcat 8.0.x) so this is both how I've had Tomcat managed in RHEL 7 for CAS 5, as well as how I'm installing and maintaining Tomcat 9.0.x on RHEL 8. Note Your URL in the wget command below will differ depending on which mirror you are getting from the Tomcat Download page, and which specific version of Tomcat you are downloading (9.0.43 was the latest in the 9.0.x branch when this page was last updated.) [root@login6devb ~]# mkdir -p /opt/tomcat [root@login6devb ~]# cd /opt/tomcat [root@login6devb tomcat]# wget https://mirrors.ocf.berkeley.edu/apache/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.tar.gz (download progress will show) [root@login6devb tomcat]# tar xzf apache-tomcat-9.0.43.tar.gz [root@login6devb tomcat]# ln -s /opt/tomcat/apache-tomcat-9.0.43 latest [root@login6devb tomcat]# rm -f apache-tomcat-9.0.43.tar.gz [root@login6devb tomcat]#","title":"Tomcat Installation"},{"location":"setting-up-the-environment/tomcat/tomcat-organize/","text":"Organize the installation Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. To make it easier to upgrade (and if needed, downgrade) Tomcat without having to reapply configuration file changes, or reinstall web applications, it's better (in my opinion) to pull certain directories outside of Tomcat's own directory, them symlink them from the Tomcat directory to a more permanent place on the operating system. You should still review release notes for upgrades, in case there are any configuration changes which could cause issues. Move the configuration (conf) directory to /etc/tomcat The conf directory has Tomcat's configuration files. If you're like me - you prefer to manage your configuration for applications from /etc. We'll be initially moving the conf directory to /etc/tomcat to give it a starting point, but then will create a symlink to point /opt/tomcat/latest/conf to /etc/tomcat [root@login6devb ~]# cd /opt/tomcat/latest/ [root@login6devb latest]# cp -pR conf /etc/tomcat [root@login6devb latest]# rm -rf conf [root@login6devb latest]# ln -s /etc/tomcat conf Move the logs directory to /var/log/tomcat We'll be doing the same with the logs directory as with configuration. This way your log files persist across versions (and you don't have to go hunt down the version that was running when you need logs from day 'x'). You may also keep /var/log or /var as separate partitions to avoid log files filling up the root filesystem. [root@login6devb ~]# cd /opt/tomcat/latest/ [root@login6devb latest]# cp -pR logs /var/log/tomcat [root@login6devb latest]# rm -rf logs [root@login6devb latest]# ln -s /var/log/tomcat logs Move the webapps directory to /var/lib/tomcat Same drill as the last two - best to keep the webapps directory in a more permanent location. This way you don't have to move /opt/tomcat/apache-tomcat-{versionx}/webapps/cas.war to /opt/tomcat/apache-tomcat-{versiony}/webapps/ after each upgrade of Tomcat. [root@login6devb ~]# cd /opt/tomcat/latest/ [root@login6devb latest]# cp -pR webapps /var/lib/tomcat [root@login6devb latest]# rm -rf webapps [root@login6devb latest]# ln -s /var/lib/tomcat webapps Move the work directory to /var/cache/tomcat/work Tomcat\u2019s work directory is where translated servlet source files and JSP/JSF classes are stored. Its contents are created automatically, but don\u2019t need to be recreated unless the application has been changed. To reduce startup time, the contents of this directory should be preserved across application restarts and system reboots. Linux systems provide the /var/cache directory for just that purpose, so we can put the work directory there. To do this: [root@login6devb ~]# cd /opt/tomcat/latest/ [root@login6devb latest]# mkdir /var/cache/tomcat [root@login6devb latest]# cp -pR work /var/cache/tomcat/work [root@login6devb latest]# rm -rf work [root@login6devb latest]# ln -s /var/cache/tomcat/work work Move the temp directory to /var/cache/tomcat/temp Tomcat provides a temp directory for web applications to store temporary files in. But like log files, temporary files can sometimes be very large, so storing them in /opt is probably not a good practice. But /tmp and /var/tmp are not the best places either, because we want to be able to limit access to Tomcat\u2019s temporary files (see Harden the installation). Therefore, we will create a new temp directory under /var/cache/tomcat. To do this: [root@login6devb ~]# cd /opt/tomcat/latest/ [root@login6devb latest]# cp -pR temp /var/cache/tomcat/temp [root@login6devb latest]# rm -rf temp [root@login6devb latest]# ln -s /var/cache/tomcat/temp temp Final layout Your layout should look like the following:","title":"Organize the installation"},{"location":"setting-up-the-environment/tomcat/tomcat-organize/#organize-the-installation","text":"Tip The steps below are for the CAS servers - not the build server. That being said - if you are going to install and maintain via Ansible - you don't need to do this manually, though it is worth seeing how to do it manually. To make it easier to upgrade (and if needed, downgrade) Tomcat without having to reapply configuration file changes, or reinstall web applications, it's better (in my opinion) to pull certain directories outside of Tomcat's own directory, them symlink them from the Tomcat directory to a more permanent place on the operating system. You should still review release notes for upgrades, in case there are any configuration changes which could cause issues.","title":"Organize the installation"},{"location":"setting-up-the-environment/tomcat/tomcat-organize/#move-the-configuration-conf-directory-to-etctomcat","text":"The conf directory has Tomcat's configuration files. If you're like me - you prefer to manage your configuration for applications from /etc. We'll be initially moving the conf directory to /etc/tomcat to give it a starting point, but then will create a symlink to point /opt/tomcat/latest/conf to /etc/tomcat [root@login6devb ~]# cd /opt/tomcat/latest/ [root@login6devb latest]# cp -pR conf /etc/tomcat [root@login6devb latest]# rm -rf conf [root@login6devb latest]# ln -s /etc/tomcat conf","title":"Move the configuration (conf) directory to /etc/tomcat"},{"location":"setting-up-the-environment/tomcat/tomcat-organize/#move-the-logs-directory-to-varlogtomcat","text":"We'll be doing the same with the logs directory as with configuration. This way your log files persist across versions (and you don't have to go hunt down the version that was running when you need logs from day 'x'). You may also keep /var/log or /var as separate partitions to avoid log files filling up the root filesystem. [root@login6devb ~]# cd /opt/tomcat/latest/ [root@login6devb latest]# cp -pR logs /var/log/tomcat [root@login6devb latest]# rm -rf logs [root@login6devb latest]# ln -s /var/log/tomcat logs","title":"Move the logs directory to /var/log/tomcat"},{"location":"setting-up-the-environment/tomcat/tomcat-organize/#move-the-webapps-directory-to-varlibtomcat","text":"Same drill as the last two - best to keep the webapps directory in a more permanent location. This way you don't have to move /opt/tomcat/apache-tomcat-{versionx}/webapps/cas.war to /opt/tomcat/apache-tomcat-{versiony}/webapps/ after each upgrade of Tomcat. [root@login6devb ~]# cd /opt/tomcat/latest/ [root@login6devb latest]# cp -pR webapps /var/lib/tomcat [root@login6devb latest]# rm -rf webapps [root@login6devb latest]# ln -s /var/lib/tomcat webapps","title":"Move the webapps directory to /var/lib/tomcat"},{"location":"setting-up-the-environment/tomcat/tomcat-organize/#move-the-work-directory-to-varcachetomcatwork","text":"Tomcat\u2019s work directory is where translated servlet source files and JSP/JSF classes are stored. Its contents are created automatically, but don\u2019t need to be recreated unless the application has been changed. To reduce startup time, the contents of this directory should be preserved across application restarts and system reboots. Linux systems provide the /var/cache directory for just that purpose, so we can put the work directory there. To do this: [root@login6devb ~]# cd /opt/tomcat/latest/ [root@login6devb latest]# mkdir /var/cache/tomcat [root@login6devb latest]# cp -pR work /var/cache/tomcat/work [root@login6devb latest]# rm -rf work [root@login6devb latest]# ln -s /var/cache/tomcat/work work","title":"Move the work directory to /var/cache/tomcat/work"},{"location":"setting-up-the-environment/tomcat/tomcat-organize/#move-the-temp-directory-to-varcachetomcattemp","text":"Tomcat provides a temp directory for web applications to store temporary files in. But like log files, temporary files can sometimes be very large, so storing them in /opt is probably not a good practice. But /tmp and /var/tmp are not the best places either, because we want to be able to limit access to Tomcat\u2019s temporary files (see Harden the installation). Therefore, we will create a new temp directory under /var/cache/tomcat. To do this: [root@login6devb ~]# cd /opt/tomcat/latest/ [root@login6devb latest]# cp -pR temp /var/cache/tomcat/temp [root@login6devb latest]# rm -rf temp [root@login6devb latest]# ln -s /var/cache/tomcat/temp temp","title":"Move the temp directory to /var/cache/tomcat/temp"},{"location":"setting-up-the-environment/tomcat/tomcat-organize/#final-layout","text":"Your layout should look like the following:","title":"Final layout"},{"location":"setting-up-the-environment/tomcat/tomcat-overview/","text":"Tomcat overview Summary Apache Tomcat will be used as the Java Servlet container for CAS. To ensure best practices for security, and performance, the latest versions of OpenSSL, the Tomcat Native Library, the Apache Portable Runtime, and the latest in the 9.0.x series of Apache Tomcat will be used. Tomcat architecture For our Tomcat installation, I don't like to rely on the Red Hat distributed versions. This is since with RHEL 7 - they only provided Tomcat 8.0.x from their repositories, and with RHEL 8 - it's only provided as part of JBoss. Using this method - you get an easy to maintain environment, which relies on symlinks to keep the 'important' stuff (configurations, log files, servlets) outside of the installation directories. When done - you will have /opt/tomcat - and within that you'll have a directory for each Tomcat install you have (for example, /opt/tomcat/apache-tomcat-9.0.39 or /opt/tomcat/apache-tomcat-9.0.43), and a symlink (/opt/tomcat/latest) which points to the in-use version. This allows for a quick upgrade and rollback if there are issues. Then - within /opt/tomcat/apache-tomcat-9.0.x, you'll have symlinks to where things actually live, for example: /opt/tomcat/apache-tomcat-9.0.39/conf is a symlink to /etc/tomcat /opt/tomcat/apache-tomcat-9.0.39/logs is a symlink to /var/log/tomcat /opt/tomcat/apache-tomcat-9.0.39/temp is a symlink to /var/cache/tomcat/temp /opt/tomcat/apache-tomcat-9.0.39/webapps is a symlink to /var/lib/tomcat /opt/tomcat/apache-tomcat-9.0.39/work is a symlink to /var/cache/tomcat/work Components: EPEL (Extra Packages for Enterprise Linux) - which is needed for a couple packages. Haveged - for better entropy in random number generation than what is included by default Apache Portable Runtime Tomcat Native Library Apache Commons Daemon OpenJDK Apache HTTPD - since I hate doing SSL/TLS and a number of other things in Apache Tomcat directly. Prerequisites gcc libtool make policycoreutils-python dnf install gcc libtool make policycoreutils-python","title":"Tomcat Overview"},{"location":"setting-up-the-environment/tomcat/tomcat-overview/#tomcat-overview","text":"Summary Apache Tomcat will be used as the Java Servlet container for CAS. To ensure best practices for security, and performance, the latest versions of OpenSSL, the Tomcat Native Library, the Apache Portable Runtime, and the latest in the 9.0.x series of Apache Tomcat will be used.","title":"Tomcat overview"},{"location":"setting-up-the-environment/tomcat/tomcat-overview/#tomcat-architecture","text":"For our Tomcat installation, I don't like to rely on the Red Hat distributed versions. This is since with RHEL 7 - they only provided Tomcat 8.0.x from their repositories, and with RHEL 8 - it's only provided as part of JBoss. Using this method - you get an easy to maintain environment, which relies on symlinks to keep the 'important' stuff (configurations, log files, servlets) outside of the installation directories. When done - you will have /opt/tomcat - and within that you'll have a directory for each Tomcat install you have (for example, /opt/tomcat/apache-tomcat-9.0.39 or /opt/tomcat/apache-tomcat-9.0.43), and a symlink (/opt/tomcat/latest) which points to the in-use version. This allows for a quick upgrade and rollback if there are issues. Then - within /opt/tomcat/apache-tomcat-9.0.x, you'll have symlinks to where things actually live, for example: /opt/tomcat/apache-tomcat-9.0.39/conf is a symlink to /etc/tomcat /opt/tomcat/apache-tomcat-9.0.39/logs is a symlink to /var/log/tomcat /opt/tomcat/apache-tomcat-9.0.39/temp is a symlink to /var/cache/tomcat/temp /opt/tomcat/apache-tomcat-9.0.39/webapps is a symlink to /var/lib/tomcat /opt/tomcat/apache-tomcat-9.0.39/work is a symlink to /var/cache/tomcat/work","title":"Tomcat architecture"},{"location":"setting-up-the-environment/tomcat/tomcat-overview/#components","text":"EPEL (Extra Packages for Enterprise Linux) - which is needed for a couple packages. Haveged - for better entropy in random number generation than what is included by default Apache Portable Runtime Tomcat Native Library Apache Commons Daemon OpenJDK Apache HTTPD - since I hate doing SSL/TLS and a number of other things in Apache Tomcat directly.","title":"Components:"},{"location":"setting-up-the-environment/tomcat/tomcat-overview/#prerequisites","text":"gcc libtool make policycoreutils-python dnf install gcc libtool make policycoreutils-python","title":"Prerequisites"},{"location":"setting-up-the-environment/tomcat-ansible/handlers/","text":"Ansible Handlers setup for Tomcat Handlers in Ansible are used to run operations based on a change. For example, a template command in a playbook could have a 'notify: restart apache' section at the end. This would be run (at the end of the playbook) if that template command changes something. If nothing changes, with that specific template command at least, then that notify command wouldn't be triggered. roles/apache-tomcat/handlers/main.yml # handlers file for apache-tomcat # All that's really here for now is just commands to start, stop, and restart tomcat. - name : stop tomcat ansible.builtin.systemd : name : tomcat state : stopped - name : start tomcat ansible.builtin.systemd : name : tomcat state : started - name : restart tomcat ansible.builtin.systemd : name : tomcat state : restarted References Ansible systemd module Ansible - Handlers: running operations on change","title":"Setup Handlers"},{"location":"setting-up-the-environment/tomcat-ansible/handlers/#ansible-handlers-setup-for-tomcat","text":"Handlers in Ansible are used to run operations based on a change. For example, a template command in a playbook could have a 'notify: restart apache' section at the end. This would be run (at the end of the playbook) if that template command changes something. If nothing changes, with that specific template command at least, then that notify command wouldn't be triggered. roles/apache-tomcat/handlers/main.yml # handlers file for apache-tomcat # All that's really here for now is just commands to start, stop, and restart tomcat. - name : stop tomcat ansible.builtin.systemd : name : tomcat state : stopped - name : start tomcat ansible.builtin.systemd : name : tomcat state : started - name : restart tomcat ansible.builtin.systemd : name : tomcat state : restarted","title":"Ansible Handlers setup for Tomcat"},{"location":"setting-up-the-environment/tomcat-ansible/handlers/#references","text":"Ansible systemd module Ansible - Handlers: running operations on change","title":"References"},{"location":"setting-up-the-environment/tomcat-ansible/running-the-play/","text":"Running the play to install or upgrade Tomcat Before running - check that you have the following ready: The variables within the role's vars directory (see Setup Templates ) The templates within the role's templates directory (see Setup Templates ) The tasks directory including main.yml and all sub-tasks that it calls in the role's tasks directory (see Creating Tasks ) The ssh public key from the .ssh directory of the user on your ansible host, has been copied to the authorized_keys file of your target host (see Setup SSH public key authentication ) Running the playbook Once you have your Tomcat role ready (see the remaining pages) out - you would run it as follows: ansible-playbook site.yml --limit <yourCasServer> # Example, to run on one server ansible-playbook site.yml --limit login6devb # Example, to run on more than one ansible-playbook site.yml --limit login6deva,login6devb You may get warnings or errors. You will have to review those.","title":"Running the play"},{"location":"setting-up-the-environment/tomcat-ansible/running-the-play/#running-the-play-to-install-or-upgrade-tomcat","text":"","title":"Running the play to install or upgrade Tomcat"},{"location":"setting-up-the-environment/tomcat-ansible/running-the-play/#before-running-check-that-you-have-the-following-ready","text":"The variables within the role's vars directory (see Setup Templates ) The templates within the role's templates directory (see Setup Templates ) The tasks directory including main.yml and all sub-tasks that it calls in the role's tasks directory (see Creating Tasks ) The ssh public key from the .ssh directory of the user on your ansible host, has been copied to the authorized_keys file of your target host (see Setup SSH public key authentication )","title":"Before running - check that you have the following ready:"},{"location":"setting-up-the-environment/tomcat-ansible/running-the-play/#running-the-playbook","text":"Once you have your Tomcat role ready (see the remaining pages) out - you would run it as follows: ansible-playbook site.yml --limit <yourCasServer> # Example, to run on one server ansible-playbook site.yml --limit login6devb # Example, to run on more than one ansible-playbook site.yml --limit login6deva,login6devb You may get warnings or errors. You will have to review those.","title":"Running the playbook"},{"location":"setting-up-the-environment/tomcat-ansible/tasks/","text":"Task setup Main task file To keep things cleaner, I include chunks of the role in separate files. All must be referenced by the main.yml file within the role (ansible/roles/apache-tomcat/tasks/main.yml). They are called in order by main.yml. roles/apache-tomcat/tasks/main.yml: # tasks file for apache-tomcat - include_tasks : setup-prerequisites.yml # on RHEL7 - I have a playbook to download/compile OpenSSL as well but that's not needed on RHEL8. RHEL7 had a really old version of OpenSSL. - include_tasks : setup-apr.yml - include_tasks : install.yml - include_tasks : setup-tomcat-native.yml - include_tasks : setup-commons-daemon.yml - include_tasks : configure-tomcat.yml - include_tasks : post-install.yml Tip If you haven't used ansible - you may want to look up idempotency and what it means. An operation is idempotent if the result of performing it once is exactly the same as the result of performing it repeatedly without any intervening actions. For example in these playbooks, there are tasks to create users, create directories, or apply a config template. If Ansible detects that these are already in the desired - it will just mosey right along (indicating \"OK\" when that task is being processed). Setup Prerequisites I've left some of my older stuff in here for example's sake (since again, I still have to maintain some RHEL 7 and JDK 8 systems). I've highlighted the revelant portions for this. The example isn't the cleanest, but you can see how you can alter packages based on different needs (in thise case, dnf is used for RHEL 8 and yum for RHEL 7.). The Tomcat user and group are created as well at the bottom. If you use this, the 'jdk_version\" needs to be specified in your ansible hosts file, or some variable file. The ansible_distribution and ansible_distribution_major_version don't need to be specified as Ansible reads those from the hosts it connects to. roles/apache-tomcat/tasks/setup-prerequisites.yml: - name : Setup prerequisite dnf packages (RHEL 8 & JDK 11) ansible.builtin.dnf : name : - epel-release - java-11-openjdk - java-11-openjdk-devel - haveged - gcc - libtool - make - openssl-devel state : present when : ansible_distribution == 'RedHat' and ansible_distribution_major_version == '8' and jdk_version == 11 - name : Add tomcat group ansible.builtin.group : name : tomcat - name : Add tomcat user ansible.builtin.user : name : tomcat group : tomcat home : /opt/tomcat shell : /sbin/nologin createhome : yes system : yes - name : Make sure haveged is running and set to start on boot ansible.builtin.systemd : name : haveged state : started enabled : yes masked : no Setup Apache Portable Runtime (APR) The following section checks if the target version of APR is already installed. If not, it will download, unpack, compile, and install it. roles/apache-tomcat/tasks/setup-apr.yml: - name : Check if APR {{ apr_ver }} is already installed ansible.builtin.stat : path : /opt/apr/apr-{{ apr_ver }}/bin/apr-1-config register : apr_binary - name : Create base APR directory if it doesn't exist ansible.builtin.file : path : /opt/apr state : directory owner : root group : root - name : Create APR {{ apr_ver }} directory if it doesn't exist ansible.builtin.file : path : /opt/apr/apr-{{ apr_ver }} state : directory owner : root group : root - name : Check if APR {{ apr_ver }} is already downloaded ansible.builtin.stat : path : /root/apr-{{ apr_ver }}.tar.gz register : apr_tarball # Only download APR if APR {{ apr_ver }} isn't already installed, and the tarball isn't downloaded - name : Download APR ansible.builtin.get_url : url : \"{{ apr_archive_url }}\" dest : \"{{ apr_archive_dest }}\" when : apr_tarball.stat.exists == False and apr_binary.stat.exists == False # Only unpack apr archive if the apr binary doesn't already exist - name : Unpack APR archive ansible.builtin.unarchive : src : \"{{ apr_archive_dest }}\" dest : /root/ owner : root group : root remote_src : yes when : apr_binary.stat.exists == False # Only reconfigure if the APR directory for the version didn't already exist - name : Configure APR source ansible.builtin.command : ./configure --prefix=/opt/apr/apr-{{ apr_ver }} args : chdir : \"/root/apr-{{ apr_ver }}\" when : apr_binary.stat.exists == False # Only make if the APR directory for the version didn't already exist - name : Compile/install APR ansible.builtin.shell : make && make install args : chdir : \"/root/apr-{{ apr_ver }}\" when : apr_binary.stat.exists == False ## Handle APR symlink creation or repointing - name : Check if apr latest symlink exists ansible.builtin.stat : path : /opt/apr/latest register : apr_symlink # Create symlink if none exists, or repoint it if it is pointing to an older version - name : Create apr latest symlink to point to newly installed version ansible.builtin.file : src : \"/opt/apr/apr-{{ apr_ver }}\" dest : \"/opt/apr/latest\" owner : root group : root state : link when : apr_symlink.stat.exists == False or apr_symlink.stat.islnk # Cleanup - name : Remove apr source directory ansible.builtin.file : path : /root/apr-{{ apr_ver }} state : absent - name : Remove apr source tarball ansible.builtin.file : path : /root/apr-{{ apr_ver }}.tar.gz state : absent Install Apache Tomcat This section checks if the target version Tomcat is already installed. If not - it will download Tomcat, unpack the archive, and ensure the various directory symlinks (conf, log, temp, webapps, work) are already setup. If this is the first time Tomcat is being deployed on the target system (or the /etc/tomcat directory is otherwise empty), the contents of 'conf' from the downloaded tarball will be copied to /etc/tomcat. It will also setup the systemd unit file so it can eventually be started and set to start on boot. roles/apache-tomcat/tasks/install.yml: - name : Check if Tomcat {{ tomcat_ver }} directory exists ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }} register : tomcat_directory - name : Check if Tomcat {{ tomcat_ver }} tarball exists ansible.builtin.stat : path : \"{{ tomcat_archive_dest }}\" register : tomcat_tarball - name : Download Tomcat 8.5.x ansible.builtin.get_url : url : https://archive.apache.org/dist/tomcat/tomcat-8/v{{ tomcat_ver }}/bin/apache-tomcat-{{ tomcat_ver }}.tar.gz dest : \"{{ tomcat_archive_dest }}\" when : tomcat_tarball.stat.exists == False and tomcat_directory.stat.exists == False and tomcat_major_ver == 8.5 - name : Download Tomcat 9.0.x ansible.builtin.get_url : url : https://archive.apache.org/dist/tomcat/tomcat-9/v{{ tomcat_ver }}/bin/apache-tomcat-{{ tomcat_ver }}.tar.gz dest : \"{{ tomcat_archive_dest }}\" when : tomcat_tarball.stat.exists == False and tomcat_directory.stat.exists == False and tomcat_major_ver == 9.0 # Only unpack tomcat archive if the unpacked directory does not exist. # This cannot be used to install the same version without deletion of the old one - name : Unpack tomcat archive ansible.builtin.unarchive : src : \"{{ tomcat_archive_dest }}\" dest : /opt/tomcat owner : tomcat group : tomcat remote_src : yes when : tomcat_directory.stat.exists == False # Create the permanent tomcat conf, log, temp, webapps, work directories for later symlinking - name : Create Tomcat permanent conf directory ansible.builtin.file : path : /etc/tomcat state : directory owner : root group : tomcat mode : \"u=rwx,g=rx\" - name : Create Tomcat permanent log directory ansible.builtin.file : path : /var/log/tomcat state : directory owner : tomcat group : tomcat mode : \"u=rwx,g=rx\" - name : Create Tomcat permanent temp directory ansible.builtin.file : path : /var/cache/tomcat/temp state : directory owner : tomcat group : tomcat mode : \"u=rwx,g=rx\" - name : Create Tomcat permanent webapps directory ansible.builtin.file : path : /var/lib/tomcat state : directory owner : tomcat group : tomcat mode : \"u=rwx,g=rx\" - name : Create Tomcat permanent work directory ansible.builtin.file : path : /var/cache/tomcat/work state : directory owner : tomcat group : tomcat mode : \"u=rwx,g=rx\" # If server.xml exists - then we can assume /etc/tomcat has been populated. # - If so - don't change it # - If not, assume it hasn't been populated and copy the new Tomcat's /conf to /etc/tomcat/ - name : Check if server.xml exists ansible.builtin.stat : path : /etc/tomcat/server.xml register : server_xml - name : Copy files from conf directory ansible.builtin.copy : src : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/conf/ dest : /etc/tomcat/ remote_src : yes directory_mode : yes when : server_xml.stat.exists == False # If ROOT exists - then we can assume /var/lib/tomcat has been populated. # - If so - don't change it. # - If not, assume it hasn't been populated and copy the new Tomcat's ROOT over # - This needs to be updated to handle version updates of ROOT - name : Check ROOT exists ansible.builtin.stat : path : /var/lib/tomcat/ROOT register : root_webapps - name : Copy ROOT webapp directory ansible.builtin.copy : src : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/webapps/ROOT dest : /var/lib/tomcat/ remote_src : yes directory_mode : yes when : root_webapps.stat.exists == False ## remove directories (conf, logs, temp, webapps, work) and recreate as symlinks # conf - name : check {{ tomcat_ver }} conf directory ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/conf register : tomcat_conf_dir - name : Remove conf directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/conf state : absent when : tomcat_conf_dir.stat.isdir - name : Create conf symlink ansible.builtin.file : src : /etc/tomcat dest : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/conf owner : root group : tomcat state : link when : tomcat_conf_dir.stat.isdir or tomcat_conf_dir.stat.exists == False # logs - name : check {{ tomcat_ver }} logs directory ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/logs register : tomcat_logs_dir - name : Remove logs directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/logs state : absent when : tomcat_logs_dir.stat.isdir - name : Create logs symlink ansible.builtin.file : src : /var/log/tomcat dest : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/logs owner : tomcat group : tomcat state : link when : tomcat_logs_dir.stat.isdir or tomcat_logs_dir.stat.exists == False # temp - name : check {{ tomcat_ver }} temp directory ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/temp register : tomcat_temp_dir - name : Remove temp directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/temp state : absent when : tomcat_temp_dir.stat.isdir - name : Create temp symlink ansible.builtin.file : src : /var/cache/tomcat/temp dest : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/temp owner : tomcat group : tomcat state : link when : tomcat_temp_dir.stat.isdir or tomcat_temp_dir.stat.exists == False # webapps - name : check {{ tomcat_ver }} webapps directory ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/webapps register : tomcat_webapps_dir - name : Remove webapps directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/webapps state : absent when : tomcat_webapps_dir.stat.isdir - name : Create webapps symlink ansible.builtin.file : src : /var/lib/tomcat dest : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/webapps owner : root group : tomcat state : link when : tomcat_webapps_dir.stat.isdir or tomcat_webapps_dir.stat.exists == False # work - name : check {{ tomcat_ver }} work directory ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/work register : tomcat_work_dir - name : Remove webapps directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/work state : absent when : tomcat_work_dir.stat.isdir - name : Create work symlink ansible.builtin.file : src : /var/cache/tomcat/work dest : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/work owner : tomcat group : tomcat state : link when : tomcat_work_dir.stat.isdir or tomcat_webapps_dir.stat.exists == False # Setup systemd startup/shutdown script - name : Setup systemd startup/shutdown script ansible.builtin.template : src : tomcat.service.j2 dest : /etc/systemd/system/tomcat.service mode : 0644 owner : root group : root register : tomcat_service - name : Apply new SELinux file context to tomcat.service ansible.builtin.command : restorecon /etc/systemd/system/tomcat.service when : tomcat_service.changed - name : Reload systemd daemons after service update ansible.builtin.command : systemctl daemon-reload when : tomcat_service.changed Setup Tomcat Native Library This is where the Tomcat Native Library (if not already installed) gets unpacked, configured, compiled, and installed. roles/apache-tomcat/tasks/setup-tomcat-native.yml: - name : Check if Tomcat Native Library {{ tomcat_native_ver }} is already installed ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/lib/libtcnative-1.so register : tomcat_native_library # Untar tomcat native library - name : Unpack tomcat native library archive ansible.builtin.unarchive : src : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/tomcat-native.tar.gz\" dest : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/ owner : tomcat group : tomcat remote_src : yes when : tomcat_native_library.stat.exists == False # Only configure if the Tomcat Native Library directory for the version didn't already exist - name : Configure Tomcat Native Library (RHEL8) ansible.builtin.command : \"./configure --with-java-home={{ JAVA_HOME }} --with-apr=/opt/apr/latest/bin/apr-1-config --with-ssl=yes --prefix=/opt/tomcat/apache-tomcat-{{ tomcat_ver }}\" args : chdir : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/tomcat-native-{{ tomcat_native_ver }}-src/native\" when : tomcat_native_library.stat.exists == False and ansible_distribution == 'RedHat' and ansible_distribution_major_version == '8' # Only make if the Tomcat Native Library directory for the version didn't already exist - name : Compile/install Tomcat Native Library ansible.builtin.shell : make && make install args : chdir : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/tomcat-native-{{ tomcat_native_ver }}-src/native\" when : tomcat_native_library.stat.exists == False # Cleanup - name : Remove tomcat native source directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/tomcat-native-{{ tomcat_native_ver }}-src state : absent Setup Apache Tomcat Commons Daemon This is where the Tomcat Commons Daemon (if not already installed) gets unpacked, configured, compiled, and installed. roles/apache-tomcat/tasks/setup-commons-daemon.yml: - name : Check if Apache Tomcat Commons Daemon {{ commons_daemon_ver }} is already installed ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/jsvc register : commons_daemon_jsvc # Untar tomcat native library - name : Unpack Tomcat Commons Daemon native library ansible.builtin.unarchive : src : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/commons-daemon-native.tar.gz\" dest : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/\" owner : tomcat group : tomcat remote_src : yes when : commons_daemon_jsvc.stat.exists == False # Only configure if the Tomcat Native Library directory for the version didn't already exist - name : Configure Tomcat Commons Daemon native library (JDK 11) ansible.builtin.command : \"./configure --with-java={{ JAVA_HOME }}\" args : chdir : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/commons-daemon-{{ commons_daemon_ver }}-native-src/unix\" when : commons_daemon_jsvc.stat.exists == False and jdk_version == 11 # Only make if the Tomcat Native Library directory for the version didn't already exist - name : Compile Tomcat Commons Daemon native library ansible.builtin.shell : make args : chdir : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/commons-daemon-{{ commons_daemon_ver }}-native-src/unix\" when : commons_daemon_jsvc.stat.exists == False - name : Move jsvc file ansible.builtin.copy : src : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/commons-daemon-{{ commons_daemon_ver }}-native-src/unix/jsvc\" dest : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/\" remote_src : yes owner : root group : tomcat mode : 0755 when : commons_daemon_jsvc.stat.exists == False # Cleanup - name : Remove commons-daemon source directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/commons-daemon-{{ commons_daemon_ver }}-native-src state : absent Configure Tomcat This is where we take the template files that were created earlier for web.xml, server.xml, etc., and make sure they are copied over to the server. If any are updated, it will notify Tomcat to restart when done. This is basically just configuring the various files in /etc/tomcat. To initially create these files - download copies of them from a default Tomcat install to your Ansible host's roles/apache-tomcat/templates directory and alter them as needed. I will have copies of these files uploaded as well. roles/apache-tomcat/tasks/configure-tomcat.yml: - name : Setup catalina.properties ansible.builtin.template : src : cas6-catalina.properties.j2 dest : /etc/tomcat/catalina.properties mode : 0640 owner : root group : tomcat when : (\"login\" in inventory_hostname) notify : restart tomcat - name : Setup context.xml ansible.builtin.template : src : cas6-context.xml.j2 dest : /etc/tomcat/context.xml mode : 0640 owner : root group : tomcat when : (\"login\" in inventory_hostname) notify : restart tomcat - name : Setup server.xml ansible.builtin.template : src : cas6-server.xml.j2 dest : /etc/tomcat/server.xml mode : 0640 owner : root group : tomcat when : (\"login\" in inventory_hostname) - name : Setup web.xml ansible.builtin.template : src : cas6-web.xml.j2 dest : /etc/tomcat/web.xml mode : 0640 owner : root group : tomcat when : (\"login\" in inventory_hostname) notify : restart tomcat Post installation tasks If the installation fails (errors, not warnings) at any point - it won't get to here, so it shouldn't move the symlink and restart tomcat unless the install completed. It also won't 'notify' tomcat to restart if they didn't even have to create the symlink (or if the config files changed earlier) roles/apache-tomcat/tasks/post-install.yml: - name : Setup Apache Tomcat {{ tomcat_ver }} symlink ansible.builtin.file : src : /opt/tomcat/apache-tomcat-{{ tomcat_ver }} dest : /opt/tomcat/latest owner : root group : root state : link notify : restart tomcat # Cleanup - name : Remove tomcat tarball ansible.builtin.file : path : /root/apache-tomcat-{{ tomcat_ver }}.tar.gz state : absent","title":"Creating tasks"},{"location":"setting-up-the-environment/tomcat-ansible/tasks/#task-setup","text":"","title":"Task setup"},{"location":"setting-up-the-environment/tomcat-ansible/tasks/#main-task-file","text":"To keep things cleaner, I include chunks of the role in separate files. All must be referenced by the main.yml file within the role (ansible/roles/apache-tomcat/tasks/main.yml). They are called in order by main.yml. roles/apache-tomcat/tasks/main.yml: # tasks file for apache-tomcat - include_tasks : setup-prerequisites.yml # on RHEL7 - I have a playbook to download/compile OpenSSL as well but that's not needed on RHEL8. RHEL7 had a really old version of OpenSSL. - include_tasks : setup-apr.yml - include_tasks : install.yml - include_tasks : setup-tomcat-native.yml - include_tasks : setup-commons-daemon.yml - include_tasks : configure-tomcat.yml - include_tasks : post-install.yml Tip If you haven't used ansible - you may want to look up idempotency and what it means. An operation is idempotent if the result of performing it once is exactly the same as the result of performing it repeatedly without any intervening actions. For example in these playbooks, there are tasks to create users, create directories, or apply a config template. If Ansible detects that these are already in the desired - it will just mosey right along (indicating \"OK\" when that task is being processed).","title":"Main task file"},{"location":"setting-up-the-environment/tomcat-ansible/tasks/#setup-prerequisites","text":"I've left some of my older stuff in here for example's sake (since again, I still have to maintain some RHEL 7 and JDK 8 systems). I've highlighted the revelant portions for this. The example isn't the cleanest, but you can see how you can alter packages based on different needs (in thise case, dnf is used for RHEL 8 and yum for RHEL 7.). The Tomcat user and group are created as well at the bottom. If you use this, the 'jdk_version\" needs to be specified in your ansible hosts file, or some variable file. The ansible_distribution and ansible_distribution_major_version don't need to be specified as Ansible reads those from the hosts it connects to. roles/apache-tomcat/tasks/setup-prerequisites.yml: - name : Setup prerequisite dnf packages (RHEL 8 & JDK 11) ansible.builtin.dnf : name : - epel-release - java-11-openjdk - java-11-openjdk-devel - haveged - gcc - libtool - make - openssl-devel state : present when : ansible_distribution == 'RedHat' and ansible_distribution_major_version == '8' and jdk_version == 11 - name : Add tomcat group ansible.builtin.group : name : tomcat - name : Add tomcat user ansible.builtin.user : name : tomcat group : tomcat home : /opt/tomcat shell : /sbin/nologin createhome : yes system : yes - name : Make sure haveged is running and set to start on boot ansible.builtin.systemd : name : haveged state : started enabled : yes masked : no","title":"Setup Prerequisites"},{"location":"setting-up-the-environment/tomcat-ansible/tasks/#setup-apache-portable-runtime-apr","text":"The following section checks if the target version of APR is already installed. If not, it will download, unpack, compile, and install it. roles/apache-tomcat/tasks/setup-apr.yml: - name : Check if APR {{ apr_ver }} is already installed ansible.builtin.stat : path : /opt/apr/apr-{{ apr_ver }}/bin/apr-1-config register : apr_binary - name : Create base APR directory if it doesn't exist ansible.builtin.file : path : /opt/apr state : directory owner : root group : root - name : Create APR {{ apr_ver }} directory if it doesn't exist ansible.builtin.file : path : /opt/apr/apr-{{ apr_ver }} state : directory owner : root group : root - name : Check if APR {{ apr_ver }} is already downloaded ansible.builtin.stat : path : /root/apr-{{ apr_ver }}.tar.gz register : apr_tarball # Only download APR if APR {{ apr_ver }} isn't already installed, and the tarball isn't downloaded - name : Download APR ansible.builtin.get_url : url : \"{{ apr_archive_url }}\" dest : \"{{ apr_archive_dest }}\" when : apr_tarball.stat.exists == False and apr_binary.stat.exists == False # Only unpack apr archive if the apr binary doesn't already exist - name : Unpack APR archive ansible.builtin.unarchive : src : \"{{ apr_archive_dest }}\" dest : /root/ owner : root group : root remote_src : yes when : apr_binary.stat.exists == False # Only reconfigure if the APR directory for the version didn't already exist - name : Configure APR source ansible.builtin.command : ./configure --prefix=/opt/apr/apr-{{ apr_ver }} args : chdir : \"/root/apr-{{ apr_ver }}\" when : apr_binary.stat.exists == False # Only make if the APR directory for the version didn't already exist - name : Compile/install APR ansible.builtin.shell : make && make install args : chdir : \"/root/apr-{{ apr_ver }}\" when : apr_binary.stat.exists == False ## Handle APR symlink creation or repointing - name : Check if apr latest symlink exists ansible.builtin.stat : path : /opt/apr/latest register : apr_symlink # Create symlink if none exists, or repoint it if it is pointing to an older version - name : Create apr latest symlink to point to newly installed version ansible.builtin.file : src : \"/opt/apr/apr-{{ apr_ver }}\" dest : \"/opt/apr/latest\" owner : root group : root state : link when : apr_symlink.stat.exists == False or apr_symlink.stat.islnk # Cleanup - name : Remove apr source directory ansible.builtin.file : path : /root/apr-{{ apr_ver }} state : absent - name : Remove apr source tarball ansible.builtin.file : path : /root/apr-{{ apr_ver }}.tar.gz state : absent","title":"Setup Apache Portable Runtime (APR)"},{"location":"setting-up-the-environment/tomcat-ansible/tasks/#install-apache-tomcat","text":"This section checks if the target version Tomcat is already installed. If not - it will download Tomcat, unpack the archive, and ensure the various directory symlinks (conf, log, temp, webapps, work) are already setup. If this is the first time Tomcat is being deployed on the target system (or the /etc/tomcat directory is otherwise empty), the contents of 'conf' from the downloaded tarball will be copied to /etc/tomcat. It will also setup the systemd unit file so it can eventually be started and set to start on boot. roles/apache-tomcat/tasks/install.yml: - name : Check if Tomcat {{ tomcat_ver }} directory exists ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }} register : tomcat_directory - name : Check if Tomcat {{ tomcat_ver }} tarball exists ansible.builtin.stat : path : \"{{ tomcat_archive_dest }}\" register : tomcat_tarball - name : Download Tomcat 8.5.x ansible.builtin.get_url : url : https://archive.apache.org/dist/tomcat/tomcat-8/v{{ tomcat_ver }}/bin/apache-tomcat-{{ tomcat_ver }}.tar.gz dest : \"{{ tomcat_archive_dest }}\" when : tomcat_tarball.stat.exists == False and tomcat_directory.stat.exists == False and tomcat_major_ver == 8.5 - name : Download Tomcat 9.0.x ansible.builtin.get_url : url : https://archive.apache.org/dist/tomcat/tomcat-9/v{{ tomcat_ver }}/bin/apache-tomcat-{{ tomcat_ver }}.tar.gz dest : \"{{ tomcat_archive_dest }}\" when : tomcat_tarball.stat.exists == False and tomcat_directory.stat.exists == False and tomcat_major_ver == 9.0 # Only unpack tomcat archive if the unpacked directory does not exist. # This cannot be used to install the same version without deletion of the old one - name : Unpack tomcat archive ansible.builtin.unarchive : src : \"{{ tomcat_archive_dest }}\" dest : /opt/tomcat owner : tomcat group : tomcat remote_src : yes when : tomcat_directory.stat.exists == False # Create the permanent tomcat conf, log, temp, webapps, work directories for later symlinking - name : Create Tomcat permanent conf directory ansible.builtin.file : path : /etc/tomcat state : directory owner : root group : tomcat mode : \"u=rwx,g=rx\" - name : Create Tomcat permanent log directory ansible.builtin.file : path : /var/log/tomcat state : directory owner : tomcat group : tomcat mode : \"u=rwx,g=rx\" - name : Create Tomcat permanent temp directory ansible.builtin.file : path : /var/cache/tomcat/temp state : directory owner : tomcat group : tomcat mode : \"u=rwx,g=rx\" - name : Create Tomcat permanent webapps directory ansible.builtin.file : path : /var/lib/tomcat state : directory owner : tomcat group : tomcat mode : \"u=rwx,g=rx\" - name : Create Tomcat permanent work directory ansible.builtin.file : path : /var/cache/tomcat/work state : directory owner : tomcat group : tomcat mode : \"u=rwx,g=rx\" # If server.xml exists - then we can assume /etc/tomcat has been populated. # - If so - don't change it # - If not, assume it hasn't been populated and copy the new Tomcat's /conf to /etc/tomcat/ - name : Check if server.xml exists ansible.builtin.stat : path : /etc/tomcat/server.xml register : server_xml - name : Copy files from conf directory ansible.builtin.copy : src : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/conf/ dest : /etc/tomcat/ remote_src : yes directory_mode : yes when : server_xml.stat.exists == False # If ROOT exists - then we can assume /var/lib/tomcat has been populated. # - If so - don't change it. # - If not, assume it hasn't been populated and copy the new Tomcat's ROOT over # - This needs to be updated to handle version updates of ROOT - name : Check ROOT exists ansible.builtin.stat : path : /var/lib/tomcat/ROOT register : root_webapps - name : Copy ROOT webapp directory ansible.builtin.copy : src : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/webapps/ROOT dest : /var/lib/tomcat/ remote_src : yes directory_mode : yes when : root_webapps.stat.exists == False ## remove directories (conf, logs, temp, webapps, work) and recreate as symlinks # conf - name : check {{ tomcat_ver }} conf directory ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/conf register : tomcat_conf_dir - name : Remove conf directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/conf state : absent when : tomcat_conf_dir.stat.isdir - name : Create conf symlink ansible.builtin.file : src : /etc/tomcat dest : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/conf owner : root group : tomcat state : link when : tomcat_conf_dir.stat.isdir or tomcat_conf_dir.stat.exists == False # logs - name : check {{ tomcat_ver }} logs directory ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/logs register : tomcat_logs_dir - name : Remove logs directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/logs state : absent when : tomcat_logs_dir.stat.isdir - name : Create logs symlink ansible.builtin.file : src : /var/log/tomcat dest : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/logs owner : tomcat group : tomcat state : link when : tomcat_logs_dir.stat.isdir or tomcat_logs_dir.stat.exists == False # temp - name : check {{ tomcat_ver }} temp directory ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/temp register : tomcat_temp_dir - name : Remove temp directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/temp state : absent when : tomcat_temp_dir.stat.isdir - name : Create temp symlink ansible.builtin.file : src : /var/cache/tomcat/temp dest : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/temp owner : tomcat group : tomcat state : link when : tomcat_temp_dir.stat.isdir or tomcat_temp_dir.stat.exists == False # webapps - name : check {{ tomcat_ver }} webapps directory ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/webapps register : tomcat_webapps_dir - name : Remove webapps directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/webapps state : absent when : tomcat_webapps_dir.stat.isdir - name : Create webapps symlink ansible.builtin.file : src : /var/lib/tomcat dest : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/webapps owner : root group : tomcat state : link when : tomcat_webapps_dir.stat.isdir or tomcat_webapps_dir.stat.exists == False # work - name : check {{ tomcat_ver }} work directory ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/work register : tomcat_work_dir - name : Remove webapps directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/work state : absent when : tomcat_work_dir.stat.isdir - name : Create work symlink ansible.builtin.file : src : /var/cache/tomcat/work dest : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/work owner : tomcat group : tomcat state : link when : tomcat_work_dir.stat.isdir or tomcat_webapps_dir.stat.exists == False # Setup systemd startup/shutdown script - name : Setup systemd startup/shutdown script ansible.builtin.template : src : tomcat.service.j2 dest : /etc/systemd/system/tomcat.service mode : 0644 owner : root group : root register : tomcat_service - name : Apply new SELinux file context to tomcat.service ansible.builtin.command : restorecon /etc/systemd/system/tomcat.service when : tomcat_service.changed - name : Reload systemd daemons after service update ansible.builtin.command : systemctl daemon-reload when : tomcat_service.changed","title":"Install Apache Tomcat"},{"location":"setting-up-the-environment/tomcat-ansible/tasks/#setup-tomcat-native-library","text":"This is where the Tomcat Native Library (if not already installed) gets unpacked, configured, compiled, and installed. roles/apache-tomcat/tasks/setup-tomcat-native.yml: - name : Check if Tomcat Native Library {{ tomcat_native_ver }} is already installed ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/lib/libtcnative-1.so register : tomcat_native_library # Untar tomcat native library - name : Unpack tomcat native library archive ansible.builtin.unarchive : src : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/tomcat-native.tar.gz\" dest : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/ owner : tomcat group : tomcat remote_src : yes when : tomcat_native_library.stat.exists == False # Only configure if the Tomcat Native Library directory for the version didn't already exist - name : Configure Tomcat Native Library (RHEL8) ansible.builtin.command : \"./configure --with-java-home={{ JAVA_HOME }} --with-apr=/opt/apr/latest/bin/apr-1-config --with-ssl=yes --prefix=/opt/tomcat/apache-tomcat-{{ tomcat_ver }}\" args : chdir : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/tomcat-native-{{ tomcat_native_ver }}-src/native\" when : tomcat_native_library.stat.exists == False and ansible_distribution == 'RedHat' and ansible_distribution_major_version == '8' # Only make if the Tomcat Native Library directory for the version didn't already exist - name : Compile/install Tomcat Native Library ansible.builtin.shell : make && make install args : chdir : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/tomcat-native-{{ tomcat_native_ver }}-src/native\" when : tomcat_native_library.stat.exists == False # Cleanup - name : Remove tomcat native source directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/tomcat-native-{{ tomcat_native_ver }}-src state : absent","title":"Setup Tomcat Native Library"},{"location":"setting-up-the-environment/tomcat-ansible/tasks/#setup-apache-tomcat-commons-daemon","text":"This is where the Tomcat Commons Daemon (if not already installed) gets unpacked, configured, compiled, and installed. roles/apache-tomcat/tasks/setup-commons-daemon.yml: - name : Check if Apache Tomcat Commons Daemon {{ commons_daemon_ver }} is already installed ansible.builtin.stat : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/jsvc register : commons_daemon_jsvc # Untar tomcat native library - name : Unpack Tomcat Commons Daemon native library ansible.builtin.unarchive : src : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/commons-daemon-native.tar.gz\" dest : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/\" owner : tomcat group : tomcat remote_src : yes when : commons_daemon_jsvc.stat.exists == False # Only configure if the Tomcat Native Library directory for the version didn't already exist - name : Configure Tomcat Commons Daemon native library (JDK 11) ansible.builtin.command : \"./configure --with-java={{ JAVA_HOME }}\" args : chdir : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/commons-daemon-{{ commons_daemon_ver }}-native-src/unix\" when : commons_daemon_jsvc.stat.exists == False and jdk_version == 11 # Only make if the Tomcat Native Library directory for the version didn't already exist - name : Compile Tomcat Commons Daemon native library ansible.builtin.shell : make args : chdir : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/commons-daemon-{{ commons_daemon_ver }}-native-src/unix\" when : commons_daemon_jsvc.stat.exists == False - name : Move jsvc file ansible.builtin.copy : src : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/commons-daemon-{{ commons_daemon_ver }}-native-src/unix/jsvc\" dest : \"/opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/\" remote_src : yes owner : root group : tomcat mode : 0755 when : commons_daemon_jsvc.stat.exists == False # Cleanup - name : Remove commons-daemon source directory ansible.builtin.file : path : /opt/tomcat/apache-tomcat-{{ tomcat_ver }}/bin/commons-daemon-{{ commons_daemon_ver }}-native-src state : absent","title":"Setup Apache Tomcat Commons Daemon"},{"location":"setting-up-the-environment/tomcat-ansible/tasks/#configure-tomcat","text":"This is where we take the template files that were created earlier for web.xml, server.xml, etc., and make sure they are copied over to the server. If any are updated, it will notify Tomcat to restart when done. This is basically just configuring the various files in /etc/tomcat. To initially create these files - download copies of them from a default Tomcat install to your Ansible host's roles/apache-tomcat/templates directory and alter them as needed. I will have copies of these files uploaded as well. roles/apache-tomcat/tasks/configure-tomcat.yml: - name : Setup catalina.properties ansible.builtin.template : src : cas6-catalina.properties.j2 dest : /etc/tomcat/catalina.properties mode : 0640 owner : root group : tomcat when : (\"login\" in inventory_hostname) notify : restart tomcat - name : Setup context.xml ansible.builtin.template : src : cas6-context.xml.j2 dest : /etc/tomcat/context.xml mode : 0640 owner : root group : tomcat when : (\"login\" in inventory_hostname) notify : restart tomcat - name : Setup server.xml ansible.builtin.template : src : cas6-server.xml.j2 dest : /etc/tomcat/server.xml mode : 0640 owner : root group : tomcat when : (\"login\" in inventory_hostname) - name : Setup web.xml ansible.builtin.template : src : cas6-web.xml.j2 dest : /etc/tomcat/web.xml mode : 0640 owner : root group : tomcat when : (\"login\" in inventory_hostname) notify : restart tomcat","title":"Configure Tomcat"},{"location":"setting-up-the-environment/tomcat-ansible/tasks/#post-installation-tasks","text":"If the installation fails (errors, not warnings) at any point - it won't get to here, so it shouldn't move the symlink and restart tomcat unless the install completed. It also won't 'notify' tomcat to restart if they didn't even have to create the symlink (or if the config files changed earlier) roles/apache-tomcat/tasks/post-install.yml: - name : Setup Apache Tomcat {{ tomcat_ver }} symlink ansible.builtin.file : src : /opt/tomcat/apache-tomcat-{{ tomcat_ver }} dest : /opt/tomcat/latest owner : root group : root state : link notify : restart tomcat # Cleanup - name : Remove tomcat tarball ansible.builtin.file : path : /root/apache-tomcat-{{ tomcat_ver }}.tar.gz state : absent","title":"Post installation tasks"},{"location":"setting-up-the-environment/tomcat-ansible/templates/","text":"Ansible Templates for Tomcat The following are the relative template files for Tomcat. They don't include the Apache HTTPD or CAS configs - this is JUST for Tomcat. When dealing with some things that have private keys or other sensitive info, you'll want to use Ansible vault. cas6-catalina.properties.j2 (destination is /etc/tomcat/context.xml) cas6-context.xml.j2 (destination is /etc/tomcat/context.xml) cas6-server.xml.j2 (destination is /etc/tomcat/server.xml) cas6-web.xml.j2 (destination is /etc/tomcat/web.xml) tomcat.service.j2 (destination is /etc/systemd/system/tomcat.service) Note: This doesn't have 'cas' in the file name since it is not CAS specific - it's the same for all our Tomcat installs. When I have a template specific to only one application/server/system - I indicate that in the file name.","title":"Setup Templates"},{"location":"setting-up-the-environment/tomcat-ansible/templates/#ansible-templates-for-tomcat","text":"The following are the relative template files for Tomcat. They don't include the Apache HTTPD or CAS configs - this is JUST for Tomcat. When dealing with some things that have private keys or other sensitive info, you'll want to use Ansible vault. cas6-catalina.properties.j2 (destination is /etc/tomcat/context.xml) cas6-context.xml.j2 (destination is /etc/tomcat/context.xml) cas6-server.xml.j2 (destination is /etc/tomcat/server.xml) cas6-web.xml.j2 (destination is /etc/tomcat/web.xml) tomcat.service.j2 (destination is /etc/systemd/system/tomcat.service) Note: This doesn't have 'cas' in the file name since it is not CAS specific - it's the same for all our Tomcat installs. When I have a template specific to only one application/server/system - I indicate that in the file name.","title":"Ansible Templates for Tomcat"},{"location":"setting-up-the-environment/tomcat-ansible/tomcat-ansible-overview/","text":"Using Ansible to put it all together Okay - now that I've covered all the steps that are done to get Tomcat working - you should realize I never do them manually anymore. I have way too much to do to be manually doing all that. When I initially started doing this for CAS 5, I had a combination of shell and python scripts to streamline this - but as I've gotten to use Ansible more over the past few years, I moved it all there. Danger Before you start with Ansible - you will really want to think about how to lock it down. Your Ansible host - whether you use it for CAS servers alone, or for managing other applications, OS updates, etc., has a LOT of access. Consider at the very least ensuring your Ansible hosts are only accessible inbound from a VPN - or possibly even dedicated bastion hosts - and is configured with Duo or some other form of MFA for SSH access. You don't want your system management tool to be a vector for attack. Ansible hosts file You have to have an Ansible hosts file created. You can start with a very small config for a single server even. I always split my CAS servers (or any set of systems where multiples are active at a time) into different phases for when I patch, so a pair of CAS servers below are listed like the following: [test_phase1] login6deva ansible_python_interpreter=/usr/libexec/platform-python tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 [test_phase2] login6devb ansible_python_interpreter=/usr/libexec/platform-python tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 What I've defined here is: ansible_python_interpreter (since RHEL 8 doesn't come with a default python in the path, you have to tell Ansible where it can find python) tomcat_major_ver (since some of my Ansible tasks are version specific, as I still have some Tomcat 8.5.x systems) tomcat_ver (this is where the specific version of Tomcat is specified. This is helpful when you want to push out updates to your test/dev systems first, but aren't ready to for production) jdk_version (likewise, I have systems which are using OpenJDK 8 and others with OpenJDK 11, and I want to have my plays handle these.) Define a site.yml file This is where you can associate roles with systems. As an example, here's my development CAS hosts, where I have several roles: (one for security hardening, based on the Center for Internet Security benchmarks, one for Apache Tomcat, and one for Apache httpd. There are two CAS related roles which we'll be building later (I've commented them out for now - you'll uncomment them as they are needed). It should be within your main ansible directory ansible/site.yml --- # CAS 6 - hosts : login6deva,login6devb roles : - security-hardening-rhel8 - apache-tomcat - apache-httpd #- cas6 #- cas-client Create a role for Tomcat If you don't already have a 'roles' directory within your main ansible directory, create one. Mine sits within my own user directory on my Ansible/build server. Once that is created, go to the roles directory and initialize a new role for apache-tomcat: [chauvetp@ansible ~]$ cd ansible/roles/ [chauvetp@ansible roles]$ ansible-galaxy init apache-tomcat - Role apache-tomcat was created successfully [chauvetp@ansible roles]$ ls apache-tomcat/ defaults files handlers meta README.md tasks templates tests vars","title":"Ansible and Tomcat - Initial Steps"},{"location":"setting-up-the-environment/tomcat-ansible/tomcat-ansible-overview/#using-ansible-to-put-it-all-together","text":"Okay - now that I've covered all the steps that are done to get Tomcat working - you should realize I never do them manually anymore. I have way too much to do to be manually doing all that. When I initially started doing this for CAS 5, I had a combination of shell and python scripts to streamline this - but as I've gotten to use Ansible more over the past few years, I moved it all there. Danger Before you start with Ansible - you will really want to think about how to lock it down. Your Ansible host - whether you use it for CAS servers alone, or for managing other applications, OS updates, etc., has a LOT of access. Consider at the very least ensuring your Ansible hosts are only accessible inbound from a VPN - or possibly even dedicated bastion hosts - and is configured with Duo or some other form of MFA for SSH access. You don't want your system management tool to be a vector for attack.","title":"Using Ansible to put it all together"},{"location":"setting-up-the-environment/tomcat-ansible/tomcat-ansible-overview/#ansible-hosts-file","text":"You have to have an Ansible hosts file created. You can start with a very small config for a single server even. I always split my CAS servers (or any set of systems where multiples are active at a time) into different phases for when I patch, so a pair of CAS servers below are listed like the following: [test_phase1] login6deva ansible_python_interpreter=/usr/libexec/platform-python tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 [test_phase2] login6devb ansible_python_interpreter=/usr/libexec/platform-python tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 What I've defined here is: ansible_python_interpreter (since RHEL 8 doesn't come with a default python in the path, you have to tell Ansible where it can find python) tomcat_major_ver (since some of my Ansible tasks are version specific, as I still have some Tomcat 8.5.x systems) tomcat_ver (this is where the specific version of Tomcat is specified. This is helpful when you want to push out updates to your test/dev systems first, but aren't ready to for production) jdk_version (likewise, I have systems which are using OpenJDK 8 and others with OpenJDK 11, and I want to have my plays handle these.)","title":"Ansible hosts file"},{"location":"setting-up-the-environment/tomcat-ansible/tomcat-ansible-overview/#define-a-siteyml-file","text":"This is where you can associate roles with systems. As an example, here's my development CAS hosts, where I have several roles: (one for security hardening, based on the Center for Internet Security benchmarks, one for Apache Tomcat, and one for Apache httpd. There are two CAS related roles which we'll be building later (I've commented them out for now - you'll uncomment them as they are needed). It should be within your main ansible directory ansible/site.yml --- # CAS 6 - hosts : login6deva,login6devb roles : - security-hardening-rhel8 - apache-tomcat - apache-httpd #- cas6 #- cas-client","title":"Define a site.yml file"},{"location":"setting-up-the-environment/tomcat-ansible/tomcat-ansible-overview/#create-a-role-for-tomcat","text":"If you don't already have a 'roles' directory within your main ansible directory, create one. Mine sits within my own user directory on my Ansible/build server. Once that is created, go to the roles directory and initialize a new role for apache-tomcat: [chauvetp@ansible ~]$ cd ansible/roles/ [chauvetp@ansible roles]$ ansible-galaxy init apache-tomcat - Role apache-tomcat was created successfully [chauvetp@ansible roles]$ ls apache-tomcat/ defaults files handlers meta README.md tasks templates tests vars","title":"Create a role for Tomcat"},{"location":"setting-up-the-environment/tomcat-ansible/variables/","text":"Ansible Variable setup for Tomcat I don't have a lot of variables for Tomcat on it's own, and none are 'sensitive'. They're basically version information so I don't have to hard code versions into the plays. If you ever have sensitive info that needs to go into a variables file, you'll want to use Ansible Vault so it isn't plain text. roles/apache-tomcat/vars/main.yml # where the Tomcat archive file gets downloaded tomcat_archive_dest : /root/apache-tomcat-{{ tomcat_ver }}.tar.gz # Apache Portable Runtime version - it's been 1.7.0 since April 2019 # Your actual mirror will vary - I didn't programatically pick something random # So you may not want to just copy the mirror for APR I have here. apr_ver : 1.7.0 apr_archive_url : http://apache.cs.utah.edu//apr/apr-{{ apr_ver }}.tar.gz apr_archive_dest : /root/apr-{{ apr_ver }}.tar.gz # Unfortunately - without reading release notes, or unpacking Tomcat to test when a new version comes out, # you won't know what version of the Commons Daemon or Tomcat Native Library are in that Tomcat version. # My practice is when upgrading to a new version for the first time - I will download that version, # unpack it, and unpack the Tomcat Native Library and Commons Daemon to check their version. # For example, Tomcat 9.0.43 had 1.2.26 for the Tomcat Native Library, where Tomcat 9.0.41 had 1.2.25. # When my playbook 'failed' on this - I just went and updated the variable. # Same was true where the commons daemon version updated from 1.2.3 to 1.2.4 with Tomcat 9.0.43. # If you're going to have multiple versions of Tomcat running for a while, you may want to define # these in your /etc/ansible/hosts file instead. tomcat_native_ver : 1.2.26 commons_daemon_ver : 1.2.4 JAVA_HOME : /usr/lib/jvm/java-11-openjdk","title":"Setup Variables"},{"location":"setting-up-the-environment/tomcat-ansible/variables/#ansible-variable-setup-for-tomcat","text":"I don't have a lot of variables for Tomcat on it's own, and none are 'sensitive'. They're basically version information so I don't have to hard code versions into the plays. If you ever have sensitive info that needs to go into a variables file, you'll want to use Ansible Vault so it isn't plain text. roles/apache-tomcat/vars/main.yml # where the Tomcat archive file gets downloaded tomcat_archive_dest : /root/apache-tomcat-{{ tomcat_ver }}.tar.gz # Apache Portable Runtime version - it's been 1.7.0 since April 2019 # Your actual mirror will vary - I didn't programatically pick something random # So you may not want to just copy the mirror for APR I have here. apr_ver : 1.7.0 apr_archive_url : http://apache.cs.utah.edu//apr/apr-{{ apr_ver }}.tar.gz apr_archive_dest : /root/apr-{{ apr_ver }}.tar.gz # Unfortunately - without reading release notes, or unpacking Tomcat to test when a new version comes out, # you won't know what version of the Commons Daemon or Tomcat Native Library are in that Tomcat version. # My practice is when upgrading to a new version for the first time - I will download that version, # unpack it, and unpack the Tomcat Native Library and Commons Daemon to check their version. # For example, Tomcat 9.0.43 had 1.2.26 for the Tomcat Native Library, where Tomcat 9.0.41 had 1.2.25. # When my playbook 'failed' on this - I just went and updated the variable. # Same was true where the commons daemon version updated from 1.2.3 to 1.2.4 with Tomcat 9.0.43. # If you're going to have multiple versions of Tomcat running for a while, you may want to define # these in your /etc/ansible/hosts file instead. tomcat_native_ver : 1.2.26 commons_daemon_ver : 1.2.4 JAVA_HOME : /usr/lib/jvm/java-11-openjdk","title":"Ansible Variable setup for Tomcat"},{"location":"theming/overview/","text":"Theming info coming soon Note: This is the part I'm outsourcing to someone who actually knows how to design web content - which is not me! I'll reference her assistance when it's done.","title":"Themes"},{"location":"theming/overview/#theming-info-coming-soon","text":"Note: This is the part I'm outsourcing to someone who actually knows how to design web content - which is not me! I'll reference her assistance when it's done.","title":"Theming info coming soon"},{"location":"ticket-registry/hazelcast-overview/","text":"Setting up ticket registry CAS can be setup to use various types of ticket registries to keep track of logins. My assumption is that you will have (at least in a production environment) multiple CAS servers, sitting behind a load balancer. In order for this to work correctly, you will need to have a shared ticket registry. This is because a users's browser could be sent via the load balancer to one CAS server, and the CAS client (on the service they are trying to get access to) could be routed to a different CAS server. If you don't have a shared ticket registry, then this login would fail. There are multiple options for ticket registries within CAS. For CAS 5.x, I used the MongoDB ticket registry - but ran into issues when I moved from 5.2.x to 5.3.x where the tickets were not getting cleaned up. I ended up writing a script to connect to Mongo and clean these up - but I'd rather not go that route again for CAS 6.x, so I'm going to be going with Hazelcast instead. Add the hazelcast dependency To add hazelcast support to the CAS server, edit the build.gradle file within the cas-overlay-template directory on your build host. We're going to add a single depency to the one we already added for the json service registry. See the highlighted line below for the addition. cas-overlay-template/build.gradle depe n de n cies { // CAS depe n de n cies/modules may be lis te d here s tat ically... impleme ntat io n \"org.apereo.cas:cas-server-webapp-init:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-ldap:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-saml:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-duo:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-hazelcast-ticket-registry:${casServerVersion}\" } Rebuild CAS To rebuild CAS with the newest dependency built in we'll do the same thing we did with previous additions. You'll want to go to the cas-overlay-template directory and run the following and wait a moment for it to be complete: ./gradlew clean build Your cas.war file will have been updated. Copy it from cas-overlay-template/build/libs/cas.war to your roles/cas6/files Configure Hazelcast properties in CAS Add the following settings to roles/cas6/templates/dev-cas.properties.j2 in the cas-overlay-template directory on your Ansible server. As with other sections - we're going to use variables here since some of the Hazelcast info is sensitive, and we'll leave them as variables here (and the real values will be in the Ansible cas-vault.yml file). # Hazelcast Ticket Registry cas.ticket.registry.hazelcast.cluster.members : {{ DEV_CAS_SERVERS }} cas.ticket.registry.hazelcast.mapName : tickets # The asyncBackupCount should be set to n-1 where n is the number of servers in the cluster cas.ticket.registry.hazelcast.cluster.asyncBackupCount : 1 cas.ticket.registry.hazelcast.cluster.tcpipEnabled : true # You'll want to make sure a range of ports, let's say 5701 through 5704 or so, are open between # your different CAS servers (i.e. all the dev cas servers can talk to each other) cas.ticket.registry.hazelcast.cluster.port : 5701 cas.ticket.registry.hazelcast.cluster.portAutoIncrement : true cas.ticket.registry.hazelcast.cluster.multicastEnabled : false cas.ticket.registry.hazelcast.cluster.logging-type : slf4j cas.ticket.registry.hazelcast.cluster.instanceName : cas6dev cas.ticket.registry.hazelcast.crypto.signing.key : {{ DEV_CAS_HAZELCAST_SIGNING_KEY }} cas.ticket.registry.hazelcast.crypto.signing.keySize : 512 cas.ticket.registry.hazelcast.crypto.encryption.key : {{ DEV_CAS_HAZELCAST_ENCRYPTION_KEY }} cas.ticket.registry.hazelcast.crypto.encryption.keySize : 16 cas.ticket.registry.hazelcast.crypto.alg : AES Variable setup Edit your cas-vault.yml file within roles/cas6/vars/ You'll need to fill out the following: DEV_CAS_SERVERS: DEV_CAS_HAZELCAST_SIGNING_KEY: DEV_CAS_HAZELCAST_ENCRYPTION_KEY: Generating Hazelcast keys The Generating all necessary keys section near the bottom of the Initial CAS Config section of this document covers generating these keys. They are the last two keys generated in that section. You will still need the key generation tool . You can see that section or the two subsections below for generating the signing and encryption keys. Either way - place these keys in your Ansible vault variable file or directly in your cas.properties file. Generate the signing key Run: java -jar jwk-gen.jar -t oct -s 512 | grep k.: | cut -f4 -d\\\" Enter the output as your DEV_CAS_HAZELCAST_SIGNING_KEY in your Ansible vault (or if not using Ansible vault - just put it directly as the value for cas.ticket.registry.hazelcast.crypto.signing.key in your cas.properties file.) Generate the encryption key Run: openssl rand -base64 16 Enter the output as your DEV_CAS_HAZELCAST_ENCRYPTION_KEY in your Ansible vault (or if not using Ansible vault - just put it directly as the value for cas.ticket.registry.hazelcast.crypto.encryption.key in your cas.properties file.) Rerun the playbook [ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit <your_CAS_server> Vault password : References CAS 6: Hazelcast Ticket Registry CAS 6: Hazelcast Configuration CAS 6: MongoDb Ticket Registry - though I didn't use this for CAS 6 - you may want to!","title":"Hazelcast Overview"},{"location":"ticket-registry/hazelcast-overview/#setting-up-ticket-registry","text":"CAS can be setup to use various types of ticket registries to keep track of logins. My assumption is that you will have (at least in a production environment) multiple CAS servers, sitting behind a load balancer. In order for this to work correctly, you will need to have a shared ticket registry. This is because a users's browser could be sent via the load balancer to one CAS server, and the CAS client (on the service they are trying to get access to) could be routed to a different CAS server. If you don't have a shared ticket registry, then this login would fail. There are multiple options for ticket registries within CAS. For CAS 5.x, I used the MongoDB ticket registry - but ran into issues when I moved from 5.2.x to 5.3.x where the tickets were not getting cleaned up. I ended up writing a script to connect to Mongo and clean these up - but I'd rather not go that route again for CAS 6.x, so I'm going to be going with Hazelcast instead.","title":"Setting up ticket registry"},{"location":"ticket-registry/hazelcast-overview/#add-the-hazelcast-dependency","text":"To add hazelcast support to the CAS server, edit the build.gradle file within the cas-overlay-template directory on your build host. We're going to add a single depency to the one we already added for the json service registry. See the highlighted line below for the addition. cas-overlay-template/build.gradle depe n de n cies { // CAS depe n de n cies/modules may be lis te d here s tat ically... impleme ntat io n \"org.apereo.cas:cas-server-webapp-init:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-ldap:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-saml:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-duo:${casServerVersion}\" impleme ntat io n \"org.apereo.cas:cas-server-support-hazelcast-ticket-registry:${casServerVersion}\" }","title":"Add the hazelcast dependency"},{"location":"ticket-registry/hazelcast-overview/#rebuild-cas","text":"To rebuild CAS with the newest dependency built in we'll do the same thing we did with previous additions. You'll want to go to the cas-overlay-template directory and run the following and wait a moment for it to be complete: ./gradlew clean build Your cas.war file will have been updated. Copy it from cas-overlay-template/build/libs/cas.war to your roles/cas6/files","title":"Rebuild CAS"},{"location":"ticket-registry/hazelcast-overview/#configure-hazelcast-properties-in-cas","text":"Add the following settings to roles/cas6/templates/dev-cas.properties.j2 in the cas-overlay-template directory on your Ansible server. As with other sections - we're going to use variables here since some of the Hazelcast info is sensitive, and we'll leave them as variables here (and the real values will be in the Ansible cas-vault.yml file). # Hazelcast Ticket Registry cas.ticket.registry.hazelcast.cluster.members : {{ DEV_CAS_SERVERS }} cas.ticket.registry.hazelcast.mapName : tickets # The asyncBackupCount should be set to n-1 where n is the number of servers in the cluster cas.ticket.registry.hazelcast.cluster.asyncBackupCount : 1 cas.ticket.registry.hazelcast.cluster.tcpipEnabled : true # You'll want to make sure a range of ports, let's say 5701 through 5704 or so, are open between # your different CAS servers (i.e. all the dev cas servers can talk to each other) cas.ticket.registry.hazelcast.cluster.port : 5701 cas.ticket.registry.hazelcast.cluster.portAutoIncrement : true cas.ticket.registry.hazelcast.cluster.multicastEnabled : false cas.ticket.registry.hazelcast.cluster.logging-type : slf4j cas.ticket.registry.hazelcast.cluster.instanceName : cas6dev cas.ticket.registry.hazelcast.crypto.signing.key : {{ DEV_CAS_HAZELCAST_SIGNING_KEY }} cas.ticket.registry.hazelcast.crypto.signing.keySize : 512 cas.ticket.registry.hazelcast.crypto.encryption.key : {{ DEV_CAS_HAZELCAST_ENCRYPTION_KEY }} cas.ticket.registry.hazelcast.crypto.encryption.keySize : 16 cas.ticket.registry.hazelcast.crypto.alg : AES","title":"Configure Hazelcast properties in CAS"},{"location":"ticket-registry/hazelcast-overview/#variable-setup","text":"Edit your cas-vault.yml file within roles/cas6/vars/ You'll need to fill out the following: DEV_CAS_SERVERS: DEV_CAS_HAZELCAST_SIGNING_KEY: DEV_CAS_HAZELCAST_ENCRYPTION_KEY:","title":"Variable setup"},{"location":"ticket-registry/hazelcast-overview/#generating-hazelcast-keys","text":"The Generating all necessary keys section near the bottom of the Initial CAS Config section of this document covers generating these keys. They are the last two keys generated in that section. You will still need the key generation tool . You can see that section or the two subsections below for generating the signing and encryption keys. Either way - place these keys in your Ansible vault variable file or directly in your cas.properties file.","title":"Generating Hazelcast keys"},{"location":"ticket-registry/hazelcast-overview/#generate-the-signing-key","text":"Run: java -jar jwk-gen.jar -t oct -s 512 | grep k.: | cut -f4 -d\\\" Enter the output as your DEV_CAS_HAZELCAST_SIGNING_KEY in your Ansible vault (or if not using Ansible vault - just put it directly as the value for cas.ticket.registry.hazelcast.crypto.signing.key in your cas.properties file.)","title":"Generate the signing key"},{"location":"ticket-registry/hazelcast-overview/#generate-the-encryption-key","text":"Run: openssl rand -base64 16 Enter the output as your DEV_CAS_HAZELCAST_ENCRYPTION_KEY in your Ansible vault (or if not using Ansible vault - just put it directly as the value for cas.ticket.registry.hazelcast.crypto.encryption.key in your cas.properties file.)","title":"Generate the encryption key"},{"location":"ticket-registry/hazelcast-overview/#rerun-the-playbook","text":"[ chauvetp@ansible templates ] $ ansible-playbook ~/ansible/site.yml --ask-vault-pass --limit <your_CAS_server> Vault password :","title":"Rerun the playbook"},{"location":"ticket-registry/hazelcast-overview/#references","text":"CAS 6: Hazelcast Ticket Registry CAS 6: Hazelcast Configuration CAS 6: MongoDb Ticket Registry - though I didn't use this for CAS 6 - you may want to!","title":"References"},{"location":"ticket-registry/testing-ticket-registry/","text":"Testing the ticket registry There's two ways I like to test the ticket registry: Load balancer method In our load balancer (F5) I make sure that only one of our DEV cas servers are active (for example, server A active, server B inactive). I then login via the load balanced URL for CAS and make sure I log in (in an incognito or private window) without issue. Don't log out or close that window. I then enable the other CAS server, and disable the first, then revist the /cas/login page. If I'm still logged in, with server B active and server A inactive, then I can see that the ticket registry is being shared. If you're asked to login again, your ticket registry may not be shared. Taking a server offline A bit more drastic - have both CAS servers online but only one active in the load balancer (i.e. server A) and login. Once you are successful, reactivate the second server in the load balancer, and shutdown Tomcat on the first server. Verify via /cas/login that you are still logged in.","title":"Testing Ticket Registry"},{"location":"ticket-registry/testing-ticket-registry/#testing-the-ticket-registry","text":"There's two ways I like to test the ticket registry:","title":"Testing the ticket registry"},{"location":"ticket-registry/testing-ticket-registry/#load-balancer-method","text":"In our load balancer (F5) I make sure that only one of our DEV cas servers are active (for example, server A active, server B inactive). I then login via the load balanced URL for CAS and make sure I log in (in an incognito or private window) without issue. Don't log out or close that window. I then enable the other CAS server, and disable the first, then revist the /cas/login page. If I'm still logged in, with server B active and server A inactive, then I can see that the ticket registry is being shared. If you're asked to login again, your ticket registry may not be shared.","title":"Load balancer method"},{"location":"ticket-registry/testing-ticket-registry/#taking-a-server-offline","text":"A bit more drastic - have both CAS servers online but only one active in the load balancer (i.e. server A) and login. Once you are successful, reactivate the second server in the load balancer, and shutdown Tomcat on the first server. Verify via /cas/login that you are still logged in.","title":"Taking a server offline"}]}