{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Deploying Apereo CAS Deploying Apereo CAS provides step-by-step instructions for setting up Apereo CAS 6 with a goal of deploying and maintaining both CAS and the application server (Tomcat) via Ansible. The goal of this is to make deploying and maintaining CAS and Tomcat easy. The documentation is based on the documentation for CAS 5 created by David Curry of The New School . It is meant to supplement, not replace, the documentation created by Apereo for CAS. This is my first foray into using Github pages, or making documentation for deploying an application like this (my documentation has either been end user facing or for internal staff up until now) - so apologies for any rough edges on it. It's horribly incomplete as of now but my goal is to document as I deploy into test and later into production. It was created in my work at the State University of New York at New Paltz but I wanted to give back to the CAS community for the great information I've found from the New School and others. Copyright and Licensing Documentation Content All documentation content is Copyright \u00a9 2021, SUNY New Paltz. It is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License . Site Template This site was created with MkDocs using the Material Theme . Author Information Paul Chauvet Information Security Officer State University of New York at New Paltz chauvetp@newpaltz.edu","title":"Main"},{"location":"#deploying-apereo-cas","text":"Deploying Apereo CAS provides step-by-step instructions for setting up Apereo CAS 6 with a goal of deploying and maintaining both CAS and the application server (Tomcat) via Ansible. The goal of this is to make deploying and maintaining CAS and Tomcat easy. The documentation is based on the documentation for CAS 5 created by David Curry of The New School . It is meant to supplement, not replace, the documentation created by Apereo for CAS. This is my first foray into using Github pages, or making documentation for deploying an application like this (my documentation has either been end user facing or for internal staff up until now) - so apologies for any rough edges on it. It's horribly incomplete as of now but my goal is to document as I deploy into test and later into production. It was created in my work at the State University of New York at New Paltz but I wanted to give back to the CAS community for the great information I've found from the New School and others.","title":"Deploying Apereo CAS"},{"location":"#copyright-and-licensing","text":"","title":"Copyright and Licensing"},{"location":"#documentation-content","text":"All documentation content is Copyright \u00a9 2021, SUNY New Paltz. It is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Documentation Content"},{"location":"#site-template","text":"This site was created with MkDocs using the Material Theme .","title":"Site Template"},{"location":"#author-information","text":"Paul Chauvet Information Security Officer State University of New York at New Paltz chauvetp@newpaltz.edu","title":"Author Information"},{"location":"about/about-new-paltz/","text":"About the State University of New York at New Paltz What is now the State University of New York at New Paltz has existed in some form in New Paltz, NY since 1828. It was originally the New Paltz Classic school, later a state normal school that trained teahcers for New York State public schools, and an official four-year college in 1938 as the State Teachers College at New Paltz. It was one of the founding schools of the SUNY system in 1948. Today, the State University of New York at New Paltz covers 216 acres and includes the College of Liberal Arts & Sciences, the School of Business, the School of Science & Engineering, the School of Fine & Performing Arts, the School of Education, and The Graduate School. Over time, the curricular mission of the school has broadened from the nearly single-track of the Normal School to 143 programs in six schools. For more information, visit www.newpaltz.edu .","title":"About this project"},{"location":"about/about-new-paltz/#about-the-state-university-of-new-york-at-new-paltz","text":"What is now the State University of New York at New Paltz has existed in some form in New Paltz, NY since 1828. It was originally the New Paltz Classic school, later a state normal school that trained teahcers for New York State public schools, and an official four-year college in 1938 as the State Teachers College at New Paltz. It was one of the founding schools of the SUNY system in 1948. Today, the State University of New York at New Paltz covers 216 acres and includes the College of Liberal Arts & Sciences, the School of Business, the School of Science & Engineering, the School of Fine & Performing Arts, the School of Education, and The Graduate School. Over time, the curricular mission of the school has broadened from the nearly single-track of the Normal School to 143 programs in six schools. For more information, visit www.newpaltz.edu .","title":"About the State University of New York at New Paltz"},{"location":"about/architecture/","text":"System/Architecture Overview Components This document was created to reflect the environment in use at New Paltz for CAS. Apereo CAS 6.2.x Red Hat Enterprise Linux 8 Apache Tomcat 9.0.x Apache httpd Ansible Azure Active Directory Microsoft Active Directory Duo for Multifactor authentication Hazelcast Ticket Registry for ticket storage between systems. If you want to use another version of CAS 6.x - it may or may not have significant changes. I'll be moving from CAS 6.2 to 6.3 and will document any issues as I come across them, at least in our environment. If you are going to use another operating system, web server, or java servlet container, I'd imagine the CAS portion of the instructions will be relatively similar - though the Ansible deployments for Tomcat may be less similar or useful. Design We have three levels of CAS here at New Paltz, Production, Test, and Development. Test is used for non-production applications that still need SSO (for example Banner test). Development is exclusively used for building, and testing, new versions or configuration changes for CAS. Authentication will be against either: On-prem Active Directory (for alumni) Azure Active Directory (for active faculty/staff/students, and retirees) (we may eventually have all alumni in Azure - but that's for a later date. For now - they are only on-prem and really are only kept active for a couple systems) In each case - the hosts sit behind a load balancer (in our case, F5 Big IP, though HA Proxy or basically any other load balancer should work. We're not doing anything crazy at the LB level). The load balancer is split in multiple locations, as are the application servers. This gives us resilience if a single site on-campus is down but does NOT give resilience against a full outage on-campus. This is one reason why we are looking to have as many services as possible authenticate directly against Azure instead of CAS. Using CAS to delegate authentication to Azure, we can make this transition as streamlined as possible without having people enter login credentials more than once. This will also let us make our transition of existing CAS apps to SAML gradually instead of having to deal with a ton of internal and external service providers all at once.","title":"Architecture/design"},{"location":"about/architecture/#systemarchitecture-overview","text":"","title":"System/Architecture Overview"},{"location":"about/architecture/#components","text":"This document was created to reflect the environment in use at New Paltz for CAS. Apereo CAS 6.2.x Red Hat Enterprise Linux 8 Apache Tomcat 9.0.x Apache httpd Ansible Azure Active Directory Microsoft Active Directory Duo for Multifactor authentication Hazelcast Ticket Registry for ticket storage between systems. If you want to use another version of CAS 6.x - it may or may not have significant changes. I'll be moving from CAS 6.2 to 6.3 and will document any issues as I come across them, at least in our environment. If you are going to use another operating system, web server, or java servlet container, I'd imagine the CAS portion of the instructions will be relatively similar - though the Ansible deployments for Tomcat may be less similar or useful.","title":"Components"},{"location":"about/architecture/#design","text":"We have three levels of CAS here at New Paltz, Production, Test, and Development. Test is used for non-production applications that still need SSO (for example Banner test). Development is exclusively used for building, and testing, new versions or configuration changes for CAS. Authentication will be against either: On-prem Active Directory (for alumni) Azure Active Directory (for active faculty/staff/students, and retirees) (we may eventually have all alumni in Azure - but that's for a later date. For now - they are only on-prem and really are only kept active for a couple systems) In each case - the hosts sit behind a load balancer (in our case, F5 Big IP, though HA Proxy or basically any other load balancer should work. We're not doing anything crazy at the LB level). The load balancer is split in multiple locations, as are the application servers. This gives us resilience if a single site on-campus is down but does NOT give resilience against a full outage on-campus. This is one reason why we are looking to have as many services as possible authenticate directly against Azure instead of CAS. Using CAS to delegate authentication to Azure, we can make this transition as streamlined as possible without having people enter login credentials more than once. This will also let us make our transition of existing CAS apps to SAML gradually instead of having to deal with a ton of internal and external service providers all at once.","title":"Design"},{"location":"about/author-information/","text":"This documentation was created by: Paul Chauvet, CISSP Information Security Officer State University of New York at New Paltz chauvetp@newpaltz.edu The author would like to thank all those who contributed to this - whether via their public documentation, forum posts on the Apereo CAS forums, or directly via email. This includes David Curry of the New School, David Warden and Shawn Plummer of SUNY Geneseo , Ken Runyon of SUNY System Administration , Matt Adkins of Liberty University , David Campman of Forsyte IT , and all the developers who have contributed to the Apereo CAS project and who contribute in the CAS Community .","title":"About the author"},{"location":"setting-up-the-environment/build-environment/","text":"Build Environment Summary My build server is our existing Ansible host. I've set that system up several years ago - so I may have missed a step or two here. I'll try to recreate this from scratch later though. Install and Configure git We keep our code for git in an internal git repository running Bitbucket Server . We make enough changes to CAS and Ansible that I would be insane to not use git or some other form of version control for development. Whether you do or not is up to you - but the instructions here assume you are using some sort of git repository. If you aren't familiar with Git - I recommend Pro Git, available online for free via (https://git-scm.com/book/en/v2). Install and basic configuration of Git This should be done as the user you are going to be running Ansible and building CAS from - NOT root. yum install git git config --global user.name \"Your Name Here\" git config --global user.email \"Your Email Here\" Install Ansible We are using the version of Ansible that comes with RedHat. This was just installed via: yum install ansible Set up SSH public key authentication If you're deploying via Ansible, or just using SCP/SFTP to copy files over, you'll want to set up public key authentication. From the master server: When done - view the contents of the public key (by default in /home/username/.ssh/id_rsa.pub) - you'll need it in the next step. From the CAS servers: Edit the file /root/.ssh/authorized_keys Place the contents of the public key in that file. Test Login to your build server as the user you will be building CAS and running ansible from (I'll use 'builduser' as an example here). See if you can login to one of your newly built CAS servers without entering a password. ssh root@cas6dev1 If successful - you'll be logged in without a username or password. If this is the first time you are connecting via SSH from the build host to the CAS host, you'll be warned that the authenticity of the host cannot be established, and you'll be prompted to enter yes to continue connecting. Configure a hosts file for Ansible You will need a hosts file for Ansible. This file can have simply the hostname, or it could have some variables as well. We at New Paltz put a few things there such as the hostname, the VM name (in vCenter), the folder (in vCenter), and the Tomcat version (so I can roll out updates to Tomcat in some environments earlier than others). An example of this for CAS servers is below. This file would be in /etc/ansible/hosts: [CAS_DEV] cas6dev1 vmware_name=\"CAS 6 Test 1\" vmware_folder=\"/Computer Services/vm/CAS Authentication Servers\" tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 cas6dev2 vmware_name=\"CAS 6 Test 2\" vmware_folder=\"/Computer Services/vm/CAS Authentication Servers\" tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 [CAS_TEST] cas6test1 vmware_name=\"CAS 6 Test 1\" vmware_folder=\"/Computer Services/vm/CAS Authentication Servers\" tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 cas6test2 vmware_name=\"CAS 6 Test 2\" vmware_folder=\"/Computer Services/vm/CAS Authentication Servers\" tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 [CAS_PROD] cas6prod1 vmware_name=\"CAS 6 Test 1\" vmware_folder=\"/Computer Services/vm/CAS Authentication Servers\" tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 cas6prod2 vmware_name=\"CAS 6 Test 2\" vmware_folder=\"/Computer Services/vm/CAS Authentication Servers\" tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11","title":"Build Environment"},{"location":"setting-up-the-environment/build-environment/#build-environment","text":"Summary My build server is our existing Ansible host. I've set that system up several years ago - so I may have missed a step or two here. I'll try to recreate this from scratch later though.","title":"Build Environment"},{"location":"setting-up-the-environment/build-environment/#install-and-configure-git","text":"We keep our code for git in an internal git repository running Bitbucket Server . We make enough changes to CAS and Ansible that I would be insane to not use git or some other form of version control for development. Whether you do or not is up to you - but the instructions here assume you are using some sort of git repository. If you aren't familiar with Git - I recommend Pro Git, available online for free via (https://git-scm.com/book/en/v2).","title":"Install and Configure git"},{"location":"setting-up-the-environment/build-environment/#install-and-basic-configuration-of-git","text":"This should be done as the user you are going to be running Ansible and building CAS from - NOT root. yum install git git config --global user.name \"Your Name Here\" git config --global user.email \"Your Email Here\"","title":"Install and basic configuration of Git"},{"location":"setting-up-the-environment/build-environment/#install-ansible","text":"We are using the version of Ansible that comes with RedHat. This was just installed via: yum install ansible","title":"Install Ansible"},{"location":"setting-up-the-environment/build-environment/#set-up-ssh-public-key-authentication","text":"If you're deploying via Ansible, or just using SCP/SFTP to copy files over, you'll want to set up public key authentication.","title":"Set up SSH public key authentication"},{"location":"setting-up-the-environment/build-environment/#from-the-master-server","text":"When done - view the contents of the public key (by default in /home/username/.ssh/id_rsa.pub) - you'll need it in the next step.","title":"From the master server:"},{"location":"setting-up-the-environment/build-environment/#from-the-cas-servers","text":"Edit the file /root/.ssh/authorized_keys Place the contents of the public key in that file.","title":"From the CAS servers:"},{"location":"setting-up-the-environment/build-environment/#test","text":"Login to your build server as the user you will be building CAS and running ansible from (I'll use 'builduser' as an example here). See if you can login to one of your newly built CAS servers without entering a password. ssh root@cas6dev1 If successful - you'll be logged in without a username or password. If this is the first time you are connecting via SSH from the build host to the CAS host, you'll be warned that the authenticity of the host cannot be established, and you'll be prompted to enter yes to continue connecting.","title":"Test"},{"location":"setting-up-the-environment/build-environment/#configure-a-hosts-file-for-ansible","text":"You will need a hosts file for Ansible. This file can have simply the hostname, or it could have some variables as well. We at New Paltz put a few things there such as the hostname, the VM name (in vCenter), the folder (in vCenter), and the Tomcat version (so I can roll out updates to Tomcat in some environments earlier than others). An example of this for CAS servers is below. This file would be in /etc/ansible/hosts: [CAS_DEV] cas6dev1 vmware_name=\"CAS 6 Test 1\" vmware_folder=\"/Computer Services/vm/CAS Authentication Servers\" tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 cas6dev2 vmware_name=\"CAS 6 Test 2\" vmware_folder=\"/Computer Services/vm/CAS Authentication Servers\" tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 [CAS_TEST] cas6test1 vmware_name=\"CAS 6 Test 1\" vmware_folder=\"/Computer Services/vm/CAS Authentication Servers\" tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 cas6test2 vmware_name=\"CAS 6 Test 2\" vmware_folder=\"/Computer Services/vm/CAS Authentication Servers\" tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 [CAS_PROD] cas6prod1 vmware_name=\"CAS 6 Test 1\" vmware_folder=\"/Computer Services/vm/CAS Authentication Servers\" tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11 cas6prod2 vmware_name=\"CAS 6 Test 2\" vmware_folder=\"/Computer Services/vm/CAS Authentication Servers\" tomcat_major_ver=9.0 tomcat_ver=9.0.41 jdk_version=11","title":"Configure a hosts file for Ansible"},{"location":"setting-up-the-environment/overview/","text":"System/Architecture Overview Components !!! Summary: Before beginning the CAS build and configuration process, you will want to plan out your server environment. Below is how we have things setup - but by no means is the only way. We at New Paltz have a three-tiered CAS consisting of: Development: This is used exclusively for deploying/configuring/testing CAS itself - no end users use this. Test: This is used for test applications/environments which still need authentication such as Banner Test. Since there are a number of IT staff and end users testing these applications, changes here can still impact users though far less than production. Production: The actual public facing CAS. Within each tier, you will want one or more servers. We do something similar to: Development CAS6Dev1 CAS6Dev2 logindev: Public-facing load balanced virtual host Test CAS6Test1 CAS6Test2 logintest: Public-facing load balanced virtual host Production CAS6Prod1 CAS6Prod2 login: Public-facing load balanced virtual host Each of these servers for us are RHEL 8 hosts, with: 2 virtual CPUs for production, 1 for test/dev 4 GB memory (though can probably get away with less) 25 GB disk For the official requirements, see the Apereo CAS Installation Requirements document. I will document both how to set these up manually, as well as my Ansible playbooks which handle deployment (of Apache, Apache Tomcat, and CAS itself).","title":"Overview"},{"location":"setting-up-the-environment/overview/#systemarchitecture-overview","text":"","title":"System/Architecture Overview"},{"location":"setting-up-the-environment/overview/#components","text":"!!! Summary: Before beginning the CAS build and configuration process, you will want to plan out your server environment. Below is how we have things setup - but by no means is the only way. We at New Paltz have a three-tiered CAS consisting of: Development: This is used exclusively for deploying/configuring/testing CAS itself - no end users use this. Test: This is used for test applications/environments which still need authentication such as Banner Test. Since there are a number of IT staff and end users testing these applications, changes here can still impact users though far less than production. Production: The actual public facing CAS. Within each tier, you will want one or more servers. We do something similar to: Development CAS6Dev1 CAS6Dev2 logindev: Public-facing load balanced virtual host Test CAS6Test1 CAS6Test2 logintest: Public-facing load balanced virtual host Production CAS6Prod1 CAS6Prod2 login: Public-facing load balanced virtual host Each of these servers for us are RHEL 8 hosts, with: 2 virtual CPUs for production, 1 for test/dev 4 GB memory (though can probably get away with less) 25 GB disk For the official requirements, see the Apereo CAS Installation Requirements document. I will document both how to set these up manually, as well as my Ansible playbooks which handle deployment (of Apache, Apache Tomcat, and CAS itself).","title":"Components"},{"location":"setting-up-the-environment/tomcat/","text":"Installing and maintaining Tomcat via Ansible","title":"Tomcat setup via Ansible"},{"location":"setting-up-the-environment/tomcat/#installing-and-maintaining-tomcat-via-ansible","text":"","title":"Installing and maintaining Tomcat via Ansible"}]}